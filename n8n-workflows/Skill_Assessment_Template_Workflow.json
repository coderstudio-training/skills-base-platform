{
  "name": "Skill Assessment Template Workflow",
  "nodes": [
    {
      "parameters": {
        "options": {}
      },
      "name": "Google Sheets",
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 2,
      "position": [580, -213],
      "id": "9f8adb97-e876-43fa-ae32-cda79d8199bf",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "feE9JVAcVI0VzCDr",
          "name": "Google Sheets account"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "jsCode": "// Extract the access token from the login response\nconst accessToken = $node['Login'].json.access_token;\n\nif (!accessToken) {\n  throw new Error('Failed to obtain access token');\n}\n\n// Process the data from Google Sheets\nconst sheetData = $node['Google Sheets'].json.values;\nconst headers = sheetData[0];\nconst data = sheetData.slice(1);\n\nconst processedData = data.map(row => {\n  const item = {};\n  headers.forEach((header, index) => {\n    item[header] = row[index];\n  });\n  return {\n    employeeId: item.EmployeeID,\n    name: item.Name,\n    department: item.Department,\n    skills: {\n      JavaScript: parseInt(item.JavaScript) || 0,\n      Python: parseInt(item.Python) || 0\n      // Add more skills as needed\n    }\n  };\n});\n\nconst validItems = [];\nconst errors = [];\n\nprocessedData.forEach((item, index) => {\n  if (!item.employeeId) {\n    errors.push({ index, error: 'Missing EmployeeID' });\n  } else if (Object.values(item.skills).some(level => level < 0 || level > 5)) {\n    errors.push({ index, error: 'Skill levels must be between 0 and 5' });\n  } else {\n    validItems.push(item);\n  }\n});\n\n// Return the results along with the access token\nreturn {\n  json: {\n    accessToken,\n    validItems,\n    errors\n  }\n};"
      },
      "name": "Process and Validate Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [720, -213],
      "id": "35b3e59b-1f01-463e-aeb3-2fc44b470bb4",
      "disabled": true
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://your-nestjs-api.com/api/skills-matrix/bulk-update",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Bearer {{ $json.accessToken }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "data",
              "value": "={{ $json.validItems }}"
            }
          ]
        },
        "options": {}
      },
      "name": "Update Skills Matrix API",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [920, -213],
      "id": "148de34e-64ca-4ed1-9906-6887e567e07b",
      "disabled": true
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{ $json.statusCode }}"
            }
          ]
        }
      },
      "name": "Check API Response",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [1120, -213],
      "id": "23b869ee-551c-4fcf-bf2a-dd67df4f7523",
      "disabled": true
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://your-nestjs-api.com/api/notifications/success",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Bearer {{ $node[\"Process and Validate Data\"].json.accessToken }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "message",
              "value": "=Skills Matrix update completed successfully. Updated {{ $json.body.updatedCount }} records."
            }
          ]
        },
        "options": {}
      },
      "name": "Send Success Notification API",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [1320, -313],
      "id": "52aacf51-c93f-40f1-821a-09f125aa40b6",
      "disabled": true
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://your-nestjs-api.com/api/notifications/error",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Bearer {{ $node[\"Process and Validate Data\"].json.accessToken }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "message",
              "value": "=Error occurred during Skills Matrix update: {{ $json.body }}"
            }
          ]
        },
        "options": {}
      },
      "name": "Send Error Notification API",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [1320, -113],
      "id": "e00eb5d7-8192-4b74-89ac-7f60e6a38219",
      "disabled": true
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{ $json.errors.length > 0 }}"
            }
          ]
        }
      },
      "name": "Check for Validation Errors",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [980, 147],
      "id": "479f3835-58c9-460c-9b4a-73f29d3f08e0",
      "disabled": true
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://your-nestjs-api.com/api/error-logs/create",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Bearer {{ $node[\"Process and Validate Data\"].json.accessToken }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "errors",
              "value": "={{ $json.errors }}"
            }
          ]
        },
        "options": {}
      },
      "name": "Log Errors to API",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [1320, 107],
      "id": "dfb0bdfd-5dae-4f10-8e44-cbe58ebd480e",
      "disabled": true
    },
    {
      "parameters": {
        "content": "## Reference",
        "height": 756.3366169586252,
        "width": 1037.2586577128786,
        "color": 3
      },
      "id": "33c4815d-a6f5-44a0-a5e6-c863818965f7",
      "name": "Sticky Note",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [520, -380]
    },
    {
      "parameters": {
        "authentication": "serviceAccount",
        "resource": "fileFolder",
        "searchMethod": "query",
        "queryString": "='{{ $('GET Watched Folder').item.json.id }}' in parents",
        "filter": {},
        "options": {
          "fields": ["mimeType", "name", "id", "version"]
        }
      },
      "id": "cf457582-1bec-4a99-b5bd-6a811524b667",
      "name": "Find Sheets1",
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [4220, -60],
      "credentials": {
        "googleApi": {
          "id": "w27aj7tkRulsWxQB",
          "name": "Stratpoint Google Service Account"
        }
      }
    },
    {
      "parameters": {
        "authentication": "serviceAccount",
        "documentId": {
          "__rl": true,
          "value": "={{ $json.id }}",
          "mode": "id"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Sheet1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1ukDJwEH9Vza428y8XaKdDdv_2bld8-0xBGnXxpNnwZ4/edit#gid=0"
        },
        "options": {}
      },
      "id": "395542e6-dda5-4740-ab3f-6519abfb44c3",
      "name": "GET Sheets Data1",
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.5,
      "position": [4660, -240],
      "credentials": {
        "googleApi": {
          "id": "w27aj7tkRulsWxQB",
          "name": "Stratpoint Google Service Account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Helper function to convert strings to camelCase\nfunction toCamelCase(str) {\n  return str\n    .toLowerCase()\n    .replace(/[^a-zA-Z0-9]+(.)/g, (_, chr) => chr.toUpperCase());\n}\n\n// Extract access token from login response\nconst accessToken = $node['Login to API'].json.access_token;\nif (!accessToken) {\n  throw new Error('Failed to obtain access token');\n}\n\nconst prefixBU = $node['GET Parent'].json.name.split('_')[0];\nconst assessmentType = $node['Find Sheets1'].json.name.toLowerCase().split('_')[1];\n\n// Process the data from Google Sheets\nconst sheetData = items.map(item => item.json);\n\n// Determine required fields dynamically from the first row\nconst firstRow = sheetData[0];\nconst requiredFields = Object.keys(firstRow).filter(key => isNaN(firstRow[key]) || typeof firstRow[key] === 'string');\n\n// Process and validate data\nconst processedData = sheetData.map(row => {\n  // Separate non-numeric fields for basic info\n  const basicInfo = Object.fromEntries(\n    Object.entries(row).filter(([_, value]) => isNaN(value) || typeof value === 'string')\n  );\n\n  // Separate numeric fields for skills, excluding `row_number`\n  const skills = Object.fromEntries(\n    Object.entries(row)\n      .filter(([key, value]) => !isNaN(value) && key !== 'row_number')\n      .map(([key, value]) => [toCamelCase(key), parseInt(value) || 0]) // Use toCamelCase here\n  );\n\n  // Apply camel casing to basicInfo keys\n  const camelCasedBasicInfo = Object.fromEntries(\n    Object.entries(basicInfo).map(([key, value]) => [toCamelCase(key), value])\n  );\n\n  return { ...camelCasedBasicInfo, skills };\n});\n\n// Validate the data\nconst validItems = [];\nconst errors = [];\n\nprocessedData.forEach((item, index) => {\n  const validationErrors = [];\n\n  // Check if required fields are present in basicInfo\n  requiredFields.forEach(field => {\n    const camelCasedField = toCamelCase(field); // Ensure the field is in camel case\n    if (!item[camelCasedField]) {\n      validationErrors.push(`Missing ${field}`);\n    }\n  });\n\n  // Additional validation for emailOfResource if assessment type is 'Manager'\n  if (assessmentType === 'manager' && !item['emailOfResource']) {\n    validationErrors.push('Missing Email of Resource');\n  }\n\n  // Check skill levels dynamically\n  Object.entries(item.skills).forEach(([skillName, level]) => {\n    if (level < 0 || level > 6) {\n      validationErrors.push(`Invalid level for ${skillName}: must be between 0 and 6 (received: ${level})`);\n    }\n  });\n\n  if (validationErrors.length > 0) {\n    errors.push({\n      index,\n      name: item['nameOfRespondent'] || 'Unknown',\n      errors: validationErrors\n    });\n  } else {\n    validItems.push(item);\n  }\n});\n\n// Return the results along with the access token\nreturn {\n  json: {\n    prefixBU,\n    assessmentType,\n    validItems,\n    errors,\n    summary: {\n      totalProcessed: processedData.length,\n      validCount: validItems.length,\n      errorCount: errors.length\n    }\n  }\n};\n"
      },
      "id": "7c5de254-6735-48e1-8c12-078a6693b9f0",
      "name": "Process and Validate Data2",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [4840, -60]
    },
    {
      "parameters": {
        "url": "=https://www.googleapis.com/drive/v3/files/{{ $node['Return Data'].json.parents[0] }}?fields=id,createdTime,modifiedTime,name,parents",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "googleApi",
        "options": {}
      },
      "id": "28904280-6e11-4e4e-b160-a258fd597168",
      "name": "GET Watched Folder",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [3880, -60],
      "credentials": {
        "googleApi": {
          "id": "w27aj7tkRulsWxQB",
          "name": "Stratpoint Google Service Account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Return all items from the previous node as they are\nreturn $input.all(); // Directly return all items from the previous node"
      },
      "id": "27ee6256-2150-4b96-8fe4-8b72709d07ef",
      "name": "Return Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [3540, -60]
    },
    {
      "parameters": {
        "url": "=https://www.googleapis.com/drive/v3/files/{{ $node['GET Watched Folder'].json.parents[0] }}?fields=id,name",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "googleApi",
        "options": {}
      },
      "id": "72477c81-6ff8-4b82-956f-fe3f4eabd04e",
      "name": "GET Parent",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [4060, -240],
      "credentials": {
        "googleApi": {
          "id": "w27aj7tkRulsWxQB",
          "name": "Stratpoint Google Service Account"
        }
      }
    },
    {
      "parameters": {
        "content": "## Template\n**Google Drive Trigger on Manager and Self Folders per BU** ",
        "height": 948.7079402376605,
        "width": 3127.984283959847,
        "color": 5
      },
      "id": "f02a6bf8-8924-4e67-85d3-585af11c63f4",
      "name": "Sticky Note4",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [3420, -440]
    },
    {
      "parameters": {
        "content": "## Triggers\n**Sample Drives**\n",
        "height": 1483.8481971874348,
        "width": 565.508881533009
      },
      "id": "2c3de9ca-87a5-4f76-a39e-e4721ef97db8",
      "name": "Sticky Note5",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [2840, -898.923413030092]
    },
    {
      "parameters": {
        "pollTimes": {
          "item": [
            {
              "mode": "everyMinute"
            }
          ]
        },
        "authentication": "serviceAccount",
        "triggerOn": "specificFolder",
        "folderToWatch": {
          "__rl": true,
          "value": "1F_TlRIQu9iQoQA48_ncQQWpMoOOyv0xE",
          "mode": "id"
        },
        "event": "fileUpdated",
        "options": {}
      },
      "id": "40a52204-a29f-4c12-b2ac-b3981f669e4d",
      "name": "AI Self Assessment Drive Trigger",
      "type": "n8n-nodes-base.googleDriveTrigger",
      "typeVersion": 1,
      "position": [2920, -600],
      "credentials": {
        "googleApi": {
          "id": "w27aj7tkRulsWxQB",
          "name": "Stratpoint Google Service Account"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "pollTimes": {
          "item": [
            {
              "mode": "everyMinute"
            }
          ]
        },
        "authentication": "serviceAccount",
        "triggerOn": "specificFolder",
        "folderToWatch": {
          "__rl": true,
          "value": "1yYyQ91bFJTY-VGxJupsIZBE0ME0jXHas",
          "mode": "id"
        },
        "event": "fileUpdated",
        "options": {}
      },
      "id": "cd4ec5ba-5b05-4a2a-a381-6528e2f6d14c",
      "name": "AI Manager Assessments Drive Trigger",
      "type": "n8n-nodes-base.googleDriveTrigger",
      "typeVersion": 1,
      "position": [3160, -600],
      "credentials": {
        "googleApi": {
          "id": "w27aj7tkRulsWxQB",
          "name": "Stratpoint Google Service Account"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "pollTimes": {
          "item": [
            {
              "mode": "everyMinute"
            }
          ]
        },
        "authentication": "serviceAccount",
        "triggerOn": "specificFolder",
        "folderToWatch": {
          "__rl": true,
          "value": "1eXwPcISXx2Ndplr-sx1kXNWkYL0rrc70",
          "mode": "id"
        },
        "event": "fileUpdated",
        "options": {}
      },
      "id": "e4796b73-871d-4ba7-b72c-facac6cf11fa",
      "name": "QA Self Assessment Drive Trigger",
      "type": "n8n-nodes-base.googleDriveTrigger",
      "typeVersion": 1,
      "position": [2920, -380],
      "credentials": {
        "googleApi": {
          "id": "w27aj7tkRulsWxQB",
          "name": "Stratpoint Google Service Account"
        }
      }
    },
    {
      "parameters": {
        "pollTimes": {
          "item": [
            {
              "mode": "everyMinute"
            }
          ]
        },
        "authentication": "serviceAccount",
        "triggerOn": "specificFolder",
        "folderToWatch": {
          "__rl": true,
          "value": "1FTltnTBVmQsR56i9mbjTik7MM3Nx_l4f",
          "mode": "id"
        },
        "event": "fileUpdated",
        "options": {}
      },
      "id": "78cca373-7234-4bae-aff4-b2374960e028",
      "name": "QA Manager Assessments Drive Trigger",
      "type": "n8n-nodes-base.googleDriveTrigger",
      "typeVersion": 1,
      "position": [3160, -380],
      "credentials": {
        "googleApi": {
          "id": "w27aj7tkRulsWxQB",
          "name": "Stratpoint Google Service Account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://192.168.143.2:3002/api/skills-assessments/bulk-update-assessments",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Bearer {{ $node['Login to API'].json.access_token }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "assessmentType",
              "value": "={{ $node['Process and Validate Data2'].json.assessmentType }}"
            },
            {
              "name": "data",
              "value": "={{ $node['Process and Validate Data2'].json.validItems }}"
            }
          ]
        },
        "options": {}
      },
      "name": "Update Skills Assessments",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [5040, -60],
      "id": "e46c8c01-39b0-45eb-8c24-fb942b0d9bf5"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://192.168.143.2:3002/api/skills-assessments/bulk-update-assessments",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Bearer {{ $node['Login to API'].json.access_token }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "assessmentType",
              "value": "={{ $node['Compute Skills Gap'].json.assessmentType }}"
            },
            {
              "name": "data",
              "value": "={{ $node['Compute Skills Gap'].json.validItems }}"
            }
          ]
        },
        "options": {}
      },
      "name": "Update Skill Gaps API",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [5880, -60],
      "id": "cb6bcc42-1a6f-4e5e-9b72-ff4c6e7e3227"
    },
    {
      "parameters": {
        "url": "http://192.168.143.2:3002/api/skills-assessments/bulk-performance",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Bearer {{ $node['Login to API'].json.access_token }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "bu",
              "value": "={{ $node['Process and Validate Data2'].json.prefixBU }}"
            }
          ]
        },
        "options": {}
      },
      "id": "0fa82541-904f-407d-b678-5d2855260766",
      "name": "GET Employee Performance Data API",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [5240, -240]
    },
    {
      "parameters": {
        "url": "=http://192.168.143.2:3002/api/skills-assessments/required-skills?capability={{ $node['Process and Validate Data2'].json.prefixBU }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Bearer {{ $node['Login to API'].json.access_token }}"
            }
          ]
        },
        "options": {}
      },
      "id": "d434bbc3-84af-4ede-ba4c-b52594003381",
      "name": "GET Required Skill Levels API",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [5240, 120]
    },
    {
      "parameters": {
        "jsCode": "// Helper function to convert strings to camelCase\nfunction toCamelCase(str) {\n  return str\n    .toLowerCase()\n    .replace(/[^a-zA-Z0-9]+(.)/g, (_, chr) => chr.toUpperCase());\n}\n\n// Extract the prefix business unit and assessment type\nconst prefixBU = $node['GET Parent'].json.name.split('_')[0];\nconst assessmentType = 'gap'; \n\n// Initialize arrays for performance and required skills data\nlet performanceData = [];\nlet requiredSkillsData = [];\n\n// Iterate through each item from the previous node\nitems.forEach(item => {\n  // Check if `emailAddress` exists to differentiate performance data from required skills\n  if (item.json.emailAddress) {\n    // This is performance data\n    performanceData.push(item.json); // Push the performance data item\n  } else {\n    // This is required skills data\n    requiredSkillsData.push(item.json); // Push the required skills data item\n  }\n});\n\n// Now calculate the skills gap for each employee in the performanceData\nlet result = [];\n\n// Iterate through each employee in performanceData\nperformanceData.forEach(employee => {\n  // Find the corresponding required skills based on capability and career level\n  const requiredSkills = requiredSkillsData.find(skill => \n    skill.capability === employee.capability && \n    skill.careerLevel === employee.careerLevel\n  );\n\n  if (requiredSkills) {\n    let skillGaps = {\n      emailAddress: employee.emailAddress,\n      nameOfResource: employee.nameOfResource,\n      careerLevel: employee.careerLevel,\n      capability: employee.capability,\n      skillAverages: employee.averageOfSkills, // Include the average skills directly\n      skillGaps: {},  // Using an object to store skills and their gaps directly\n    };\n\n    // Calculate the gap for each skill\n    Object.keys(employee.averageOfSkills).forEach(skill => {\n      const performanceLevel = employee.averageOfSkills[skill];\n      const requiredLevel = requiredSkills.requiredSkills[skill] || 0; // Default to 0 if not found\n\n      // Calculate the gap\n      const gap = performanceLevel - requiredLevel;\n\n      // Add the skill gap directly as a key-value pair to the skillGaps object\n      skillGaps.skillGaps[skill] = gap;\n    });\n\n    // Add the skill gaps to the result\n    result.push(skillGaps);\n  }\n});\n\n// Validation: Check if all required fields are present in the performance data\nconst validItems = [];\nconst errors = [];\n\nresult.forEach((item, index) => {\n  const validationErrors = [];\n\n  // Check if all required fields are present (emailAddress, nameOfResource, etc.)\n  if (!item.emailAddress) {\n    validationErrors.push('Missing emailAddress');\n  }\n  if (!item.nameOfResource) {\n    validationErrors.push('Missing nameOfResource');\n  }\n  if (!item.careerLevel) {\n    validationErrors.push('Missing careerLevel');\n  }\n  if (!item.capability) {\n    validationErrors.push('Missing capability');\n  }\n  if (!item.skillGaps || Object.keys(item.skillGaps).length === 0) {\n    validationErrors.push('Missing skill gaps');\n  }\n\n  // If there are validation errors, push them to the errors array\n  if (validationErrors.length > 0) {\n    errors.push({\n      index,\n      name: item.nameOfResource || 'Unknown',\n      errors: validationErrors\n    });\n  } else {\n    validItems.push(item);\n  }\n});\n\n// Return the result along with the access token and validation summary\nreturn {\n  json: {\n    prefixBU,\n    assessmentType,\n    validItems,\n    errors,\n    summary: {\n      totalProcessed: result.length,\n      validCount: validItems.length,\n      errorCount: errors.length\n    }\n  }\n};\n"
      },
      "id": "61a2710b-cf37-4f01-bec9-41a0238c5c46",
      "name": "Compute Skills Gap",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [5660, -60]
    },
    {
      "parameters": {
        "pollTimes": {
          "item": [
            {
              "mode": "everyMinute"
            }
          ]
        },
        "authentication": "serviceAccount",
        "triggerOn": "specificFolder",
        "folderToWatch": {
          "__rl": true,
          "value": "1iaPAO2NZFjOCxJoLBea3MSHS8KPFzfkm",
          "mode": "id"
        },
        "event": "fileUpdated",
        "options": {}
      },
      "id": "c068e755-3ac6-4a1a-94f1-ee846676eceb",
      "name": "CLD Self Assessment Drive Trigger",
      "type": "n8n-nodes-base.googleDriveTrigger",
      "typeVersion": 1,
      "position": [2920, -160],
      "credentials": {
        "googleApi": {
          "id": "w27aj7tkRulsWxQB",
          "name": "Stratpoint Google Service Account"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "pollTimes": {
          "item": [
            {
              "mode": "everyMinute"
            }
          ]
        },
        "authentication": "serviceAccount",
        "triggerOn": "specificFolder",
        "folderToWatch": {
          "__rl": true,
          "value": "1jZFic8TsBoqy_Lf8awrkskAn4KmRCApO",
          "mode": "id"
        },
        "event": "fileUpdated",
        "options": {}
      },
      "id": "33b30426-a8a8-4dbc-9b7c-466099a613a3",
      "name": "CLD Manager Assessments Drive Trigger",
      "type": "n8n-nodes-base.googleDriveTrigger",
      "typeVersion": 1,
      "position": [3160, -160],
      "credentials": {
        "googleApi": {
          "id": "w27aj7tkRulsWxQB",
          "name": "Stratpoint Google Service Account"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "pollTimes": {
          "item": [
            {
              "mode": "everyMinute"
            }
          ]
        },
        "authentication": "serviceAccount",
        "triggerOn": "specificFolder",
        "folderToWatch": {
          "__rl": true,
          "value": "1eB63XhjwBwS1gjN4QuKRuuc9xFfiXbtX",
          "mode": "id"
        },
        "event": "fileUpdated",
        "options": {}
      },
      "id": "06df99e0-dd47-4b19-9a19-1e034d288f94",
      "name": "SLS Self Assessment Drive Trigger",
      "type": "n8n-nodes-base.googleDriveTrigger",
      "typeVersion": 1,
      "position": [2920, -800],
      "credentials": {
        "googleApi": {
          "id": "w27aj7tkRulsWxQB",
          "name": "Stratpoint Google Service Account"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "pollTimes": {
          "item": [
            {
              "mode": "everyMinute"
            }
          ]
        },
        "authentication": "serviceAccount",
        "triggerOn": "specificFolder",
        "folderToWatch": {
          "__rl": true,
          "value": "1M2p_RPCABaaxjFmcity6l708umqP84Vp",
          "mode": "id"
        },
        "event": "fileUpdated",
        "options": {}
      },
      "id": "7958d489-d870-4040-9a5c-96d0407eb8db",
      "name": "SLS Manager Assessment Drive Trigger",
      "type": "n8n-nodes-base.googleDriveTrigger",
      "typeVersion": 1,
      "position": [3160, -800],
      "credentials": {
        "googleApi": {
          "id": "w27aj7tkRulsWxQB",
          "name": "Stratpoint Google Service Account"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "11586fad-38e4-4f9b-b45a-4c258bff6110",
              "leftValue": "={{ $json.mimeType }}",
              "rightValue": "application/vnd.google-apps.spreadsheet",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "id": "4c7de73c-5bc4-49e1-aca2-e2913e667f4d",
      "name": "Check File Type",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [4440, -60]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "4a2c185c-5aaa-4cdb-a242-5a55aec1ecef",
              "leftValue": "={{ $json.updatedCount }}",
              "rightValue": "",
              "operator": {
                "type": "number",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "id": "b8954211-9f23-4d0c-81b0-5fd56a5c4a2a",
      "name": "Check API Response4",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [6120, -60]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://172.22.156.50:3005/email/send-success",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Bearer {{ $node[\"Login to API\"].json.access_token }}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={ \n  \"workflowName\": \"{{ $workflow.name }}\"\n}",
        "options": {}
      },
      "id": "2cdd41f9-8125-4861-8224-418203af5bbc",
      "name": "Send Success Message API3",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [6320, -240],
      "disabled": true
    },
    {
      "parameters": {},
      "id": "c03ba5b9-0e55-49e5-8ee8-a5544d719a0c",
      "name": "Merge Data",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [5440, -60]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://192.168.143.2:3001/auth/login",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "email",
              "value": "admin@example.com"
            },
            {
              "name": "password",
              "value": "AdminPassword123!"
            }
          ]
        },
        "options": {}
      },
      "name": "Login to API",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [3720, -240],
      "id": "86ae1a32-d913-4e9b-a78d-cf91b3e03277"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://172.22.156.50:3005/email/send-error",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Bearer {{ $node['Login to API'].json.access_token }}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={ \n  \"workflowName\": \"{{ $workflow.name }}\"\n}",
        "options": {}
      },
      "id": "f779adfa-c85c-452c-b549-3f7bc37063af",
      "name": "Send Error Message API",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [4660, 120]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://172.22.156.50:3005/email/send-error",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Bearer {{ $node['Login to API'].json.access_token }}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={ \n  \"workflowName\": \"{{ $workflow.name }}\"\n}",
        "options": {}
      },
      "id": "cf8d9b30-7c3f-42ff-a15d-b26e3de97cb0",
      "name": "Send Error Message API1",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [6340, 100],
      "disabled": true
    }
  ],
  "pinData": {},
  "connections": {
    "Google Sheets": {
      "main": [
        [
          {
            "node": "Process and Validate Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process and Validate Data": {
      "main": [
        [
          {
            "node": "Update Skills Matrix API",
            "type": "main",
            "index": 0
          },
          {
            "node": "Check for Validation Errors",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Skills Matrix API": {
      "main": [
        [
          {
            "node": "Check API Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check API Response": {
      "main": [
        [
          {
            "node": "Send Success Notification API",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Send Error Notification API",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check for Validation Errors": {
      "main": [
        [
          {
            "node": "Log Errors to API",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Find Sheets1": {
      "main": [
        [
          {
            "node": "Check File Type",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GET Sheets Data1": {
      "main": [
        [
          {
            "node": "Process and Validate Data2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process and Validate Data2": {
      "main": [
        [
          {
            "node": "Update Skills Assessments",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GET Watched Folder": {
      "main": [
        [
          {
            "node": "GET Parent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Return Data": {
      "main": [
        [
          {
            "node": "Login to API",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GET Parent": {
      "main": [
        [
          {
            "node": "Find Sheets1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Skills Assessments": {
      "main": [
        [
          {
            "node": "GET Employee Performance Data API",
            "type": "main",
            "index": 0
          },
          {
            "node": "GET Required Skill Levels API",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GET Employee Performance Data API": {
      "main": [
        [
          {
            "node": "Merge Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GET Required Skill Levels API": {
      "main": [
        [
          {
            "node": "Merge Data",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Compute Skills Gap": {
      "main": [
        [
          {
            "node": "Update Skill Gaps API",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check File Type": {
      "main": [
        [
          {
            "node": "GET Sheets Data1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Send Error Message API",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Skill Gaps API": {
      "main": [
        [
          {
            "node": "Check API Response4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check API Response4": {
      "main": [
        [
          {
            "node": "Send Success Message API3",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Send Error Message API1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "QA Self Assessment Drive Trigger": {
      "main": [
        [
          {
            "node": "Return Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Data": {
      "main": [
        [
          {
            "node": "Compute Skills Gap",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Login to API": {
      "main": [
        [
          {
            "node": "GET Watched Folder",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "QA Manager Assessments Drive Trigger": {
      "main": [
        [
          {
            "node": "Return Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "876cd3f9-1dca-4870-b3f3-409de4cd6134",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "a31f8c9eb797a311bc289ce7bafeb2442b7772146dd18635dc019f72cb5829a0"
  },
  "id": "ywSj2r7j8rqYit96",
  "tags": []
}
