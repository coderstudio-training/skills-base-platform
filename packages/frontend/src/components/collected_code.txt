{
  "metadata": {
    "collection_date": "2024-12-03",
    "collection_time": "01:23:41 UTC",
    "source_directory": "/home/eydrian/Projects/skills-base-platform/packages/frontend/src/components",
    "excluded_patterns": [],
    "file_extensions": [
      "py",
      "sh",
      "yml",
      "yaml",
      "js",
      "jsx",
      "java",
      "cpp",
      "c",
      "h",
      "hpp",
      "cs",
      "html",
      "css",
      "tsx",
      "ts",
      "go",
      "rb",
      "php",
      "scala",
      "rs",
      "swift"
    ],
    "system_info": {
      "platform": "linux",
      "cores": 8,
      "memory": "8GB"
    }
  },
  "statistics": {
    "total_files": 69,
    "total_lines": 7612,
    "file_sizes": {
      "tsx": 261463,
      "ts": 8129
    },
    "language_distribution": {
      "tsx": 62,
      "ts": 7
    }
  },
  "contents": "--- FILE: dashboard/manager/TeamMembersList.tsx ---\nLANGUAGE: tsx\nBEGIN_CODE\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { ScrollArea } from '@/components/ui/scroll-area';\nimport { TeamMember } from '@/types/manager';\n\ninterface TeamMembersListProps {\n  loading: boolean;\n  error: string | null;\n  members: TeamMember[];\n  showPerformance?: boolean;\n}\n\nconst TeamMembersList = ({\n  loading,\n  error,\n  members,\n  showPerformance = true,\n}: TeamMembersListProps) => {\n  const renderLoadingState = () => (\n    <div className=\"space-y-4 pr-4\">\n      {[1, 2, 3, 4, 5].map(i => (\n        <div\n          key={i}\n          className=\"flex items-center justify-between p-2 rounded-lg bg-gray-50 animate-pulse\"\n        >\n          <div className=\"flex items-center gap-3\">\n            <div className=\"h-10 w-10 rounded-full bg-gray-200\" />\n            <div>\n              <div className=\"h-4 w-32 bg-gray-200 rounded mb-2\" />\n              <div className=\"h-3 w-24 bg-gray-200 rounded\" />\n            </div>\n          </div>\n          {showPerformance && (\n            <div className=\"flex items-center\">\n              <div className=\"h-4 w-12 bg-gray-200 rounded\" />\n            </div>\n          )}\n        </div>\n      ))}\n    </div>\n  );\n\n  const renderErrorState = () => (\n    <div className=\"flex items-center justify-center h-full text-red-500\">\n      <p>{error}</p>\n    </div>\n  );\n\n  const renderEmptyState = () => (\n    <div className=\"flex items-center justify-center h-[300px] text-gray-500\">\n      No team members found\n    </div>\n  );\n\n  const renderMembersList = () => (\n    <div className=\"space-y-4 pr-4\">\n      {members.map(member => (\n        <div\n          key={member.email}\n          className=\"flex items-center justify-between p-2 rounded-lg hover:bg-gray-50 transition-colors\"\n        >\n          <div className=\"flex items-center gap-3\">\n            <Avatar className=\"h-10 w-10\">\n              {member.picture ? (\n                <AvatarImage\n                  src={member.picture}\n                  alt={`${member.firstName} ${member.lastName}`}\n                  width={40}\n                  height={40}\n                  onError={e => {\n                    const imgElement = e.target as HTMLImageElement;\n                    imgElement.style.display = 'none';\n                  }}\n                />\n              ) : null}\n              <AvatarFallback className=\"uppercase bg-gray-100 text-gray-600\">\n                {member.firstName?.[0]}\n                {member.lastName?.[0]}\n              </AvatarFallback>\n            </Avatar>\n            <div>\n              <p className=\"font-medium\">\n                {member.firstName} {member.lastName}\n              </p>\n              <p className=\"text-sm text-gray-500\">{`${member.jobLevel} ${member.designation}`}</p>\n            </div>\n          </div>\n          {showPerformance && member.performanceScore && (\n            <div className=\"flex items-center\">\n              <span className=\"font-medium\">{member.performanceScore}%</span>\n            </div>\n          )}\n        </div>\n      ))}\n    </div>\n  );\n\n  return (\n    <Card>\n      <CardContent className=\"pt-6\">\n        <h3 className=\"font-bold mb-1\">Team Members List</h3>\n        <p className=\"text-sm text-gray-500 mb-4\">List of your team members</p>\n        <ScrollArea className=\"h-[400px] w-full\">\n          {loading && renderLoadingState()}\n          {error && renderErrorState()}\n          {!loading && !error && members.length === 0 && renderEmptyState()}\n          {!loading && !error && members.length > 0 && renderMembersList()}\n        </ScrollArea>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default TeamMembersList;\n\nEND_CODE\n\n--- FILE: dashboard/manager/ManagerSkillsView.tsx ---\nLANGUAGE: tsx\nBEGIN_CODE\n'use client';\n\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { Badge } from '@/components/ui/badge';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { ScrollArea } from '@/components/ui/scroll-area';\nimport { getSkills } from '@/lib/api';\nimport { cn } from '@/lib/utils';\nimport { Employee } from '@/types/admin';\nimport { TeamMemberWithSkills } from '@/types/manager';\nimport { useSession } from 'next-auth/react';\nimport { useEffect, useState } from 'react';\n\nexport default function ManagerSkillsView() {\n  const { data: session } = useSession();\n  const [teamSkills, setTeamSkills] = useState<TeamMemberWithSkills[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    const fetchSkillsData = async () => {\n      try {\n        setLoading(true);\n\n        // Fetch team members\n        const teamResponse = await fetch(\n          `/api/employees/manager/${encodeURIComponent(session?.user?.name || '')}`,\n          {\n            headers: {\n              Authorization: `Bearer ${session?.user?.accessToken}`,\n            },\n          },\n        );\n        const teamMembers = await teamResponse.json();\n\n        // Fetch skills data (can return either SkillsResponse or BackendSkillResponse[])\n        const skillsData = await getSkills();\n\n        if (Array.isArray(skillsData)) {\n          // skillsData is of type BackendSkillResponse[]\n          const membersWithSkills = await Promise.all(\n            teamMembers.map(async (member: Employee) => {\n              const memberSkills =\n                skillsData.find(employee => employee.employeeInfo.email === member.email)?.skills ||\n                [];\n              return { ...member, skills: memberSkills };\n            }),\n          );\n          setTeamSkills(membersWithSkills);\n        } else if (skillsData.skills) {\n          // skillsData is of type SkillsResponse\n          const membersWithSkills = await Promise.all(\n            teamMembers.map(async (member: Employee) => {\n              const memberSkills = skillsData.skills.filter(skill => skill.email === member.email);\n              return { ...member, skills: memberSkills };\n            }),\n          );\n          setTeamSkills(membersWithSkills);\n        }\n\n        setError(null);\n      } catch (err) {\n        console.error('Error fetching skills data:', err);\n        setError('Failed to fetch skills data. Please try again later.');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    if (session?.user?.accessToken && session?.user?.name) {\n      fetchSkillsData();\n    }\n  }, [session?.user?.accessToken, session?.user?.name]);\n\n  console.log(teamSkills);\n\n  return (\n    <Card>\n      <CardContent className=\"pt-6\">\n        <h3 className=\"text-lg font-semibold\">Team Skills Breakdown</h3>\n        <p className=\"text-sm text-muted-foreground mb-4\">Detailed view of individual skills</p>\n        <ScrollArea className=\"h-[500px] w-full\">\n          {loading ? (\n            <div className=\"flex items-center justify-center h-full\">\n              <p>Loading team skills...</p>\n            </div>\n          ) : error ? (\n            <div className=\"flex items-center justify-center h-full text-red-500\">\n              <p>{error}</p>\n            </div>\n          ) : (\n            <div className=\"space-y-6 pr-4\">\n              {teamSkills.map(member => (\n                <div\n                  key={member.email}\n                  className=\"space-y-4 p-4 rounded-lg border bg-card hover:bg-accent/50 transition-colors\"\n                >\n                  <div className=\"flex items-start gap-4\">\n                    <Avatar className=\"h-12 w-12\">\n                      {member.picture ? (\n                        <AvatarImage\n                          src={member.picture}\n                          alt={`${member.firstName} ${member.lastName}`}\n                          onError={e => {\n                            const imgElement = e.target as HTMLImageElement;\n                            imgElement.style.display = 'none';\n                          }}\n                        />\n                      ) : null}\n                      <AvatarFallback className=\"uppercase bg-secondary text-secondary-foreground\">\n                        {member.firstName?.[0]}\n                        {member.lastName?.[0]}\n                      </AvatarFallback>\n                    </Avatar>\n                    <div className=\"flex-1\">\n                      <div className=\"flex justify-between items-start\">\n                        <div>\n                          <h4 className=\"text-base font-semibold\">\n                            {member.firstName} {member.lastName}\n                          </h4>\n                          <p className=\"text-sm text-muted-foreground\">\n                            {member.designation} - {member.grade}\n                          </p>\n                        </div>\n                      </div>\n                      <div className=\"mt-2 flex flex-wrap gap-2\">\n                        {member.skills\n                          .sort((a, b) => b.average - a.average)\n                          .map((skill, skillIndex) => (\n                            <Badge\n                              key={skillIndex}\n                              variant=\"outline\"\n                              className={cn(\n                                skill.gap >= 0\n                                  ? 'text-white rounded-md bg-green-500 hover:bg-green-600'\n                                  : 'text-white rounded-md bg-red-500 hover:bg-red-600',\n                              )}\n                            >\n                              {skill.skill}: {skill.average.toFixed(1)}\n                            </Badge>\n                          ))}\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              ))}\n              {teamSkills.length === 0 && (\n                <div className=\"text-center text-muted-foreground py-8\">\n                  No team skills data available\n                </div>\n              )}\n            </div>\n          )}\n        </ScrollArea>\n      </CardContent>\n    </Card>\n  );\n}\n\nEND_CODE\n\n--- FILE: dashboard/manager/ImportExportActions.tsx ---\nLANGUAGE: tsx\nBEGIN_CODE\n'use client';\n\nimport { Button } from '@/components/ui/button';\nimport { Download, Upload } from 'lucide-react';\n\nexport default function DataManagementActions() {\n  const handleExportReport = async () => {\n    // Simulate report generation\n    await new Promise(resolve => setTimeout(resolve, 2000));\n    alert('Report exported successfully!');\n  };\n\n  return (\n    <div className=\"flex justify-between items-center mb-6\">\n      <div className=\"flex space-x-2\">\n        <Button>\n          <Upload className=\"mr-2 h-4 w-4\" />\n          Import Data\n        </Button>\n        <Button onClick={handleExportReport}>\n          <Download className=\"mr-2 h-4 w-4\" />\n          Export Report\n        </Button>\n      </div>\n    </div>\n  );\n}\n\nEND_CODE\n\n--- FILE: dashboard/manager/ManagerTrainingRecommendation.tsx ---\nLANGUAGE: tsx\nBEGIN_CODE\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Progress } from '@/components/ui/progress';\nimport { ScrollArea } from '@/components/ui/scroll-area';\nimport { getTeamMembers } from '@/lib/users/employees/api';\nimport { MemberRecommendations, TeamMember } from '@/types/manager';\nimport { Loader2 } from 'lucide-react';\nimport { useSession } from 'next-auth/react';\nimport { useEffect, useState } from 'react';\n\nconst ManagerTrainingRecommendation = () => {\n  const { data: session } = useSession();\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [teamData, setTeamData] = useState<\n    Array<TeamMember & { recommendations?: MemberRecommendations }>\n  >([]);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      if (!session?.user?.name) return;\n\n      try {\n        setLoading(true);\n        // Fetch team members\n        const { data: teamResponse } = await getTeamMembers(session?.user?.name);\n\n        if (!teamResponse) {\n          throw new Error('Failed to fetch team members');\n        }\n\n        const teamMembers = await teamResponse;\n\n        // Fetch recommendations for each team member\n        const membersWithRecommendations = await Promise.all(\n          teamMembers.map(async (member: TeamMember) => {\n            try {\n              const recResponse = await fetch(\n                `/api/learning/recommendations/${encodeURIComponent(member.email || '')}`,\n              );\n              const recommendations = await recResponse.json();\n              return {\n                ...member,\n                recommendations,\n              };\n            } catch (err) {\n              console.error(`Error fetching recommendations for ${member.email}:`, err);\n              return member;\n            }\n          }),\n        );\n\n        setTeamData(membersWithRecommendations);\n        setError(null);\n      } catch (err) {\n        setError(err instanceof Error ? err.message : 'An error occurred');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n  }, [session?.user?.name, session?.user?.accessToken]);\n\n  if (loading) {\n    return (\n      <Card>\n        <CardContent className=\"flex items-center justify-center h-64\">\n          <Loader2 className=\"h-8 w-8 animate-spin\" />\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (error) {\n    return (\n      <Card>\n        <CardContent className=\"flex items-center justify-center h-64 text-red-500\">\n          {error}\n        </CardContent>\n      </Card>\n    );\n  }\n\n  const getTrainingTypeDisplay = (type: 'skillGap' | 'promotion') => {\n    return type === 'skillGap' ? 'Required Skills' : 'For Promotion';\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Training Recommendations</CardTitle>\n        <CardDescription>Personalized course recommendations based on skill gaps</CardDescription>\n      </CardHeader>\n      <CardContent>\n        <ScrollArea className=\"h-[600px]\">\n          <div className=\"space-y-8\">\n            {teamData.map(member => (\n              <div key={member.employeeId} className=\"space-y-4 pb-6 border-b last:border-b-0\">\n                <div className=\"flex items-center space-x-4\">\n                  <Avatar>\n                    {member.picture ? (\n                      <AvatarImage\n                        src={member.picture}\n                        alt={`${member.firstName} ${member.lastName}`}\n                      />\n                    ) : (\n                      <AvatarFallback>{`${member.firstName[0]}${member.lastName[0]}`}</AvatarFallback>\n                    )}\n                  </Avatar>\n                  <div>\n                    <p className=\"font-semibold\">{`${member.firstName} ${member.lastName}`}</p>\n                    <p className=\"text-sm text-muted-foreground\">{member.designation}</p>\n                  </div>\n                </div>\n\n                {member.recommendations?.recommendations?.length ? (\n                  <div className=\"space-y-4\">\n                    {member.recommendations.recommendations.map((rec, index) => (\n                      <Card key={index} className=\"p-4\">\n                        <CardTitle className=\"text-lg mb-2\">{rec.course.name}</CardTitle>\n\n                        <div className=\"grid grid-cols-2 gap-2 text-sm\">\n                          <div>\n                            <span className=\"font-semibold\">Skill:</span> {rec.skillName}\n                          </div>\n                          <div>\n                            <span className=\"font-semibold\">Provider:</span> {rec.course.provider}\n                          </div>\n                          <div>\n                            <span className=\"font-semibold\">Duration:</span> {rec.course.duration}\n                          </div>\n                          <div>\n                            <span className=\"font-semibold\">Format:</span> {rec.course.format}\n                          </div>\n                          <div>\n                            <span className=\"font-semibold\">Prerequisites:</span>{' '}\n                            {rec.course.prerequisites}\n                          </div>\n                          <div>\n                            <span className=\"font-semibold\">Training Focus:</span>{' '}\n                            {getTrainingTypeDisplay(rec.type)}\n                          </div>\n                          <div>\n                            <span className=\"font-semibold\">Current Level:</span>\n                            <Progress\n                              value={rec.currentLevel * 20}\n                              className=\"w-[60px] inline-block ml-2\"\n                            />\n                            {rec.currentLevel}\n                          </div>\n                          <div>\n                            <span className=\"font-semibold\">Target Level:</span>\n                            <Progress\n                              value={rec.targetLevel * 20}\n                              className=\"w-[60px] inline-block ml-2\"\n                            />\n                            {rec.targetLevel}\n                          </div>\n                        </div>\n                      </Card>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"ml-12 text-sm text-muted-foreground\">\n                    No training recommendations available.\n                  </div>\n                )}\n              </div>\n            ))}\n          </div>\n        </ScrollArea>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default ManagerTrainingRecommendation;\n\nEND_CODE\n\n--- FILE: dashboard/manager/TeamCompositionChart.tsx ---\nLANGUAGE: tsx\nBEGIN_CODE\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { TeamMember } from '@/types/manager';\nimport { Loader2 } from 'lucide-react';\nimport { useMemo } from 'react';\nimport {\n  Bar,\n  BarChart,\n  CartesianGrid,\n  Legend,\n  ResponsiveContainer,\n  Tooltip,\n  XAxis,\n  YAxis,\n} from 'recharts';\n\nconst COLORS = ['#8884d8', '#82ca9d', '#ffc658', '#ff7f50', '#00ced1'];\n\ninterface TeamCompositionChartProps {\n  teamMembers: TeamMember[];\n  loading?: boolean;\n}\n\nconst TeamCompositionChart = ({ teamMembers, loading = false }: TeamCompositionChartProps) => {\n  const compositionData = useMemo(() => {\n    // Manually create unique levels and designations\n    const levels = Array.from(new Set(teamMembers.map(member => member.jobLevel))).filter(\n      level => level && level.trim() !== '',\n    );\n    const designations = Array.from(new Set(teamMembers.map(member => member.designation))).filter(\n      designation => designation && designation.trim() !== '',\n    );\n\n    // Create a dynamic data structure\n    const composition = designations\n      .map(designation => {\n        const rowData: Record<string, number | string> = { skill: designation };\n        let hasNonZeroValues = false;\n\n        // Dynamically add counts for each job level\n        levels.forEach(level => {\n          const count = teamMembers.filter(\n            member => member.designation === designation && member.jobLevel === level,\n          ).length;\n\n          if (count > 0) {\n            rowData[level] = count;\n            hasNonZeroValues = true;\n          }\n        });\n\n        return hasNonZeroValues ? rowData : null;\n      })\n      .filter(Boolean);\n\n    // Filter out levels with no data\n    const filteredLevels = levels.filter(level =>\n      composition.some(row => row && row[level] !== undefined),\n    );\n\n    return { composition, levels: filteredLevels };\n  }, [teamMembers]);\n\n  const renderContent = () => {\n    if (loading) {\n      return (\n        <div className=\"flex items-center justify-center h-[400px]\">\n          <div className=\"flex flex-col items-center gap-2\">\n            <Loader2 className=\"h-8 w-8 animate-spin\" />\n            <p className=\"text-sm text-muted-foreground\">Loading team composition...</p>\n          </div>\n        </div>\n      );\n    }\n\n    if (teamMembers.length === 0 || compositionData.composition.length === 0) {\n      return (\n        <div className=\"flex items-center justify-center h-[400px] text-gray-500\">\n          No team data available\n        </div>\n      );\n    }\n\n    return (\n      <ResponsiveContainer width=\"100%\" height={400}>\n        <BarChart data={compositionData.composition}>\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis dataKey=\"skill\" />\n          <YAxis />\n          <Tooltip />\n          <Legend />\n          {compositionData.levels.map((level, index) => (\n            <Bar\n              key={level}\n              dataKey={level}\n              stackId=\"a\"\n              fill={COLORS[index % COLORS.length]}\n              name={level}\n            />\n          ))}\n        </BarChart>\n      </ResponsiveContainer>\n    );\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"font-bold mb-1\">Team Composition</CardTitle>\n        <CardDescription>Distribution of roles across experience levels</CardDescription>\n      </CardHeader>\n      <CardContent>{renderContent()}</CardContent>\n    </Card>\n  );\n};\n\nexport default TeamCompositionChart;\n\nEND_CODE\n\n--- FILE: dashboard/manager/TeamStatsCards.tsx ---\nLANGUAGE: tsx\nBEGIN_CODE\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Award, TrendingUp, Users } from 'lucide-react';\n\ninterface TeamStatsCardProps {\n  teamSize: number;\n  averagePerformance?: number;\n  skillGrowth?: number;\n}\n\nexport default function TeamStatsCard({\n  teamSize,\n  averagePerformance = 87,\n  skillGrowth = 15,\n}: TeamStatsCardProps) {\n  return (\n    <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n      {/* Team Size */}\n      <Card>\n        <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n          <CardTitle className=\"text-sm font-medium\">Team Size</CardTitle>\n          <Users className=\"h-4 w-4 text-muted-foreground\" />\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-2xl font-bold\">{teamSize}</div>\n        </CardContent>\n      </Card>\n\n      {/* Average Performance */}\n      <Card>\n        <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n          <CardTitle className=\"text-sm font-medium\">Average Performance</CardTitle>\n          <TrendingUp className=\"h-4 w-4 text-muted-foreground\" />\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-2xl font-bold\">{averagePerformance}%</div>\n        </CardContent>\n      </Card>\n\n      {/* Skill Growth */}\n      <Card>\n        <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n          <CardTitle className=\"text-sm font-medium\">Skill Growth</CardTitle>\n          <Award className=\"h-4 w-4 text-muted-foreground\" />\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-2xl font-bold\">+{skillGrowth}%</div>\n          <p className=\"text-xs text-muted-foreground\">In the last 6 months</p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nEND_CODE\n\n--- FILE: dashboard/admin/StatsCards.tsx ---\nLANGUAGE: tsx\nBEGIN_CODE\n// StatsCards.tsx\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { useEffect, useState } from 'react';\n\ninterface EmployeeStats {\n  totalEmployeesCount: number;\n  businessUnitsCount: number;\n  activeEmployeesCount: number;\n}\n\nexport default function StatsCards() {\n  const [stats, setStats] = useState<EmployeeStats>({\n    totalEmployeesCount: 0,\n    businessUnitsCount: 0,\n    activeEmployeesCount: 0,\n  });\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    const fetchEmployeeStats = async () => {\n      try {\n        const response = await fetch('/api/employees/stats');\n        if (!response.ok) {\n          throw new Error('Failed to fetch employee statistics');\n        }\n        const data = await response.json();\n        setStats(data);\n      } catch (err) {\n        setError(err instanceof Error ? err.message : 'Failed to fetch statistics');\n        console.error('Error fetching employee statistics:', err);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchEmployeeStats();\n  }, []);\n\n  if (loading) {\n    return (\n      <div className=\"grid grid-cols-3 gap-4 mb-6\">\n        {[1, 2, 3].map(i => (\n          <Card key={i}>\n            <CardHeader>\n              <div className=\"h-6 bg-gray-200 rounded animate-pulse\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-8 bg-gray-200 rounded animate-pulse\" />\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"grid grid-cols-3 gap-4 mb-6\">\n        <Card className=\"col-span-3\">\n          <CardContent className=\"flex items-center justify-center p-6 text-red-500\">\n            Error loading statistics: {error}\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"grid grid-cols-3 gap-4 mb-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"font-semibold leading-none tracking-tight\">\n            Total Employees\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <p className=\"text-3xl font-bold\">{stats.totalEmployeesCount}</p>\n        </CardContent>\n      </Card>\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"font-semibold leading-none tracking-tight\">Departments</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <p className=\"text-3xl font-bold\">{stats.businessUnitsCount}</p>\n        </CardContent>\n      </Card>\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"font-semibold leading-none tracking-tight\">\n            Active Employees\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <p className=\"text-3xl font-bold\">{stats.activeEmployeesCount}</p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nEND_CODE\n\n--- FILE: dashboard/manager/ManagerDashboard.tsx ---\nLANGUAGE: tsx\nBEGIN_CODE\n'use client';\n\nimport { useEffect, useState } from 'react';\n// import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\n// import { Progress } from \"@/components/ui/progress\"\n// import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, PieChart, Pie, Cell, LineChart, Line } from 'recharts'\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { ScrollArea } from '@/components/ui/scroll-area';\n\nimport ManagerSkillsView from '@/components/dashboard/manager/ManagerSkillsView';\nimport ManagerTrainingRecommendation from '@/components/dashboard/manager/ManagerTrainingRecommendation';\nimport TeamCompositionChart from '@/components/dashboard/manager/TeamCompositionChart';\nimport TeamMembersList from '@/components/dashboard/manager/TeamMembersList';\nimport TeamStatsCard from '@/components/dashboard/manager/TeamStatsCards';\nimport ManagerDashboardHeader from '@/components/shared/ManagerDashboardHeader';\nimport { Button } from '@/components/ui/button';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport { useAuth } from '@/lib/api/hooks';\nimport { getUserPicture } from '@/lib/users/api';\nimport { getTeamMembers } from '@/lib/users/employees/api';\nimport { TeamMember } from '@/types/manager';\n// import { ManagerData } from '@/types/manager'\n// import { dummyManagerData } from '@/lib/dummyData'\n\nconst topPerformers = [\n  { name: 'Alice Johnson', role: 'Senior QA Engineer', performanceScore: 95 },\n  { name: 'Bob Smith', role: 'QA Analyst', performanceScore: 92 },\n  { name: 'Charlie Davis', role: 'QA Engineer', performanceScore: 90 },\n  { name: 'Diana Miller', role: 'Senior QA Engineer', performanceScore: 89 },\n  { name: 'Edward Wilson', role: 'QA Analyst', performanceScore: 88 },\n];\n\nexport default function ManagerDashboard() {\n  const { user } = useAuth();\n  const [teamMembers, setTeamMembers] = useState<TeamMember[]>([]);\n  const [membersWithPictures, setMembersWithPictures] = useState<TeamMember[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [activeTab, setActiveTab] = useState('overview');\n  const [error, setError] = useState<string | null>(null);\n\n  // I suggest using hook.ts for client side or do server side rendering like skills/taxonomy/[businessUnit]\n  useEffect(() => {\n    const fetchTeamMembers = async () => {\n      try {\n        setLoading(true);\n        if (!user?.name) {\n          setError('Name is missing!');\n          throw new Error('Name is missing!');\n        }\n\n        const response = await getTeamMembers(user?.name);\n\n        if (response.error || response.data === null) {\n          throw new Error(`Error fetching team members: ${error}`);\n        }\n\n        setTeamMembers(response.data);\n        setError(null);\n      } catch (err) {\n        console.error('Error fetching team members:', err);\n        setError('Failed to fetch team members. Please try again later.');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    if (user?.name) {\n      fetchTeamMembers();\n    }\n  }, [user?.name]);\n\n  useEffect(() => {\n    const fetchUserPictures = async () => {\n      if (!teamMembers.length) return;\n\n      const updatedMembers = await Promise.all(\n        teamMembers.map(async member => {\n          if (!member.email) return member;\n          try {\n            const response = await getUserPicture(member.email);\n            if (response.error || response.data === null) {\n              throw new Error(`Error fetching team members' photos: ${error}`);\n            }\n            return { ...member, picture: response.data.picture };\n          } catch (error) {\n            console.error(`Error fetching picture for ${member.email}:`, error);\n            return member;\n          }\n        }),\n      );\n\n      setMembersWithPictures(updatedMembers);\n    };\n\n    fetchUserPictures();\n  }, [teamMembers]);\n\n  return (\n    <div className=\"container mx-auto p-4 max-w-[80%]\">\n      {/* Header */}\n      <ManagerDashboardHeader />\n\n      <Tabs value={activeTab} onValueChange={setActiveTab}>\n        <TabsList className=\"grid w-full grid-cols-5\">\n          <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n          <TabsTrigger value=\"performance\">Performance</TabsTrigger>\n          <TabsTrigger value=\"skills\">Skills</TabsTrigger>\n          <TabsTrigger value=\"training\">Training</TabsTrigger>\n          <TabsTrigger value=\"evaluation\">Evaluation</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"overview\">\n          {/* Team Stats */}\n          <TeamStatsCard teamSize={teamMembers.length} averagePerformance={87} skillGrowth={15} />\n\n          {/* Bottom Grid */}\n          <div className=\"grid gap-4 md:grid-cols-2 mt-4\">\n            {/* Team Composition */}\n            <TeamCompositionChart teamMembers={membersWithPictures} loading={loading} />\n\n            {/* Team Members List */}\n            <TeamMembersList loading={loading} error={error} members={membersWithPictures} />\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"performance\">\n          {/* Team Performance Trend Card */}\n          {/* <Card>\n            <CardContent className=\"pt-6\">\n              <h3 className=\"text-lg font-semibold\">Team Performance Trend</h3>\n              <p className=\"text-sm text-gray-500 mb-4\">\n                Average team performance over the last 6 months\n              </p>\n              <div className=\"w-full\">\n                <BarChart\n                  width={800}\n                  height={300}\n                  data={trendData}\n                  margin={{ top: 20, right: 30, left: 20, bottom: 5 }}\n                >\n                  <CartesianGrid strokeDasharray=\"3 3\" vertical={false} />\n                  <XAxis dataKey=\"month\" />\n                  <YAxis domain={[0, 100]} ticks={[0, 25, 50, 75, 100]} />\n                  <Tooltip />\n                  <Bar dataKey=\"performance\" fill=\"#8884d8\" radius={[4, 4, 0, 0]} />\n                </BarChart>\n              </div>\n            </CardContent>\n          </Card> */}\n\n          {/* Individual Performance Card */}\n          <Card className=\"mt-4\">\n            <CardContent className=\"pt-6\">\n              <h3 className=\"text-lg font-semibold\">Individual Performance</h3>\n              <p className=\"text-sm text-gray-500 mb-4\">Performance scores of team members</p>\n              <ScrollArea className=\"h-[300px] w-full\">\n                {loading ? (\n                  <div className=\"flex items-center justify-center h-full\">\n                    <p>Loading team members...</p>\n                  </div>\n                ) : error ? (\n                  <div className=\"flex items-center justify-center h-full text-red-500\">\n                    <p>{error}</p>\n                  </div>\n                ) : (\n                  <div className=\"space-y-4 pr-4\">\n                    {membersWithPictures.map(member => (\n                      <div\n                        key={member.email}\n                        className=\"flex items-center justify-between p-2 rounded-lg hover:bg-gray-50 transition-colors\"\n                      >\n                        <div className=\"flex items-center gap-3\">\n                          <Avatar className=\"h-10 w-10\">\n                            {member.picture ? (\n                              <AvatarImage\n                                src={member.picture}\n                                alt={`${member.firstName} ${member.lastName}`}\n                                width={40}\n                                height={40}\n                                onError={e => {\n                                  const imgElement = e.target as HTMLImageElement;\n                                  imgElement.style.display = 'none';\n                                }}\n                              />\n                            ) : null}\n                            <AvatarFallback className=\"uppercase bg-gray-100 text-gray-600\">\n                              {member.firstName?.[0]}\n                              {member.lastName?.[0]}\n                            </AvatarFallback>\n                          </Avatar>\n                          <div>\n                            <p className=\"font-medium\">\n                              {member.firstName} {member.lastName}\n                            </p>\n                            <p className=\"text-sm text-gray-500\">{`${member.jobLevel} ${member.designation}`}</p>\n                          </div>\n                        </div>\n                        <div className=\"flex items-center gap-4\">\n                          <div className=\"w-48 h-2 bg-gray-100 rounded-full overflow-hidden\">\n                            <div\n                              className=\"h-full bg-black rounded-full\"\n                              style={{ width: `90%` }}\n                            />\n                          </div>\n                          <span className=\"font-medium w-12 text-right\">90%</span>\n                        </div>\n                      </div>\n                    ))}\n                    {teamMembers.length === 0 && (\n                      <div className=\"text-center text-gray-500\">No team members found</div>\n                    )}\n                  </div>\n                )}\n              </ScrollArea>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"skills\">\n          {/* Team Performance Trend Card */}\n          {/* <Card>\n            <CardContent className=\"pt-6\">\n              <h3 className=\"text-lg font-semibold\">Team Performance Trend</h3>\n              <p className=\"text-sm text-gray-500 mb-4\">\n                Average team performance over the last 6 months\n              </p>\n              <div className=\"w-full\">\n                <BarChart\n                  width={800}\n                  height={300}\n                  data={trendData}\n                  margin={{ top: 20, right: 30, left: 20, bottom: 5 }}\n                >\n                  <CartesianGrid strokeDasharray=\"3 3\" vertical={false} />\n                  <XAxis dataKey=\"month\" />\n                  <YAxis domain={[0, 100]} ticks={[0, 25, 50, 75, 100]} />\n                  <Tooltip />\n                  <Bar dataKey=\"performance\" fill=\"#8884d8\" radius={[4, 4, 0, 0]} />\n                </BarChart>\n              </div>\n            </CardContent>\n          </Card> */}\n\n          {/* Individual Performance Card */}\n          <ManagerSkillsView />\n        </TabsContent>\n\n        <TabsContent value=\"training\">\n          {' '}\n          <ManagerTrainingRecommendation />\n        </TabsContent>\n        <TabsContent value=\"evaluation\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Team Evaluation</CardTitle>\n              <CardDescription>\n                Conduct performance evaluations for your team members\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <p className=\"mb-4\">Select a team member to start their performance evaluation:</p>\n              <Select>\n                <SelectTrigger className=\"w-[280px]\">\n                  <SelectValue placeholder=\"Select team member\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {topPerformers.map((member, index) => (\n                    <SelectItem key={index} value={member.name.toLowerCase().replace(' ', '-')}>\n                      {member.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n              <div className=\"mt-6\">\n                <h3 className=\"text-lg font-semibold mb-2\">Evaluation Criteria</h3>\n                <div className=\"space-y-4\">\n                  {[\n                    'Technical Skills',\n                    'Communication',\n                    'Teamwork',\n                    'Problem Solving',\n                    'Initiative',\n                  ].map((criteria, index) => (\n                    <div key={index} className=\"flex items-center justify-between\">\n                      <span>{criteria}</span>\n                      <Select>\n                        <SelectTrigger className=\"w-[180px]\">\n                          <SelectValue placeholder=\"Select rating\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {[1, 2, 3, 4, 5].map(rating => (\n                            <SelectItem key={rating} value={rating.toString()}>\n                              {rating} -{' '}\n                              {rating === 1\n                                ? 'Poor'\n                                : rating === 2\n                                  ? 'Fair'\n                                  : rating === 3\n                                    ? 'Good'\n                                    : rating === 4\n                                      ? 'Very Good'\n                                      : 'Excellent'}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    </div>\n                  ))}\n                </div>\n              </div>\n              <div className=\"mt-6\">\n                <h3 className=\"text-lg font-semibold mb-2\">Comments</h3>\n                <textarea\n                  className=\"w-full h-32 p-2 border rounded-md\"\n                  placeholder=\"Enter your comments here...\"\n                ></textarea>\n              </div>\n              <Button className=\"mt-4\">Submit Evaluation</Button>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n\nEND_CODE\n\n--- FILE: dashboard/admin/SkillGapOverview.tsx ---\nLANGUAGE: tsx\nBEGIN_CODE\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Progress } from '@/components/ui/progress';\nimport { Loader2 } from 'lucide-react';\nimport { useEffect, useState } from 'react';\n\ninterface SkillGap {\n  name: string;\n  currentLevel: number;\n  requiredLevel: number;\n  gap: number;\n}\n\nexport default function SkillGapOverview() {\n  const [skillGaps, setSkillGaps] = useState<SkillGap[]>([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const fetchSkillAnalytics = async () => {\n      setLoading(true);\n      try {\n        const response = await fetch('/api/skills/analytics');\n        if (!response.ok) {\n          throw new Error('Failed to fetch skill analytics');\n        }\n        const data = await response.json();\n        setSkillGaps(data.skillGaps);\n      } catch (err) {\n        console.error('Error fetching skill analytics:', err);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchSkillAnalytics();\n  }, []);\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"font-semibold leading-none tracking-tight\">\n          Skill Gap Overview\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        {loading ? (\n          <div className=\"h-[350px] flex items-center justify-center\">\n            <div className=\"flex flex-col items-center gap-2\">\n              <Loader2 className=\"h-8 w-8 animate-spin\" />\n              <p className=\"text-sm text-muted-foreground\">Loading skill gaps...</p>\n            </div>\n          </div>\n        ) : (\n          <div className=\"space-y-4\">\n            {skillGaps.map(skill => (\n              <div key={skill.name} className=\"space-y-1\">\n                <div className=\"flex justify-between text-sm\">\n                  <span>{skill.name}</span>\n                  <span>{skill.gap.toFixed(1)}</span>\n                </div>\n                <Progress\n                  value={(skill.currentLevel / skill.requiredLevel) * 100}\n                  className=\"h-2\"\n                />\n              </div>\n            ))}\n            {skillGaps.length === 0 && (\n              <div className=\"text-center text-gray-500 py-4\">No skill gaps identified</div>\n            )}\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n\nEND_CODE\n\n--- FILE: dashboard/admin/AdminDashboard.tsx ---\nLANGUAGE: tsx\nBEGIN_CODE\n'use client';\n\nimport AnalysisView from '@/components/dashboard/admin/AnalysisView';\nimport BusinessUnitDistribution from '@/components/dashboard/admin/BusinessUnitDistribution';\nimport { LearningManagement } from '@/components/dashboard/admin/learning/LearningManagement';\nimport SearchAndFilter from '@/components/dashboard/admin/SearchAndFilter';\nimport SkillGapOverview from '@/components/dashboard/admin/SkillGapOverview';\nimport StatsCards from '@/components/dashboard/admin/StatsCards';\nimport TopPerformers from '@/components/dashboard/admin/TopPerformers';\nimport EmployeeDirectory from '@/components/dashboard/admin/UserDirectory';\nimport ErrorCard from '@/components/error/ErrorCard';\nimport AdminDashboardHeader from '@/components/shared/AdminDashboardHeader';\nimport TSCManager from '@/components/TSC/TSCManager';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { useQueryTechnicalTaxonomy } from '@/lib/skills/api';\nimport { Employee } from '@/types/admin';\nimport { Award, BarChart2, BookOpen, Loader2, Network, Users } from 'lucide-react';\nimport { useEffect, useState } from 'react';\n\nexport default function AdminDashboard() {\n  const [employees, setEmployees] = useState<Employee[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [selectedBusinessUnit, setSelectedBusinessUnit] = useState('All Business Units');\n  const [page, setPage] = useState(1);\n  const [limit, setLimit] = useState(10);\n  const [totalItems, setTotalItems] = useState(0);\n  const [totalPages, setTotalPages] = useState(0);\n  const [debouncedSearchQuery, setDebouncedSearchQuery] = useState('');\n  const [businessUnits, setBusinessUnits] = useState<string[]>([]);\n  const [businessUnitsLoading, setBusinessUnitsLoading] = useState(true);\n  const { data: QA_Tsc, isLoading, error: queryError, refetch } = useQueryTechnicalTaxonomy('QA');\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setDebouncedSearchQuery(searchQuery);\n    }, 800);\n\n    return () => clearTimeout(timer);\n  }, [searchQuery]);\n\n  useEffect(() => {\n    const fetchBusinessUnits = async () => {\n      setBusinessUnitsLoading(true);\n      try {\n        const response = await fetch('/api/employees/business-units');\n        if (!response.ok) {\n          throw new Error('Failed to fetch business units');\n        }\n        const data = await response.json();\n        console.log('Business units call: ', data, ' | Business units:', businessUnits);\n        setBusinessUnits(['All Business Units', ...data.businessUnits]);\n      } catch (err) {\n        setError(err instanceof Error ? err.message : 'Failed to fetch business units');\n      } finally {\n        setBusinessUnitsLoading(false);\n      }\n    };\n\n    fetchBusinessUnits();\n  }, []);\n\n  useEffect(() => {\n    const fetchEmployees = async () => {\n      setLoading(true);\n      try {\n        const searchParams = new URLSearchParams({\n          page: page.toString(),\n          limit: limit.toString(),\n          ...(debouncedSearchQuery && { searchTerm: debouncedSearchQuery }),\n          ...(selectedBusinessUnit !== 'All Business Units' && {\n            businessUnit: selectedBusinessUnit,\n          }),\n        });\n\n        const endpoint =\n          debouncedSearchQuery || selectedBusinessUnit !== 'All Business Units'\n            ? '/api/employees/search'\n            : '/api/employees';\n\n        const response = await fetch(`${endpoint}?${searchParams}`);\n\n        if (!response.ok) {\n          throw new Error('Failed to fetch employees');\n        }\n\n        const data = await response.json();\n        setEmployees(data.items);\n        setTotalItems(data.total);\n        setTotalPages(data.totalPages);\n        setError(null);\n      } catch (err) {\n        setError(err instanceof Error ? err.message : `An error occurred ${error}`);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchEmployees();\n  }, [debouncedSearchQuery, page, limit, selectedBusinessUnit]);\n\n  const handleSearch = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setSearchQuery(e.target.value);\n    setPage(1);\n  };\n\n  const handleBusinessUnitChange = (unit: string) => {\n    setSelectedBusinessUnit(unit);\n    setPage(1);\n  };\n\n  const handlePageChange = (newPage: number) => {\n    setPage(newPage);\n  };\n\n  const handleLimitChange = (newLimit: string) => {\n    if (newLimit === 'all') {\n      setLimit(totalItems);\n    } else {\n      setLimit(Number(newLimit));\n    }\n    setPage(1);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <AdminDashboardHeader />\n\n      <main className=\"max-w-7xl mx-auto px-4 py-8\">\n        {/* Search and Filter */}\n        <SearchAndFilter\n          selectedBusinessUnit={selectedBusinessUnit}\n          businessUnits={businessUnits}\n          searchQuery={searchQuery}\n          onBusinessUnitChange={handleBusinessUnitChange}\n          onSearchChange={handleSearch}\n          isLoading={loading || businessUnitsLoading}\n        />\n\n        {/* Stats Cards */}\n        <StatsCards />\n\n        <div className=\"grid grid-cols-3 gap-4 mb-6\">\n          {/* Top Performers */}\n          <TopPerformers />\n\n          {/* Skill Gap Overview */}\n          <SkillGapOverview />\n\n          {/* Department Distribution */}\n          <BusinessUnitDistribution />\n        </div>\n\n        {/* Tabs Structure */}\n        <Tabs defaultValue=\"users\" className=\"space-y-4\">\n          <TabsList>\n            <TabsTrigger value=\"users\" className=\"flex items-center gap-2\">\n              <Users className=\"h-4 w-4\" />\n              Users\n            </TabsTrigger>\n            <TabsTrigger value=\"skills\" className=\"flex items-center gap-2\">\n              <BookOpen className=\"h-4 w-4\" />\n              Skills\n            </TabsTrigger>\n            <TabsTrigger value=\"required-skills\" className=\"flex items-center gap-2\">\n              <Award className=\"h-4 w-4\" />\n              Required Skills\n            </TabsTrigger>\n            <TabsTrigger value=\"organization\" className=\"flex items-center gap-2\">\n              <Network className=\"h-4 w-4\" />\n              Organization\n            </TabsTrigger>\n            <TabsTrigger value=\"metrics\" className=\"flex items-center gap-2\">\n              <BarChart2 className=\"h-4 w-4\" />\n              Metrics\n            </TabsTrigger>\n            <TabsTrigger value=\"learning\" className=\"flex items-center gap-2\">\n              <BookOpen className=\"h-4 w-4\" />\n              Learning\n            </TabsTrigger>\n            <TabsTrigger value=\"taxonomy\" className=\"flex iutems-center gap-2\">\n              <BookOpen className=\"h-4 w-4\" />\n              Taxonomy\n            </TabsTrigger>\n          </TabsList>\n\n          {/* Users Directory */}\n          <TabsContent value=\"users\">\n            <EmployeeDirectory\n              employees={employees}\n              loading={loading}\n              totalItems={totalItems}\n              totalPages={totalPages}\n              page={page}\n              limit={limit}\n              onPageChange={handlePageChange}\n              onLimitChange={handleLimitChange}\n            />\n          </TabsContent>\n\n          {/* Metrics */}\n          <TabsContent value=\"metrics\">\n            <AnalysisView />\n          </TabsContent>\n          <TabsContent value=\"taxonomy\">\n            {queryError ? (\n              <ErrorCard\n                cardTitle=\"TSC Manager\"\n                status={queryError.status}\n                message={queryError.message}\n                error_code={queryError.code}\n                refetch={refetch}\n              />\n            ) : !isLoading && QA_Tsc ? (\n              <TSCManager\n                selectedBusinessUnit={selectedBusinessUnit}\n                data={QA_Tsc}\n                searchQuery={debouncedSearchQuery}\n              />\n            ) : (\n              <div className=\"h-[350px] flex items-center justify-center\">\n                <div className=\"flex flex-col items-center gap-2\">\n                  <Loader2 className=\"h-8 w-8 animate-spin\" />\n                  <p className=\"text-sm text-muted-foreground\">Loading taxonomy...</p>\n                </div>\n              </div>\n            )}\n          </TabsContent>\n          {/* Learning */}\n          <TabsContent value=\"learning\">\n            <LearningManagement />\n          </TabsContent>\n        </Tabs>\n      </main>\n    </div>\n  );\n}\n\nEND_CODE\n\n--- FILE: dashboard/admin/TopPerformers.tsx ---\nLANGUAGE: tsx\nBEGIN_CODE\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { ScrollArea } from '@/components/ui/scroll-area';\nimport { cn } from '@/lib/utils';\nimport { TopPerformer, TopPerformersResponse } from '@/types/admin';\nimport { Loader2 } from 'lucide-react';\nimport { useEffect, useState } from 'react';\n\nexport default function TopPerformers() {\n  const [topPerformers, setTopPerformers] = useState<TopPerformer[]>([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const fetchTopPerformers = async () => {\n      setLoading(true);\n      try {\n        const response = await fetch('/api/skills/rankings');\n        if (!response.ok) throw new Error('Failed to fetch top performers');\n        const data: TopPerformersResponse = await response.json();\n        setTopPerformers(data.rankings.slice(0, 10));\n      } catch (error) {\n        console.error('Error fetching top performers:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchTopPerformers();\n  }, []);\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"font-semibold leading-none tracking-tight\">Top Performers</CardTitle>\n      </CardHeader>\n      <CardContent>\n        {loading ? (\n          <div className=\"h-[350px] flex items-center justify-center\">\n            <div className=\"flex flex-col items-center gap-2\">\n              <Loader2 className=\"h-8 w-8 animate-spin\" />\n              <p className=\"text-sm text-muted-foreground\">Loading top performers...</p>\n            </div>\n          </div>\n        ) : (\n          <>\n            <div className=\"bg-muted/50 rounded-t-lg\">\n              <div className=\"grid grid-cols-12 px-4 py-2 text-sm font-medium text-muted-foreground\">\n                <div className=\"col-span-2\">Rank</div>\n                <div className=\"col-span-8\">Employee Name</div>\n                <div className=\"col-span-2 text-right\">Score</div>\n              </div>\n            </div>\n\n            <ScrollArea className=\"h-[350px]\">\n              <div className=\"divide-y\">\n                {topPerformers.map(performer => (\n                  <div\n                    key={performer.ranking}\n                    className={cn(\n                      'grid grid-cols-12 px-4 py-3 items-center transition-colors hover:bg-muted/50',\n                      performer.ranking <= 5 && 'bg-muted/20',\n                    )}\n                  >\n                    <div className=\"col-span-2 flex items-center gap-2\">\n                      <span className=\"font-medium\">{performer.ranking}</span>\n                    </div>\n                    <div className=\"col-span-8\">{performer.name}</div>\n                    <div className=\"col-span-2 text-right\">{performer.score}</div>\n                  </div>\n                ))}\n              </div>\n            </ScrollArea>\n          </>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n\nEND_CODE\n\n--- FILE: dashboard/admin/learning/PathProgressTracking.tsx ---\nLANGUAGE: tsx\nBEGIN_CODE\n'use client';\n\nimport { Badge } from '@/components/ui/badge';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Progress } from '@/components/ui/progress';\n\nconst PROGRESS_DATA = [\n  {\n    path: 'QA Foundation Path',\n    activeUsers: 15,\n    completion: 75,\n    certifications: 10,\n  },\n  {\n    path: 'QA Professional Path',\n    activeUsers: 12,\n    completion: 60,\n    certifications: 8,\n  },\n];\n\nexport function PathProgressTracking() {\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Path Progress Tracking</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-4\">\n          {PROGRESS_DATA.map((progress, index) => (\n            <div key={index} className=\"space-y-2\">\n              <div className=\"flex justify-between items-center\">\n                <span className=\"font-medium\">{progress.path}</span>\n                <Badge variant=\"outline\">{progress.activeUsers} users</Badge>\n              </div>\n              <div className=\"space-y-1\">\n                <div className=\"flex justify-between text-sm\">\n                  <span>Completion Rate</span>\n                  <span>{progress.completion}%</span>\n                </div>\n                <Progress value={progress.completion} className=\"h-2\" />\n              </div>\n              <div className=\"flex justify-between text-sm\">\n                <span>Certifications Achieved</span>\n                <Badge variant=\"secondary\">{progress.certifications}</Badge>\n              </div>\n            </div>\n          ))}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\nEND_CODE\n\n--- FILE: dashboard/admin/learning/LearningManagement.tsx ---\nLANGUAGE: tsx\nBEGIN_CODE\n// src/app/dashboard/admin/components/LearningManagement.tsx\nimport { CareerProgressionPaths } from '@/components/dashboard/admin/learning/CareerProgressionPaths';\nimport { LearningResources } from '@/components/dashboard/admin/learning/LearningResources';\nimport { PathProgressTracking } from '@/components/dashboard/admin/learning/PathProgressTracking';\nimport { ResourceManagement } from '@/components/dashboard/admin/learning/ResourceManagement';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\n\nexport function LearningManagement() {\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Learning Management</CardTitle>\n        <CardDescription>Manage career paths and learning resources</CardDescription>\n      </CardHeader>\n      <CardContent>\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4\">\n          <CareerProgressionPaths />\n          <LearningResources />\n          <PathProgressTracking />\n          <ResourceManagement />\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\nEND_CODE\n\n--- FILE: dashboard/admin/learning/LearningResources.tsx ---\nLANGUAGE: tsx\nBEGIN_CODE\n'use client';\n\nimport { Badge } from '@/components/ui/badge';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { ScrollArea } from '@/components/ui/scroll-area';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport { getLearningResources } from '@/lib/api';\nimport { Course } from '@/types/admin';\nimport { useEffect, useState } from 'react';\n\nexport function LearningResources() {\n  const [resources, setResources] = useState<Course[]>([]);\n  const [selectedCategory, setSelectedCategory] = useState<string>('all');\n  const [selectedLevel, setSelectedLevel] = useState<string>('all');\n  const [loading, setLoading] = useState<boolean>(true);\n\n  useEffect(() => {\n    async function fetchResources() {\n      try {\n        setLoading(true);\n        const params = {\n          category: selectedCategory !== 'all' ? selectedCategory : undefined,\n          level: selectedLevel !== 'all' ? selectedLevel : undefined,\n        };\n\n        const data = await getLearningResources(params);\n        setResources(data);\n      } catch (error) {\n        console.error('Error fetching resources:', error);\n      } finally {\n        setLoading(false);\n      }\n    }\n\n    fetchResources();\n  }, [selectedCategory, selectedLevel]);\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Learning Resources</CardTitle>\n        <div className=\"flex items-center space-x-2\">\n          <Select value={selectedCategory} onValueChange={setSelectedCategory}>\n            <SelectTrigger className=\"w-[180px]\">\n              <SelectValue placeholder=\"Filter by Category\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">All Categories</SelectItem>\n              <SelectItem value=\"Technical\">Technical</SelectItem>\n              <SelectItem value=\"Process\">Process</SelectItem>\n              <SelectItem value=\"Leadership\">Leadership</SelectItem>\n              <SelectItem value=\"Management\">Management</SelectItem>\n              <SelectItem value=\"Business\">Business</SelectItem>\n              <SelectItem value=\"Governance\">Governance</SelectItem>\n              <SelectItem value=\"Innovation\">Innovation</SelectItem>\n              <SelectItem value=\"Operations\">Operations</SelectItem>\n              <SelectItem value=\"Strategy\">Strategy</SelectItem>\n            </SelectContent>\n          </Select>\n          <Select value={selectedLevel} onValueChange={setSelectedLevel}>\n            <SelectTrigger className=\"w-[180px]\">\n              <SelectValue placeholder=\"Filter by Level\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">All Levels</SelectItem>\n              <SelectItem value=\"2\">Level 2</SelectItem>\n              <SelectItem value=\"3\">Level 3</SelectItem>\n              <SelectItem value=\"4\">Level 4</SelectItem>\n              <SelectItem value=\"5\">Level 5</SelectItem>\n              <SelectItem value=\"6\">Level 6</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n      </CardHeader>\n      <CardContent>\n        <ScrollArea className=\"h-[600px] w-full rounded-md\">\n          <div className=\"space-y-4 p-4\">\n            {loading ? (\n              <div className=\"text-center py-4\">Loading...</div>\n            ) : resources.length === 0 ? (\n              <div className=\"text-center py-4\">No resources found</div>\n            ) : (\n              resources.map(resource => (\n                <div key={resource._id} className=\"border rounded-lg p-4\">\n                  <div className=\"flex justify-between items-start mb-2\">\n                    <div>\n                      <h4 className=\"font-medium\">\n                        {resource.fields.find(f => f.name === 'courseName')?.value}\n                      </h4>\n                      <p className=\"text-sm text-gray-500\">\n                        {resource.fields.find(f => f.name === 'provider')?.value}\n                      </p>\n                    </div>\n                    <Badge>{resource.skillCategory}</Badge>\n                  </div>\n                  <div className=\"grid grid-cols-2 gap-2 text-sm\">\n                    <div>\n                      <span className=\"text-gray-500\">Duration:</span>{' '}\n                      {resource.fields.find(f => f.name === 'duration')?.value}\n                    </div>\n                    <div>\n                      <span className=\"text-gray-500\">Format:</span>{' '}\n                      {resource.fields.find(f => f.name === 'format')?.value}\n                    </div>\n                    <div>\n                      <span className=\"text-gray-500\">Level:</span> {resource.requiredLevel}\n                    </div>\n                    <div>\n                      <span className=\"text-gray-500\">Certification:</span>{' '}\n                      {resource.fields.find(f => f.name === 'certificationOption')?.value || 'None'}\n                    </div>\n                  </div>\n                </div>\n              ))\n            )}\n          </div>\n        </ScrollArea>\n      </CardContent>\n    </Card>\n  );\n}\n\nEND_CODE\n\n--- FILE: dashboard/admin/learning/CareerProgressionPaths.tsx ---\nLANGUAGE: tsx\nBEGIN_CODE\n// src/components/dashboard/admin/CareerProgressionPaths.tsx\n'use client';\n\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from '@/components/ui/dialog';\nimport { Label } from '@/components/ui/label';\n\nconst CAREER_PATHS = [\n  {\n    pathId: 'PATH001',\n    name: 'QA Foundation Path',\n    level: 'Professional I',\n    target: 2,\n    courses: 3,\n    duration: '6 months',\n    commitment: '5-10 hours',\n  },\n  {\n    pathId: 'PATH002',\n    name: 'QA Professional Path',\n    level: 'Professional II',\n    target: 3,\n    courses: 3,\n    duration: '9 months',\n    commitment: '8-12 hours',\n  },\n];\n\nexport function CareerProgressionPaths() {\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Career Progression Paths</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-4\">\n          {CAREER_PATHS.map(path => (\n            <div key={path.pathId} className=\"border rounded-lg p-4\">\n              <div className=\"flex justify-between items-start mb-2\">\n                <div>\n                  <h4 className=\"font-medium\">{path.name}</h4>\n                  <p className=\"text-sm text-gray-500\">{path.level}</p>\n                </div>\n                <Dialog>\n                  <DialogTrigger asChild>\n                    <Button variant=\"outline\" size=\"sm\">\n                      View Details\n                    </Button>\n                  </DialogTrigger>\n                  <DialogContent>\n                    <DialogHeader>\n                      <DialogTitle>{path.name}</DialogTitle>\n                      <DialogDescription>Career path details and courses</DialogDescription>\n                    </DialogHeader>\n                    <div className=\"space-y-4\">\n                      <div className=\"grid grid-cols-2 gap-4\">\n                        <div>\n                          <Label>Target Level</Label>\n                          <p className=\"text-sm mt-1\">Level {path.target}</p>\n                        </div>\n                        <div>\n                          <Label>Duration</Label>\n                          <p className=\"text-sm mt-1\">{path.duration}</p>\n                        </div>\n                        <div>\n                          <Label>Weekly Commitment</Label>\n                          <p className=\"text-sm mt-1\">{path.commitment}</p>\n                        </div>\n                        <div>\n                          <Label>Number of Courses</Label>\n                          <p className=\"text-sm mt-1\">{path.courses} courses</p>\n                        </div>\n                      </div>\n                      <div>\n                        <Label>Prerequisites</Label>\n                        <p className=\"text-sm mt-1\">Complete previous path + required experience</p>\n                      </div>\n                    </div>\n                  </DialogContent>\n                </Dialog>\n              </div>\n              <div className=\"space-y-2\">\n                <div className=\"flex justify-between text-sm\">\n                  <span>Target Level</span>\n                  <Badge variant=\"secondary\">Level {path.target}</Badge>\n                </div>\n                <div className=\"flex justify-between text-sm\">\n                  <span>Duration</span>\n                  <span>{path.duration}</span>\n                </div>\n                <div className=\"flex justify-between text-sm\">\n                  <span>Commitment</span>\n                  <span>{path.commitment}/week</span>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\nEND_CODE\n\n--- FILE: dashboard/admin/learning/ResourceManagement.tsx ---\nLANGUAGE: tsx\nBEGIN_CODE\n'use client';\n\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { ScrollArea } from '@/components/ui/scroll-area';\nimport { getResourceManagement } from '@/lib/api';\nimport { Course } from '@/types/admin';\nimport { useEffect, useState } from 'react';\n\ninterface ResourceStats {\n  resources: Course[];\n  totalCount: number;\n}\n\nexport function ResourceManagement() {\n  const [resourceStats, setResourceStats] = useState<ResourceStats | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    async function fetchResourceStats() {\n      try {\n        setLoading(true);\n        const data = await getResourceManagement();\n        setResourceStats(data);\n      } catch (error) {\n        console.error('Error fetching resource stats:', error);\n      } finally {\n        setLoading(false);\n      }\n    }\n\n    fetchResourceStats();\n  }, []);\n\n  const categories = resourceStats?.resources\n    ? Array.from(new Set(resourceStats.resources.map(r => r.skillCategory))).sort()\n    : [];\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Resource Management</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-4\">\n          <div className=\"flex justify-end space-x-2\">\n            <Button variant=\"outline\" size=\"sm\">\n              Add Resource\n            </Button>\n            <Button variant=\"outline\" size=\"sm\">\n              Import\n            </Button>\n            <Button variant=\"outline\" size=\"sm\">\n              Export\n            </Button>\n          </div>\n          <ScrollArea className=\"h-[600px]\">\n            <div className=\"space-y-4 pr-4\">\n              {loading ? (\n                <div className=\"text-center py-4\">Loading...</div>\n              ) : !resourceStats?.resources.length ? (\n                <div className=\"text-center py-4\">No resources found</div>\n              ) : (\n                categories.map(category => {\n                  const totalResources =\n                    resourceStats?.resources.filter(r => r.skillCategory === category).length || 0;\n\n                  const activeCourses =\n                    resourceStats?.resources.filter(\n                      r =>\n                        r.skillCategory === category &&\n                        r.fields.some(f => f.name === 'status' && f.value === 'active'),\n                    ).length || 0;\n\n                  return (\n                    <div key={category} className=\"border rounded-lg p-4\">\n                      <h4 className=\"font-medium mb-2\">{category}</h4>\n                      <div className=\"space-y-2\">\n                        <div className=\"flex justify-between text-sm\">\n                          <span>Total Resources</span>\n                          <Badge>{totalResources}</Badge>\n                        </div>\n                        <div className=\"flex justify-between text-sm\">\n                          <span>Active Courses</span>\n                          <Badge variant=\"secondary\">{activeCourses}</Badge>\n                        </div>\n                        <Button variant=\"ghost\" size=\"sm\" className=\"w-full mt-2\">\n                          Manage Resources\n                        </Button>\n                      </div>\n                    </div>\n                  );\n                })\n              )}\n            </div>\n          </ScrollArea>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\nEND_CODE\n\n--- FILE: dashboard/admin/BusinessUnitDistribution.tsx ---\nLANGUAGE: tsx\nBEGIN_CODE\nimport { Badge } from '@/components/ui/badge';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Loader2 } from 'lucide-react';\nimport { useEffect, useState } from 'react';\n\ninterface BusinessUnitStat {\n  name: string;\n  count: number;\n}\n\nexport default function BusinessUnitDistribution() {\n  const [businessUnitStats, setBusinessUnitStats] = useState<BusinessUnitStat[]>([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const fetchBusinessUnits = async () => {\n      setLoading(true);\n      try {\n        const response = await fetch('/api/employees/business-units');\n        if (!response.ok) {\n          throw new Error('Failed to fetch business units');\n        }\n        const data = await response.json();\n        setBusinessUnitStats(data.distribution);\n      } catch (err) {\n        console.error('Error fetching business units:', err);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchBusinessUnits();\n  }, []);\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"font-semibold leading-none tracking-tight\">\n          Business Unit Distribution\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        {loading ? (\n          <div className=\"h-[350px] flex items-center justify-center\">\n            <div className=\"flex flex-col items-center gap-2\">\n              <Loader2 className=\"h-8 w-8 animate-spin\" />\n              <p className=\"text-sm text-muted-foreground\">Loading business units...</p>\n            </div>\n          </div>\n        ) : (\n          <div className=\"space-y-2\">\n            {businessUnitStats.map(bu => (\n              <div key={bu.name} className=\"flex justify-between items-center\">\n                <span>{bu.name}</span>\n                <Badge>{bu.count}</Badge>\n              </div>\n            ))}\n            {businessUnitStats.length === 0 && (\n              <div className=\"text-center text-gray-500 py-4\">No business unit data available</div>\n            )}\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n\nEND_CODE\n\n--- FILE: dashboard/admin/UserDirectory.tsx ---\nLANGUAGE: tsx\nBEGIN_CODE\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from '@/components/ui/dialog';\nimport { Input } from '@/components/ui/input';\nimport { Progress } from '@/components/ui/progress';\nimport { ScrollArea } from '@/components/ui/scroll-area';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport { Employee, SkillDetail } from '@/types/admin';\nimport {\n  AlertTriangle,\n  CheckCircle2,\n  ChevronLeft,\n  ChevronRight,\n  ChevronsLeft,\n  ChevronsRight,\n  Loader2,\n  XCircle,\n} from 'lucide-react';\nimport { useState } from 'react';\n\ninterface EmployeeDirectoryProps {\n  employees: Employee[];\n  loading: boolean;\n  totalItems: number;\n  totalPages: number;\n  page: number;\n  limit: number;\n  onPageChange: (page: number) => void;\n  onLimitChange: (limit: string) => void;\n}\n\nexport default function EmployeeDirectory({\n  employees,\n  loading,\n  totalItems,\n  totalPages,\n  page,\n  limit,\n  onPageChange,\n  onLimitChange,\n}: EmployeeDirectoryProps) {\n  const [selectedEmployeeSkills, setSelectedEmployeeSkills] = useState<SkillDetail[]>([]);\n  const [skillsLoading, setSkillsLoading] = useState(false);\n  const [goToPage, setGoToPage] = useState<string>('');\n\n  const fetchEmployeeSkills = async (email: string) => {\n    try {\n      setSkillsLoading(true);\n      const response = await fetch(`/api/skills/employee/${email}`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch employee skills');\n      }\n      const data = await response.json();\n\n      // Fetch descriptions for each skill using taxonomy find by title\n      const skillsWithDescriptions = await Promise.all(\n        data.skills.map(async (skill: SkillDetail) => {\n          try {\n            const taxonomyResponse = await fetch(\n              `/api/taxonomy/technical/title/${skill.skill}?businessUnit=QA`,\n            );\n\n            if (!taxonomyResponse.ok) {\n              console.warn(`No taxonomy found for skill: ${skill.skill}`);\n              return {\n                ...skill,\n                description: 'No description available',\n                proficiencyDescription: 'No proficiency description available',\n              };\n            }\n\n            const taxonomyData = await taxonomyResponse.json();\n\n            // Use Math.floor to get the exact level key\n            const levelKey = `Level ${Math.floor(skill.average)}`;\n            const proficiencyDescription =\n              taxonomyData[0]?.proficiencyDescription?.[levelKey]?.[1] ||\n              'No proficiency description available';\n\n            return {\n              ...skill,\n              description:\n                taxonomyData.length > 0 ? taxonomyData[0].description : 'No description available',\n              proficiencyDescription,\n            };\n          } catch (error) {\n            console.error(`Error fetching description for ${skill.skill}:`, error);\n            return {\n              ...skill,\n              description: 'No description available',\n              proficiencyDescription: 'No proficiency description available',\n            };\n          }\n        }),\n      );\n\n      setSelectedEmployeeSkills(skillsWithDescriptions);\n      setSkillsLoading(false);\n    } catch (error) {\n      console.error('Error fetching employee skills:', error);\n      setSelectedEmployeeSkills([]);\n      setSkillsLoading(false);\n    }\n  };\n\n  const getSkillLevelLabel = (average: number) => {\n    if (average <= 1) return 'Novice';\n    if (average <= 2) return 'Beginner';\n    if (average <= 3) return 'Intermediate';\n    if (average <= 4) return 'Advanced';\n    if (average <= 5) return 'Expert';\n    return 'Guru';\n  };\n\n  const getSkillStatusIcon = (currentLevel: number, requiredLevel: number) => {\n    if (currentLevel >= requiredLevel) {\n      return <CheckCircle2 className=\"h-5 w-5 text-green-500\" />;\n    } else if (currentLevel === requiredLevel - 1) {\n      return <AlertTriangle className=\"h-5 w-5 text-yellow-500\" />;\n    }\n    return <XCircle className=\"h-5 w-5 text-red-500\" />;\n  };\n\n  const handleGoToPage = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (e.key === 'Enter') {\n      const pageNumber = parseInt(goToPage);\n      if (!isNaN(pageNumber) && pageNumber >= 1 && pageNumber <= totalPages) {\n        onPageChange(pageNumber);\n        setGoToPage('');\n      } else {\n        alert(`Please enter a valid page number between 1 and ${totalPages}`);\n      }\n    }\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <CardTitle>User Directory</CardTitle>\n            <CardDescription>View and manage users and their skills</CardDescription>\n          </div>\n        </div>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-4\">\n          {loading ? (\n            <div className=\"flex flex-col items-center gap-2\">\n              <Loader2 className=\"h-8 w-8 animate-spin\" />\n              <p className=\"text-sm text-muted-foreground\">Loading employees...</p>\n            </div>\n          ) : (\n            employees.map(employee => (\n              <div\n                key={employee.employeeId}\n                className=\"flex items-center justify-between p-4 border rounded-lg hover:bg-gray-50\"\n              >\n                <div className=\"flex items-center gap-4\">\n                  <Avatar className=\"h-10 w-10\">\n                    {employee.picture ? (\n                      <AvatarImage\n                        src={employee.picture}\n                        alt={`${employee.firstName} ${employee.lastName}`}\n                        width={40}\n                        height={40}\n                        onError={e => {\n                          const imgElement = e.target as HTMLImageElement;\n                          imgElement.style.display = 'none';\n                        }}\n                      />\n                    ) : null}\n                    <AvatarFallback className=\"uppercase bg-gray-100 text-gray-600\">\n                      {employee.firstName?.[0]}\n                      {employee.lastName?.[0]}\n                    </AvatarFallback>\n                  </Avatar>\n                  <div>\n                    <p className=\"font-medium\">{`${employee.firstName} ${employee.lastName}`}</p>\n                    <p className=\"text-sm text-gray-500\">{employee.email}</p>\n                  </div>\n                </div>\n                <div className=\"flex items-center gap-4\">\n                  <Badge variant=\"outline\">{employee.grade}</Badge>\n                  <Badge variant=\"secondary\">{employee.businessUnit}</Badge>\n                  <Badge\n                    variant={employee.employmentStatus === 'Active' ? 'success' : 'destructive'}\n                  >\n                    {employee.employmentStatus}\n                  </Badge>\n                  <Dialog>\n                    <DialogTrigger asChild>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => fetchEmployeeSkills(employee.email)}\n                      >\n                        View Skills\n                      </Button>\n                    </DialogTrigger>\n                    <DialogContent className=\"max-w-4xl\">\n                      <DialogHeader>\n                        <DialogTitle>{`${employee.firstName} ${employee.lastName}'s Skills`}</DialogTitle>\n                        <DialogDescription>Skill levels and proficiencies</DialogDescription>\n                      </DialogHeader>\n                      {skillsLoading ? (\n                        <div className=\"flex flex-col items-center justify-center h-[500px] gap-2\">\n                          <Loader2 className=\"h-8 w-8 animate-spin text-primary\" />\n                          <p className=\"text-sm text-muted-foreground\">Loading skills data...</p>\n                        </div>\n                      ) : (\n                        <ScrollArea className=\"h-[500px] w-full pr-4\">\n                          <div className=\"space-y-4\">\n                            {selectedEmployeeSkills.length > 0 ? (\n                              selectedEmployeeSkills.map(skill => (\n                                <div key={skill.skill} className=\"space-y-2 border-b pb-4\">\n                                  <div className=\"flex items-center justify-between\">\n                                    <span className=\"font-medium\">{skill.skill}</span>\n                                    <div className=\"flex items-center space-x-2\">\n                                      <Progress\n                                        value={(skill.average / skill.requiredRating) * 100}\n                                        className=\"w-[100px]\"\n                                      />\n                                      <span className=\"text-sm text-gray-500\">\n                                        {getSkillLevelLabel(skill.average)}\n                                      </span>\n                                      {getSkillStatusIcon(skill.average, skill.requiredRating)}\n                                    </div>\n                                  </div>\n                                  <p className=\"text-sm text-gray-600\">\n                                    {skill.description || 'No description available'}\n                                  </p>\n                                  <p className=\"text-sm font-medium\">\n                                    Current Level: {skill.proficiencyDescription}\n                                  </p>\n                                  <div className=\"flex justify-between text-sm\">\n                                    <span>\n                                      Self Assessment: {getSkillLevelLabel(skill.selfRating)}\n                                    </span>\n                                    <span>\n                                      Manager Assessment: {getSkillLevelLabel(skill.managerRating)}\n                                    </span>\n                                  </div>\n                                </div>\n                              ))\n                            ) : (\n                              <div className=\"text-center text-gray-500 py-4\">\n                                No skills data available for this employee\n                              </div>\n                            )}\n                          </div>\n                        </ScrollArea>\n                      )}\n                    </DialogContent>\n                  </Dialog>\n                </div>\n              </div>\n            ))\n          )}\n        </div>\n\n        {/* Pagination Controls */}\n        <div className=\"mt-4 flex items-center justify-between\">\n          <div className=\"flex items-center gap-2\">\n            <Select\n              value={limit === totalItems ? 'all' : limit.toString()}\n              onValueChange={onLimitChange}\n            >\n              <SelectTrigger className=\"w-[120px]\">\n                <SelectValue placeholder=\"Items per page\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"5\">5 per page</SelectItem>\n                <SelectItem value=\"10\">10 per page</SelectItem>\n                <SelectItem value=\"20\">20 per page</SelectItem>\n                <SelectItem value=\"50\">50 per page</SelectItem>\n                <SelectItem value=\"all\">Show all</SelectItem>\n              </SelectContent>\n            </Select>\n            <span className=\"text-sm text-gray-500\">\n              Showing {Math.min((page - 1) * limit + 1, totalItems)} -{' '}\n              {Math.min(page * limit, totalItems)} of {totalItems} items\n            </span>\n          </div>\n\n          <div className=\"flex items-center gap-2\">\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => onPageChange(1)}\n              disabled={page === 1 || loading || limit === totalItems}\n            >\n              <ChevronsLeft className=\"h-4 w-4\" />\n            </Button>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => onPageChange(page - 1)}\n              disabled={page === 1 || loading || limit === totalItems}\n            >\n              <ChevronLeft className=\"h-4 w-4\" />\n            </Button>\n\n            <div className=\"flex items-center gap-2\">\n              <span className=\"text-sm\">Page</span>\n              <Input\n                type=\"number\"\n                value={goToPage}\n                onChange={e => setGoToPage(e.target.value)}\n                onKeyDown={handleGoToPage}\n                className=\"w-16 h-8 text-sm\"\n                min={1}\n                max={totalPages}\n                placeholder={page.toString()}\n                disabled={limit === totalItems}\n              />\n              <span className=\"text-sm\">of {totalPages}</span>\n            </div>\n\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => onPageChange(page + 1)}\n              disabled={page === totalPages || loading || limit === totalItems}\n            >\n              <ChevronRight className=\"h-4 w-4\" />\n            </Button>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => onPageChange(totalPages)}\n              disabled={page === totalPages || loading || limit === totalItems}\n            >\n              <ChevronsRight className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\nEND_CODE\n\n--- FILE: dashboard/admin/AnalysisView.tsx ---\nLANGUAGE: tsx\nBEGIN_CODE\n'use client';\n\nimport ErrorCard from '@/components/error/ErrorCard';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { getDistributions, getSkillAnalytics } from '@/lib/api';\nimport {\n  BusinessUnitSkillDistribution,\n  GradeDistributionItem,\n  SkillDistributionCategory,\n  SkillDistributionItem,\n} from '@/types/admin';\nimport { DistributionResponse, SkillAnalyticsResponse } from '@/types/api';\nimport { AlertTriangle, CheckCircle2, Loader2, XCircle } from 'lucide-react';\nimport { useEffect, useState } from 'react';\n\ninterface LimitedItems<T> {\n  displayed: T[];\n  remaining: number;\n}\n\nconst StatusIcon = ({ status }: { status: 'warning' | 'critical' | 'normal' }) => {\n  switch (status) {\n    case 'critical':\n      return <XCircle className=\"h-4 w-4 text-red-500\" />;\n    case 'warning':\n      return <AlertTriangle className=\"h-4 w-4 text-amber-500\" />;\n    case 'normal':\n      return <CheckCircle2 className=\"h-4 w-4 text-green-500\" />;\n    default:\n      return null;\n  }\n};\n\nconst SkillItem = ({ skill }: { skill: SkillDistributionItem }) => (\n  <div className=\"flex items-center justify-between\">\n    <span className=\"text-sm text-slate-900\">{skill.name}</span>\n    <div className=\"flex items-center gap-2\">\n      <span className=\"text-sm text-slate-600 bg-slate-100 px-2 py-0.5 rounded-md\">\n        {skill.userCount} {skill.userCount === 1 ? 'user' : 'users'}\n      </span>\n      <StatusIcon status={skill.status} />\n    </div>\n  </div>\n);\n\nexport default function AnalysisView() {\n  const [analyticsData, setAnalyticsData] = useState<SkillAnalyticsResponse | null>(null);\n  const [distributionData, setDistributionData] = useState<DistributionResponse | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const [analytics, distributions] = await Promise.all([\n          getSkillAnalytics(),\n          getDistributions(),\n        ]);\n        setAnalyticsData(analytics);\n        setDistributionData(distributions);\n      } catch (err) {\n        setError(err instanceof Error ? err.message : 'Failed to load data');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  function getLimitedItems<T>(items: T[], limit = 3): LimitedItems<T> {\n    return {\n      displayed: items.slice(0, limit),\n      remaining: Math.max(0, items.length - limit),\n    };\n  }\n\n  if (loading)\n    return (\n      <div className=\"h-[350px] flex items-center justify-center\">\n        <div className=\"flex flex-col items-center gap-2\">\n          <Loader2 className=\"h-8 w-8 animate-spin\" />\n          <p className=\"text-sm text-muted-foreground\">Loading metrics...</p>\n        </div>\n      </div>\n    );\n  if (error) return <ErrorCard cardTitle={'Analytics'} message={error} />;\n  if (!analyticsData || !distributionData) return null;\n\n  return (\n    <div className=\"grid gap-4 md:grid-cols-2\">\n      <Card>\n        <CardHeader>\n          <CardTitle>Skill Distribution</CardTitle>\n          <CardDescription>Skill coverage across departments</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-6 max-h-[400px] overflow-y-auto\">\n            {' '}\n            {/* Added max height and scroll */}\n            {distributionData.skillDistribution.map(\n              (businessUnit: BusinessUnitSkillDistribution, buIndex: number) => (\n                <div key={buIndex} className=\"space-y-4\">\n                  <h2 className=\"text-lg font-bold text-primary\">{businessUnit.businessUnit}</h2>\n                  {businessUnit.categories.map(\n                    (category: SkillDistributionCategory, categoryIndex: number) => {\n                      const { displayed: displayedSkills, remaining } = getLimitedItems(\n                        category.skills,\n                      );\n\n                      return (\n                        <div key={categoryIndex} className=\"space-y-2\">\n                          <h3 className=\"font-semibold text-base text-muted-foreground\">\n                            {category.category}\n                          </h3>\n                          <div className=\"space-y-2\">\n                            {displayedSkills.map(\n                              (skill: SkillDistributionItem, skillIndex: number) => (\n                                <SkillItem key={skillIndex} skill={skill} />\n                              ),\n                            )}\n                            {remaining > 0 && (\n                              <div className=\"text-sm text-blue-600 hover:text-blue-800 cursor-pointer\">\n                                And {remaining} more...\n                              </div>\n                            )}\n                          </div>\n                        </div>\n                      );\n                    },\n                  )}\n                </div>\n              ),\n            )}\n          </div>\n        </CardContent>\n      </Card>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Grade Distribution</CardTitle>\n          <CardDescription>Employee distribution by grade level</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {distributionData.gradeDistribution.map(\n              (grade: GradeDistributionItem, index: number) => (\n                <div key={index} className=\"flex items-center justify-between\">\n                  <span className=\"text-sm font-medium\">{grade.grade}</span>\n                  <div className=\"flex items-center gap-2\">\n                    <span className=\"text-sm text-slate-600 bg-slate-100 px-2 py-0.5 rounded-md\">\n                      {grade.userCount} {grade.userCount === 1 ? 'user' : 'users'}\n                    </span>\n                  </div>\n                </div>\n              ),\n            )}\n          </div>\n        </CardContent>\n      </Card>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Top Skills</CardTitle>\n          <CardDescription>Most prevalent skills across the organization</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-6\">\n            {analyticsData.topSkills.map((skill, index) => (\n              <div key={index} className=\"space-y-2\">\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"font-medium text-sm\">{skill.name}</span>\n                  <span className=\"text-sm text-muted-foreground\">\n                    {Math.round(skill.prevalence)}%\n                  </span>\n                </div>\n                <div className=\"relative h-2 w-full bg-secondary rounded-full overflow-hidden\">\n                  <div\n                    className=\"h-full bg-primary rounded-full transition-all duration-500 ease-in-out\"\n                    style={{ width: `${skill.prevalence}%` }}\n                  />\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Skill Gap Analysis</CardTitle>\n          <CardDescription>Areas where skill improvement is needed</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-6\">\n            {analyticsData.skillGaps.map((skill, index) => (\n              <div key={index} className=\"space-y-2\">\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"font-medium text-sm\">{skill.name}</span>\n                  <span\n                    className={`text-xs px-2 py-1 rounded-full ${\n                      skill.gap > 1.5 ? 'bg-red-100 text-red-600' : 'bg-green-100 text-green-600'\n                    }`}\n                  >\n                    Gap: {skill.gap.toFixed(1)}\n                  </span>\n                </div>\n                <div className=\"flex flex-col gap-1.5\">\n                  <div className=\"relative h-2 w-full bg-secondary rounded-full overflow-hidden\">\n                    <div\n                      className=\"h-full bg-primary rounded-full transition-all duration-500 ease-in-out\"\n                      style={{ width: `${(skill.currentLevel / 5) * 100}%` }}\n                    />\n                    <div\n                      className=\"absolute top-0 h-full w-px bg-black/50\"\n                      style={{ left: `${(skill.requiredLevel / 5) * 100}%` }}\n                    />\n                  </div>\n                  <div className=\"flex justify-between text-xs text-muted-foreground\">\n                    <span>Current Avg: {skill.currentLevel.toFixed(1)}</span>\n                    <span>Required: {skill.requiredLevel.toFixed(1)}</span>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nEND_CODE\n\n--- FILE: dashboard/admin/SearchAndFilter.tsx ---\nLANGUAGE: tsx\nBEGIN_CODE\n'use client';\n\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport { Building2, Filter, Search } from 'lucide-react';\n\ninterface SearchAndFilterProps {\n  selectedBusinessUnit: string;\n  businessUnits: string[];\n  searchQuery: string;\n  onBusinessUnitChange: (unit: string) => void;\n  onSearchChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  isLoading?: boolean;\n}\n\nexport default function SearchAndFilter({\n  selectedBusinessUnit,\n  businessUnits,\n  searchQuery,\n  onBusinessUnitChange,\n  onSearchChange,\n  isLoading = false,\n}: SearchAndFilterProps) {\n  return (\n    <div className=\"flex gap-4 mb-6\">\n      <div className=\"flex-1 flex gap-2\">\n        <Select\n          value={selectedBusinessUnit}\n          onValueChange={onBusinessUnitChange}\n          disabled={isLoading}\n        >\n          <SelectTrigger className=\"w-[200px]\">\n            <SelectValue>\n              <div className=\"flex items-center\">\n                <Building2 className=\"w-4 h-4 mr-2\" />\n                {selectedBusinessUnit}\n              </div>\n            </SelectValue>\n          </SelectTrigger>\n          <SelectContent>\n            {businessUnits.map(unit => (\n              <SelectItem key={unit} value={unit}>\n                <div className=\"flex items-center\">\n                  <Building2 className=\"h-4 w-4 mr-2\" />\n                  {unit}\n                </div>\n              </SelectItem>\n            ))}\n          </SelectContent>\n        </Select>\n        <div className=\"relative\">\n          <Search className=\"absolute left-2 top-2.5 h-4 w-4 text-gray-400\" />\n          <Input\n            placeholder=\"Search by users or skills...\"\n            className=\"pl-8 w-[300px]\"\n            value={searchQuery}\n            onChange={onSearchChange}\n            disabled={isLoading}\n          />\n        </div>\n      </div>\n      <Button variant=\"outline\" size=\"icon\" disabled={isLoading}>\n        <Filter className=\"h-4 w-4\" />\n      </Button>\n    </div>\n  );\n}\n\nEND_CODE\n\n--- FILE: dashboard/admin/DataManagementActions.tsx ---\nLANGUAGE: tsx\nBEGIN_CODE\n'use client';\n\nimport { Button } from '@/components/ui/button';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu';\nimport { Check, Download, Loader2, Upload, X } from 'lucide-react';\nimport { useState } from 'react';\n\n// interface DataSource {\n//   name: string;\n//   status: 'idle' | 'syncing' | 'success' | 'error';\n// }\n\nexport default function DataManagementActions() {\n  const [syncStatus, setSyncStatus] = useState<\n    Record<string, 'idle' | 'syncing' | 'success' | 'error'>\n  >({\n    'Self-Assessment': 'idle',\n    'Manager Assessment': 'idle',\n    'Staff List': 'idle',\n    Courses: 'idle',\n    'Learning Paths': 'idle',\n    'Skills Matrix': 'idle',\n    'Skills Taxonomy': 'idle',\n  });\n\n  const handleSync = async (dataSource: string) => {\n    setSyncStatus(prev => ({ ...prev, [dataSource]: 'syncing' }));\n    // Simulate API call\n    await new Promise(resolve => setTimeout(resolve, 2000));\n    setSyncStatus(prev => ({ ...prev, [dataSource]: 'success' }));\n  };\n\n  const handleExportReport = async () => {\n    // Simulate report generation\n    await new Promise(resolve => setTimeout(resolve, 2000));\n    alert('Report exported successfully!');\n  };\n\n  return (\n    <div className=\"flex justify-between items-center mb-6\">\n      <div className=\"flex space-x-2\">\n        <Button>\n          <Upload className=\"mr-2 h-4 w-4\" />\n          Import Data\n        </Button>\n        <Button onClick={handleExportReport}>\n          <Download className=\"mr-2 h-4 w-4\" />\n          Export Report\n        </Button>\n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <Button>\n              <Upload className=\"mr-2 h-4 w-4\" />\n              Sync Data\n            </Button>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent>\n            <DropdownMenuLabel>Select Data Source</DropdownMenuLabel>\n            <DropdownMenuSeparator />\n            {Object.entries(syncStatus).map(([source, status]) => (\n              <DropdownMenuItem key={source} onSelect={() => handleSync(source)}>\n                <span className=\"flex-1\">{source}</span>\n                {status === 'idle' && <span className=\"text-muted-foreground\">(Not synced)</span>}\n                {status === 'syncing' && <Loader2 className=\"h-4 w-4 animate-spin\" />}\n                {status === 'success' && <Check className=\"h-4 w-4 text-green-500\" />}\n                {status === 'error' && <X className=\"h-4 w-4 text-red-500\" />}\n              </DropdownMenuItem>\n            ))}\n          </DropdownMenuContent>\n        </DropdownMenu>\n      </div>\n    </div>\n  );\n}\n\nEND_CODE\n\n--- FILE: dashboard/LandingDashboard.tsx ---\nLANGUAGE: tsx\nBEGIN_CODE\n'use client';\n\nimport { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { logger } from '@/lib/utils';\nimport { Award, BookOpen, ChevronRight, TrendingUp, Users } from 'lucide-react';\nimport { Session } from 'next-auth';\nimport { signIn, useSession } from 'next-auth/react';\nimport { useRouter } from 'next/navigation';\nimport { useEffect, useState } from 'react';\nimport {\n  Bar,\n  BarChart,\n  CartesianGrid,\n  Cell,\n  Legend,\n  Pie,\n  PieChart,\n  ResponsiveContainer,\n  Tooltip,\n  XAxis,\n  YAxis,\n} from 'recharts';\n\nconst featuresData = [\n  { name: 'Skill Assessment', value: 30 },\n  { name: 'Learning Paths', value: 25 },\n  { name: 'Performance Tracking', value: 20 },\n  { name: 'Team Management', value: 15 },\n  { name: 'Reporting', value: 10 },\n];\n\nconst benefitsData = [\n  { name: 'Productivity', increase: 25 },\n  { name: 'Staff Satisfaction', increase: 30 },\n  { name: 'Skill Gaps Reduced', increase: 40 },\n  { name: 'Training Efficiency', increase: 35 },\n];\n\nconst COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884D8'];\n\n// Utility functions for email validation\nconst isValidEmail = (email: string): boolean => {\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  return emailRegex.test(email);\n};\n\nconst isAdminEmail = (email: string): boolean => {\n  const adminEmails = process.env.NEXT_PUBLIC_ADMIN_EMAILS?.split(',') || [];\n  return adminEmails.includes(email.toLowerCase());\n};\n\nconst isAllowedDomain = (email: string): boolean => {\n  const allowedDomain = process.env.NEXT_PUBLIC_ALLOWED_DOMAIN || `@stratpoint.com`;\n  return email.toLowerCase().endsWith(allowedDomain);\n};\n\nexport default function LandingDashboard() {\n  const { data: session, status } = useSession() as {\n    data: Session | null;\n    status: 'loading' | 'authenticated' | 'unauthenticated';\n  };\n  const [activeTab, setActiveTab] = useState('overview');\n  const [email, setEmail] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState('');\n  const router = useRouter();\n\n  useEffect(() => {\n    const handleInitialRouting = async () => {\n      if (status === 'loading') return;\n\n      if (status === 'authenticated' && session?.user?.role) {\n        const baseRoute = '/dashboard';\n        const role = session.user.role.toLowerCase();\n        router.push(`${baseRoute}/${role}`);\n      } else if (status === 'unauthenticated') {\n        const userEmail = session?.user?.email || '';\n        if (isAllowedDomain(userEmail) && !isAdminEmail(userEmail)) {\n          await signIn('google', { callbackUrl: '/api/auth/callback/google' });\n        }\n      }\n    };\n\n    handleInitialRouting();\n  }, [session, status, router]);\n\n  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    setIsLoading(true);\n    setError('');\n\n    if (!isValidEmail(email)) {\n      setError('Please enter a valid email address.');\n      setIsLoading(false);\n      return;\n    }\n\n    if (isAdminEmail(email)) {\n      router.push(`/admin-login?email=${encodeURIComponent(email)}`);\n    } else if (isAllowedDomain(email)) {\n      try {\n        await signIn('google', {\n          callbackUrl: '/',\n          loginHint: email,\n        });\n      } catch (err) {\n        logger.error(err);\n        setError('An unexpected error occurred. Please try again.');\n      }\n    } else {\n      setError('Your email domain is not authorized to access this application.');\n    }\n\n    setIsLoading(false);\n  };\n\n  return (\n    <div className=\"container mx-auto p-4\">\n      <header className=\"text-center mb-8\">\n        <h1 className=\"text-4xl font-bold mb-2\">Welcome to SkillBase</h1>\n        <p className=\"text-xl text-muted-foreground\">Empower Your Team, Elevate Your Business</p>\n      </header>\n\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4 mb-8\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Skill Tracking</CardTitle>\n            <Award className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">Comprehensive</div>\n            <p className=\"text-xs text-muted-foreground\">Monitor and develop skills</p>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Learning Paths</CardTitle>\n            <BookOpen className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">Personalized</div>\n            <p className=\"text-xs text-muted-foreground\">Tailored growth journeys</p>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Team Management</CardTitle>\n            <Users className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">Efficient</div>\n            <p className=\"text-xs text-muted-foreground\">Streamlined team oversight</p>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Performance Boost</CardTitle>\n            <TrendingUp className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">Measurable</div>\n            <p className=\"text-xs text-muted-foreground\">Track improvement over time</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-4\">\n        <TabsList>\n          <TabsTrigger value=\"overview\">Platform Overview</TabsTrigger>\n          <TabsTrigger value=\"features\">Key Features</TabsTrigger>\n          <TabsTrigger value=\"benefits\">Benefits</TabsTrigger>\n        </TabsList>\n        <TabsContent value=\"overview\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Why Choose SkillBase?</CardTitle>\n              <CardDescription>\n                Discover how our platform can transform your team&apos;s skills management\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid gap-4 md:grid-cols-2\">\n                <div>\n                  <h3 className=\"text-lg font-semibold mb-2\">For Staffs</h3>\n                  <ul className=\"list-disc list-inside space-y-1\">\n                    <li>Track your skill progress</li>\n                    <li>Access personalized learning paths</li>\n                    <li>Receive targeted training recommendations</li>\n                    <li>Visualize your career growth</li>\n                  </ul>\n                </div>\n                <div>\n                  <h3 className=\"text-lg font-semibold mb-2\">For Managers</h3>\n                  <ul className=\"list-disc list-inside space-y-1\">\n                    <li>Gain insights into team skills</li>\n                    <li>Identify and address skill gaps</li>\n                    <li>Streamline performance evaluations</li>\n                    <li>Optimize training resources</li>\n                  </ul>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n        <TabsContent value=\"features\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Platform Features</CardTitle>\n              <CardDescription>Explore the powerful tools SkillBase offers</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <PieChart>\n                  <Pie\n                    data={featuresData}\n                    cx=\"50%\"\n                    cy=\"50%\"\n                    labelLine={false}\n                    outerRadius={80}\n                    fill=\"#8884d8\"\n                    dataKey=\"value\"\n                    label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}\n                  >\n                    {featuresData.map((entry, index) => (\n                      <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                    ))}\n                  </Pie>\n                  <Tooltip />\n                  <Legend />\n                </PieChart>\n              </ResponsiveContainer>\n            </CardContent>\n          </Card>\n        </TabsContent>\n        <TabsContent value=\"benefits\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Platform Benefits</CardTitle>\n              <CardDescription>\n                See the impact SkillBase can have on your organization\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <BarChart data={benefitsData}>\n                  <CartesianGrid strokeDasharray=\"3 3\" />\n                  <XAxis dataKey=\"name\" />\n                  <YAxis />\n                  <Tooltip />\n                  <Legend />\n                  <Bar dataKey=\"increase\" fill=\"#8884d8\" name=\"Percentage Increase\" />\n                </BarChart>\n              </ResponsiveContainer>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n\n      <div className=\"mt-8 text-center\">\n        <h2 className=\"text-2xl font-bold mb-4\">Ready to Transform Your Team&apos;s Skills?</h2>\n        <form\n          onSubmit={handleSubmit}\n          className=\"flex flex-col items-center justify-center gap-4 md:flex-row\"\n        >\n          <div className=\"flex-1 w-full md:w-auto\">\n            <Input\n              type=\"email\"\n              placeholder=\"Enter your work email\"\n              value={email}\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => setEmail(e.target.value)}\n              required\n            />\n          </div>\n          <Button type=\"submit\" className=\"w-full md:w-auto\" disabled={isLoading || !email}>\n            {isLoading ? (\n              <>\n                <span className=\"mr-2\">Loading...</span>\n                <ChevronRight className=\"ml-2 h-4 w-4 animate-spin\" />\n              </>\n            ) : (\n              <>\n                Get Started\n                <ChevronRight className=\"ml-2 h-4 w-4\" />\n              </>\n            )}\n          </Button>\n        </form>\n        {error && (\n          <Alert variant=\"destructive\" className=\"mt-4\">\n            <AlertTitle>Error</AlertTitle>\n            <AlertDescription>{error}</AlertDescription>\n          </Alert>\n        )}\n      </div>\n    </div>\n  );\n}\n\nEND_CODE\n\n--- FILE: dashboard/staff/StaffLearningRecommendation.tsx ---\nLANGUAGE: tsx\nBEGIN_CODE\n'use client';\n\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { learningRecommendationAPI } from '@/lib/api';\nimport { Recommendation } from '@/types/staff';\nimport { X } from 'lucide-react';\nimport { useSession } from 'next-auth/react';\nimport React, { useEffect, useState } from 'react';\n\nconst StaffLearningRecommendations: React.FC = () => {\n  const [recommendations, setRecommendations] = useState<Recommendation[]>([]);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [error, setError] = useState<string | null>(null);\n  const [selectedCourse, setSelectedCourse] = useState<Recommendation | null>(null);\n  const [isDialogOpen, setIsDialogOpen] = useState<boolean>(false);\n  const { data: session } = useSession();\n\n  useEffect(() => {\n    async function fetchRecommendations() {\n      if (status === 'loading') return;\n\n      if (!session?.user?.email) {\n        setError('No user session found');\n        setLoading(false);\n        return;\n      }\n\n      try {\n        setLoading(true);\n        setError(null);\n\n        const data = await learningRecommendationAPI(session.user.email);\n        if (data.recommendations) {\n          setRecommendations(data.recommendations);\n        }\n      } catch (err) {\n        console.error('Error fetching recommendations:', err);\n        setError(err instanceof Error ? err.message : 'Failed to fetch recommendations');\n      } finally {\n        setLoading(false);\n      }\n    }\n\n    fetchRecommendations();\n  }, [session?.user?.email]);\n\n  const handleCourseClick = (course: Recommendation) => {\n    setSelectedCourse(course);\n    setIsDialogOpen(true);\n  };\n\n  const getGapStyle = (gap: number) => {\n    if (gap < 0) return 'bg-red-500 text-white-10000';\n    return 'bg-blue-400 text-white-800';\n  };\n\n  return (\n    <>\n      <Card>\n        <CardHeader>\n          <CardTitle>Growth Plan</CardTitle>\n          <CardDescription>Skill gaps and recommended training courses</CardDescription>\n        </CardHeader>\n        <CardContent>\n          {loading ? (\n            <div className=\"p-4 text-center\">Loading...</div>\n          ) : error ? (\n            <div className=\"p-4 text-center text-red-500\">{error}</div>\n          ) : recommendations && recommendations.length > 0 ? (\n            <div className=\"w-full\">\n              <table className=\"w-full\">\n                <thead>\n                  <tr>\n                    <th className=\"text-left p-4 text-sm font-medium text-gray-500\">Skill</th>\n                    <th className=\"text-left p-4 text-sm font-medium text-gray-500\">\n                      Current Level\n                    </th>\n                    <th className=\"text-left p-4 text-sm font-medium text-gray-500\">\n                      Required Level\n                    </th>\n                    <th className=\"text-left p-4 text-sm font-medium text-gray-500\">Gap</th>\n                    <th className=\"text-left p-4 text-sm font-medium text-gray-500\">\n                      Recommended Training Course\n                    </th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {recommendations.map((rec, index) => (\n                    <tr key={index} className=\"border-t border-gray-100\">\n                      <td className=\"p-4 text-sm font-medium\">{rec.skillName}</td>\n                      <td className=\"p-4 text-sm\">{rec.currentLevel}</td>\n                      <td className=\"p-4 text-sm\">{rec.targetLevel}</td>\n                      <td className=\"p-4 text-sm\">\n                        <span className={`px-3 py-1 rounded-md ${getGapStyle(rec.gap)}`}>\n                          {rec.gap}\n                        </span>\n                      </td>\n                      <td className=\"p-4 text-sm\">\n                        <button\n                          onClick={() => handleCourseClick(rec)}\n                          className=\"text-sm font-medium text-emerald-500 hover:text-emerald-600\"\n                        >\n                          {rec.course?.name || `${rec.skillName} Fundamentals`}\n                        </button>\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          ) : (\n            <div className=\"p-4 text-center text-gray-500\">No recommendations available</div>\n          )}\n        </CardContent>\n      </Card>\n\n      {isDialogOpen && selectedCourse && (\n        <div className=\"fixed inset-0 z-50 overflow-auto bg-black bg-opacity-50 flex items-center justify-center p-4\">\n          <div className=\"bg-white rounded-lg w-full max-w-2xl p-6 relative\">\n            <button\n              onClick={() => setIsDialogOpen(false)}\n              className=\"absolute right-3 top-3 text-gray-400 hover:text-gray-500\"\n            >\n              <X className=\"h-4 w-4\" />\n            </button>\n\n            <div className=\"mt-2\">\n              <div className=\"space-y-4\">\n                <div>\n                  <h2 className=\"text-xl font-semibold\">{selectedCourse.course?.name}</h2>\n                  <p className=\"text-sm text-gray-500\">Training details and learning objectives</p>\n                </div>\n\n                <div className=\"flex justify-between items-start mb-2\">\n                  <h3 className=\"font-semibold text-lg\">{selectedCourse.skillName}</h3>\n                  <span className=\"px-2 py-1 rounded bg-orange-100 text-orange-800\">\n                    Gap: {selectedCourse.gap}\n                  </span>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                  <div>\n                    <div className=\"mb-2\">\n                      <span className=\"text-gray-500\">Current Level:</span>{' '}\n                      {selectedCourse.currentLevel}\n                    </div>\n                    <div className=\"mb-2\">\n                      <span className=\"text-gray-500\">Provider:</span>{' '}\n                      {selectedCourse.course?.provider}\n                    </div>\n                    <div>\n                      <span className=\"text-gray-500\">Format:</span> {selectedCourse.course?.format}\n                    </div>\n                  </div>\n                  <div>\n                    <div className=\"mb-2\">\n                      <span className=\"text-gray-500\">Target Level:</span>{' '}\n                      {selectedCourse.targetLevel}\n                    </div>\n                    <div className=\"mb-2\">\n                      <span className=\"text-gray-500\">Duration:</span>{' '}\n                      {selectedCourse.course?.duration}\n                    </div>\n                  </div>\n                </div>\n\n                <div>\n                  <h4 className=\"font-medium mb-2\">Learning Path:</h4>\n                  <div className=\"text-sm text-gray-600\">\n                    This course will help you progress from level {selectedCourse.currentLevel} to\n                    level {selectedCourse.targetLevel}, which is appropriate for your career level.\n                  </div>\n                </div>\n\n                <div>\n                  <h4 className=\"font-medium mb-2\">Learning Objectives:</h4>\n                  <ul className=\"list-disc list-inside text-sm space-y-1\">\n                    {selectedCourse.course?.learningObjectives?.map((objective, i) => (\n                      <li key={i}>{objective}</li>\n                    ))}\n                  </ul>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                  <div>\n                    <h4 className=\"font-medium mb-1\">Prerequisites:</h4>\n                    <p>{selectedCourse.course?.prerequisites}</p>\n                  </div>\n                  <div>\n                    <h4 className=\"font-medium mb-1\">Business Value:</h4>\n                    <p>{selectedCourse.course?.businessValue}</p>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default StaffLearningRecommendations;\n\nEND_CODE\n\n--- FILE: dashboard/staff/StaffDashboard.tsx ---\nLANGUAGE: tsx\nBEGIN_CODE\n'use client';\n\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { useState } from 'react';\n// import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport StaffSkillsView from '@/components/dashboard/staff/StaffSkillsView';\n// import { ScrollArea } from \"@/components/ui/scroll-area\";\nimport Overview from '@/components/dashboard/staff/Overview';\nimport StaffLearningRecommendations from '@/components/dashboard/staff/StaffLearningRecommendation';\nimport StaffDashboardHeader from '@/components/shared/StaffDashboardHeader';\n\nexport default function StaffDashboard() {\n  const [activeTab, setActiveTab] = useState('overview');\n\n  return (\n    <div className=\"container mx-auto p-4 max-w-[80%]\">\n      <StaffDashboardHeader />\n\n      <Tabs value={activeTab} onValueChange={setActiveTab}>\n        <TabsList className=\"grid w-full grid-cols-3\">\n          <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n          <TabsTrigger value=\"skills\">Skills Details</TabsTrigger>\n          <TabsTrigger value=\"growth-plan\">Growth Plan</TabsTrigger>\n        </TabsList>\n\n        {/* Overview Tab */}\n\n        <TabsContent value=\"overview\">\n          <Overview />\n        </TabsContent>\n\n        {/* Skills Tab */}\n\n        <TabsContent value=\"skills\">\n          <StaffSkillsView />\n        </TabsContent>\n\n        {/* Growth Tab */}\n\n        <TabsContent value=\"growth-plan\">\n          <StaffLearningRecommendations />\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n\nEND_CODE\n\n--- FILE: dashboard/staff/Overview.tsx ---\nLANGUAGE: tsx\nBEGIN_CODE\n'use client';\n\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { CustomTooltip } from '@/components/ui/tooltip';\nimport { getSkills } from '@/lib/api';\nimport { calculateMetricsFromBackendResponse, isSkillsResponse } from '@/lib/type-guards';\nimport type { SkillMetrics, StaffSkill } from '@/types/staff';\nimport { Blocks, BrainCircuit, User2 } from 'lucide-react';\nimport { useEffect, useState } from 'react';\nimport {\n  Legend,\n  PolarAngleAxis,\n  PolarGrid,\n  PolarRadiusAxis,\n  Radar,\n  RadarChart,\n  ResponsiveContainer,\n  Tooltip,\n} from 'recharts';\n\ninterface SkillsData {\n  metrics: SkillMetrics;\n  skills: StaffSkill[];\n}\n\nexport default function Overview() {\n  const [data, setData] = useState<SkillsData | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [selectedCategory, setSelectedCategory] = useState<'Technical Skills' | 'Soft Skills'>(\n    'Technical Skills',\n  );\n\n  useEffect(() => {\n    const fetchSkillData = async () => {\n      try {\n        const response = await getSkills();\n        if (isSkillsResponse(response)) {\n          setData({\n            metrics: response.metrics,\n            skills: response.skills,\n          });\n        } else {\n          const metrics = calculateMetricsFromBackendResponse(response);\n          const skills = response.flatMap(item => item.skills);\n          setData({\n            metrics,\n            skills,\n          });\n        }\n      } catch (err) {\n        setError(err instanceof Error ? err.message : 'Failed to load skills data');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchSkillData();\n  }, []);\n\n  if (loading) return <div>Loading...</div>;\n  if (error) return <div>Error: {error}</div>;\n  if (!data) return null;\n\n  const chartData = data.skills\n    .filter(skill => skill.category === selectedCategory)\n    .map(skill => ({\n      skill: skill.skill,\n      average: skill.average,\n      requiredRating: skill.requiredRating, // Changed from 'required' to 'requiredRating' to match tooltip\n      gap: skill.gap,\n    }));\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"grid gap-4 md:grid-cols-3\">\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center gap-2\">\n              <User2 className=\"h-4 w-4 text-muted-foreground\" />\n              <h3 className=\"text-sm text-muted-foreground\">Soft Skills Average</h3>\n            </div>\n            <p className=\"text-2xl font-bold mt-2\">{data.metrics.softSkillsAverage.toFixed(2)}</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center gap-2\">\n              <BrainCircuit className=\"h-4 w-4 text-muted-foreground\" />\n              <h3 className=\"text-sm text-muted-foreground\">Technical Skills Average</h3>\n            </div>\n            <p className=\"text-2xl font-bold mt-2\">\n              {data.metrics.technicalSkillsAverage.toFixed(2)}\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center gap-2\">\n              <Blocks className=\"h-4 w-4 text-muted-foreground\" />\n              <h3 className=\"text-sm text-muted-foreground\">Skills Assessed</h3>\n            </div>\n            <p className=\"text-2xl font-bold mt-2\">{data.metrics.skillsAssessed}</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <div className=\"flex justify-between items-center\">\n            <CardTitle>Skills Overview</CardTitle>\n            <div className=\"space-x-2\">\n              <Button\n                variant={selectedCategory === 'Technical Skills' ? 'default' : 'outline'}\n                size=\"sm\"\n                onClick={() => setSelectedCategory('Technical Skills')}\n              >\n                Technical Skills\n              </Button>\n              <Button\n                variant={selectedCategory === 'Soft Skills' ? 'default' : 'outline'}\n                size=\"sm\"\n                onClick={() => setSelectedCategory('Soft Skills')}\n              >\n                Soft Skills\n              </Button>\n            </div>\n          </div>\n          <p className=\"text-sm text-muted-foreground\">\n            Your current skill levels compared to required levels\n          </p>\n        </CardHeader>\n        <CardContent>\n          <div className=\"w-full h-[400px]\">\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\n              <RadarChart data={chartData} margin={{ top: 20, right: 30, bottom: 20, left: 30 }}>\n                <PolarGrid gridType=\"circle\" />\n                <PolarAngleAxis dataKey=\"skill\" tick={{ fill: '#666', fontSize: 12 }} />\n                <PolarRadiusAxis angle={90} domain={[0, 5]} tick={{ fontSize: 10 }} />\n                <Radar\n                  name=\"Current Level\"\n                  dataKey=\"average\"\n                  stroke=\"#8b5cf6\"\n                  fill=\"#8b5cf6\"\n                  fillOpacity={0.3}\n                />\n                <Radar\n                  name=\"Required Level\"\n                  dataKey=\"requiredRating\" // Changed from 'required' to 'requiredRating' to match tooltip\n                  stroke=\"#4ade80\"\n                  fill=\"#4ade80\"\n                  fillOpacity={0.3}\n                />\n                <Tooltip content={<CustomTooltip />} />\n                <Legend />\n              </RadarChart>\n            </ResponsiveContainer>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nEND_CODE\n\n--- FILE: dashboard/staff/StaffSkillsView.tsx ---\nLANGUAGE: tsx\nBEGIN_CODE\nimport { CustomBarChart } from '@/components/ui/barchart';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Progress } from '@/components/ui/progress';\nimport { ScrollArea } from '@/components/ui/scroll-area';\nimport { getSkills } from '@/lib/api';\nimport { StaffSkill } from '@/types/staff';\nimport { useSession } from 'next-auth/react';\nimport { useEffect, useState } from 'react';\nimport { ResponsiveContainer } from 'recharts';\n\nconst calculateSummaryMetrics = (skills: StaffSkill[]) => {\n  const averageGap = Number(\n    (skills.reduce((sum, skill) => sum + skill.gap, 0) / skills.length).toFixed(2),\n  );\n\n  const skillsMeetingRequired = skills.filter(skill => skill.gap >= 0).length;\n  const skillsNeedingImprovement = skills.filter(skill => skill.gap < 0).length;\n  const largestGap = Math.max(...skills.map(skill => skill.gap));\n\n  return {\n    averageGap,\n    skillsMeetingRequired,\n    skillsNeedingImprovement,\n    largestGap,\n  };\n};\n\nconst getGapStatus = (gap: number) => {\n  if (gap >= 0)\n    return {\n      text: 'Proficient',\n      className: 'text-white bg-green-500 px-2 py-1 rounded-md text-sm font-medium',\n    };\n  return {\n    text: 'Developing',\n    className: 'text-white bg-orange-500 px-2 py-1 rounded-md text-sm font-medium',\n  };\n};\n\nexport default function StaffSkillsView() {\n  const { data: session } = useSession();\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [skills, setSkills] = useState<StaffSkill[]>([]);\n  const [selectedCategory, setSelectedCategory] = useState<'Technical Skills' | 'Soft Skills'>(\n    'Technical Skills',\n  );\n\n  useEffect(() => {\n    const fetchSkills = async () => {\n      if (!session?.user?.email) {\n        setError('User email not found in session');\n        return;\n      }\n      setLoading(true);\n      try {\n        const data = await getSkills();\n\n        // Narrowing type to check if data is SkillsResponse or BackendSkillResponse[]\n        if (Array.isArray(data)) {\n          // If data is an array of BackendSkillResponse\n          const allSkills = data.flatMap(employee => employee.skills);\n          setSkills(allSkills);\n        } else {\n          // If data is SkillsResponse\n          setSkills(data.skills);\n        }\n      } catch (err: unknown) {\n        const error = err instanceof Error ? err.message : 'Failed to fetch skills data';\n        console.error('Error fetching skills data:', err);\n        setError(error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    if (session) fetchSkills();\n  }, [session]);\n\n  const filteredSkills = skills.filter(skill => skill.category === selectedCategory);\n\n  const transformedChartData = filteredSkills.map(skill => ({\n    skill: skill.skill,\n    gap: skill.gap,\n    selfRating: skill.selfRating,\n    managerRating: skill.managerRating,\n    average: skill.average,\n    requiredRating: skill.requiredRating,\n    [skill.skill]: skill.average, // This is needed for the chart to work properly\n  }));\n\n  return (\n    <Card className=\"w-full\">\n      <CardHeader>\n        <div className=\"flex justify-between items-center\">\n          <CardTitle>Skills Gap Analysis</CardTitle>\n          <div className=\"space-x-2\">\n            <Button\n              variant={selectedCategory === 'Technical Skills' ? 'default' : 'outline'}\n              size=\"sm\"\n              onClick={() => setSelectedCategory('Technical Skills')}\n            >\n              Technical Skills\n            </Button>\n            <Button\n              variant={selectedCategory === 'Soft Skills' ? 'default' : 'outline'}\n              size=\"sm\"\n              onClick={() => setSelectedCategory('Soft Skills')}\n            >\n              Soft Skills\n            </Button>\n          </div>\n        </div>\n      </CardHeader>\n      <CardContent>\n        {loading ? (\n          <div>Loading...</div>\n        ) : error ? (\n          <div className=\"text-red-500\">{error}</div>\n        ) : (\n          <>\n            <div className=\"h-[450px] w-full\">\n              <ResponsiveContainer width=\"100%\" height={500}>\n                <CustomBarChart\n                  data={transformedChartData}\n                  xAxisKey=\"skill\"\n                  series={[\n                    { key: 'average', name: 'Current Level', color: '#4285f4' },\n                    { key: 'requiredRating', name: 'Required Level', color: '#666666' },\n                    { key: 'gap', name: 'Skill Gap', color: '#dc2626' },\n                  ]}\n                />\n              </ResponsiveContainer>\n            </div>\n            <div className=\"mt-8\">\n              <h3 className=\"text-md font-semibold mb-2\">Detailed Gap Analysis</h3>\n              <p className=\"text-sm text-gray-600 mb-4\">\n                Breakdown of your {selectedCategory.toLowerCase()}\n              </p>\n\n              <div className=\"rounded-md border\">\n                <div className=\"bg-white border-b\">\n                  <table className=\"w-full\">\n                    <thead>\n                      <tr className=\"text-left\">\n                        <th\n                          className=\"py-4 px-6 text-gray-600 font-normal w-[30%] text-sm\"\n                          style={{ paddingLeft: '24px' }}\n                        >\n                          Skill\n                        </th>\n                        <th className=\"py-4 px-6 text-gray-600 font-normal text-sm w-[20%]\">\n                          Self Rating\n                        </th>\n                        <th className=\"py-4 px-6 text-gray-600 font-normal text-sm w-[20%]\">\n                          Manager Rating\n                        </th>\n                        <th className=\"py-4 px-6 text-gray-600 font-normal text-sm w-[15%] text-center\">\n                          Required Level\n                        </th>\n                        <th className=\"py-4 px-6 text-gray-600 font-normal text-sm w-[15%]\">\n                          Status\n                        </th>\n                      </tr>\n                    </thead>\n                  </table>\n                </div>\n\n                <ScrollArea className=\"h-[360px]\">\n                  <div className=\"px-4\">\n                    <table className=\"w-full\">\n                      <tbody className=\"divide-y\">\n                        {filteredSkills.map((skill, index) => {\n                          const status = getGapStatus(skill.gap);\n                          return (\n                            <tr key={index} className=\"hover:bg-gray-50\">\n                              <td\n                                className=\"py-4 px-6 font-medium text-sm w-[30%]\"\n                                style={{ paddingLeft: '24px' }}\n                              >\n                                {skill.skill}\n                              </td>\n                              <td className=\"py-4 px-6 text-sm w-[20%]\">\n                                <div className=\"flex items-center gap-2\">\n                                  <Progress\n                                    value={(skill.selfRating / 6) * 100}\n                                    className=\"w-20 h-2\"\n                                  />\n                                  <span className=\"text-sm font-normal w-4\">\n                                    {skill.selfRating}\n                                  </span>\n                                </div>\n                              </td>\n                              <td className=\"py-4 px-6 text-sm w-[20%]\">\n                                <div className=\"flex items-center gap-2\">\n                                  <Progress\n                                    value={(skill.managerRating / 6) * 100}\n                                    className=\"w-20 h-2\"\n                                  />\n                                  <span className=\"text-sm font-normal w-4\">\n                                    {skill.managerRating}\n                                  </span>\n                                </div>\n                              </td>\n                              <td className=\"py-4 px-6 w-[15%] text-sm\">\n                                <div className=\"flex items-center justify-center gap-2\">\n                                  <Progress\n                                    value={(skill.requiredRating / 6) * 100}\n                                    className=\"w-20 h-2\"\n                                  />\n                                  <span className=\"text-sm font-normal w-4\">\n                                    {skill.requiredRating}\n                                  </span>\n                                </div>\n                              </td>\n                              <td className=\"py-4 px-6 text-sm w-[15%]\">\n                                <span className={status.className}>{status.text}</span>\n                              </td>\n                            </tr>\n                          );\n                        })}\n                      </tbody>\n                    </table>\n                  </div>\n                </ScrollArea>\n              </div>\n            </div>\n            <div className=\"mt-8\">\n              <h4 className=\"text-md font-semibold mb-2\">Summary</h4>\n              <div className=\"grid grid-cols-4 gap-4\">\n                <div className=\"bg-gray-50 rounded-lg p-4\">\n                  <p className=\"text-sm text-gray-600 mb-1\">Average Gap</p>\n                  <p className=\"text-2xl font-medium\">\n                    {calculateSummaryMetrics(filteredSkills).averageGap}\n                  </p>\n                </div>\n                <div className=\"bg-gray-50 rounded-lg p-4\">\n                  <p className=\"text-sm text-gray-600 mb-1\">Skills Meeting Required</p>\n                  <p className=\"text-2xl font-medium\">\n                    {calculateSummaryMetrics(filteredSkills).skillsMeetingRequired}\n                  </p>\n                </div>\n                <div className=\"bg-gray-50 rounded-lg p-4\">\n                  <p className=\"text-sm text-gray-600 mb-1\">Skills Needing Improvement</p>\n                  <p className=\"text-2xl font-medium\">\n                    {calculateSummaryMetrics(filteredSkills).skillsNeedingImprovement}\n                  </p>\n                </div>\n                <div className=\"bg-gray-50 rounded-lg p-4\">\n                  <p className=\"text-sm text-gray-600 mb-1\">Largest Gap</p>\n                  <p className=\"text-2xl font-medium\">\n                    {calculateSummaryMetrics(filteredSkills).largestGap}\n                  </p>\n                </div>\n              </div>\n            </div>\n          </>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n\nEND_CODE\n\n--- FILE: error/ErrorPage.tsx ---\nLANGUAGE: tsx\nBEGIN_CODE\n// components/ErrorPage.tsx\n'use client';\n\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';\nimport { AlertCircle } from 'lucide-react';\nimport { signOut } from 'next-auth/react';\n\ninterface ErrorPageProps {\n  statusCode: number | string;\n  message: string;\n}\n\nexport default function ErrorPage({ statusCode, message }: ErrorPageProps) {\n  const handleLogout = () => {\n    signOut({ callbackUrl: '/' });\n  };\n\n  return (\n    <div className=\"flex items-center justify-center min-h-screen bg-background\">\n      <Card className=\"w-[380px]\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2 text-destructive\">\n            <AlertCircle className=\"h-5 w-5\" />\n            Error {statusCode}\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <p className=\"text-muted-foreground\">{message}</p>\n        </CardContent>\n        <CardFooter>\n          <Button variant=\"outline\" className=\"w-full\" onClick={handleLogout}>\n            Return to Home\n          </Button>\n        </CardFooter>\n      </Card>\n    </div>\n  );\n}\n\nEND_CODE\n\n--- FILE: error/ErrorCard.tsx ---\nLANGUAGE: tsx\nBEGIN_CODE\n'use client';\n\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { AlertCircle } from 'lucide-react';\n\ninterface ErrorCardProps {\n  cardTitle: string;\n  description?: string;\n  status?: string | number;\n  message?: string;\n  error_code?: string;\n  refetch?: () => Promise<void>;\n}\n\nexport default function ErrorCard({\n  cardTitle,\n  description = 'Something went wrong!',\n  status = 'XXX',\n  message = 'Undetermined error message',\n  error_code = 'Undetermined error stack',\n  refetch,\n}: ErrorCardProps) {\n  return (\n    <Card className=\"w-full max-w-lg mx-auto border border-red-300 bg-red-50\">\n      {/* Header Section */}\n      <CardHeader className=\"flex items-center justify-between gap-4\">\n        <div>\n          <CardTitle className=\"text-lg font-semibold text-gray-800\">{cardTitle}</CardTitle>\n          <CardDescription className=\"text-sm text-gray-600\">{description}</CardDescription>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <p className=\"text-lg font-bold text-red-500\">Error {status}</p>\n          <AlertCircle className=\"h-6 w-6 text-red-500\" />\n        </div>\n      </CardHeader>\n\n      {/* Content Section */}\n      <CardContent className=\"space-y-4\">\n        <div className=\"flex flex-col gap-2\">\n          <p className=\"text-sm text-gray-700\">{message}</p>\n          <p className=\"text-sm text-gray-500\">\n            <span className=\"font-medium\">Code:</span> {error_code}\n          </p>\n        </div>\n        {refetch && (\n          <div className=\"flex justify-end\">\n            <Button\n              variant=\"destructive\"\n              size=\"sm\"\n              onClick={async () => {\n                await refetch();\n              }}\n            >\n              Retry\n            </Button>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n\nEND_CODE\n\n--- FILE: ReportTemplate.tsx ---\nLANGUAGE: tsx\nBEGIN_CODE\nimport { ReportData } from '@/components/ReportGenerator';\nimport { Badge } from '@/components/ui/badge';\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from '@/components/ui/card';\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from '@/components/ui/table';\n\ninterface ReportTemplateProps {\n  data: ReportData;\n}\n\nexport function ReportTemplate({ data }: ReportTemplateProps) {\n  return (\n    <Card className=\"w-full max-w-4xl mx-auto\">\n      <CardHeader>\n        <div className=\"flex justify-between items-start\">\n          <div>\n            <CardTitle className=\"text-2xl font-bold\">{data.title}</CardTitle>\n            <CardDescription>{data.description}</CardDescription>\n          </div>\n          <Badge variant=\"outline\">{data.date}</Badge>\n        </div>\n      </CardHeader>\n      <CardContent>\n        <div className=\"grid gap-6\">\n          {data.summary && (\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              {data.summary.map((item, index) => (\n                <Card key={index}>\n                  <CardHeader className=\"pb-2\">\n                    <CardDescription>{item.label}</CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <p className=\"text-2xl font-bold\">{item.value}</p>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          )}\n          {data.details && (\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Metric</TableHead>\n                  <TableHead>Value</TableHead>\n                  <TableHead>Change</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {data.details.map((item, index) => (\n                  <TableRow key={index}>\n                    <TableCell>{item.label}</TableCell>\n                    <TableCell>{item.value}</TableCell>\n                    <TableCell>\n                      {item.change !== undefined && (\n                        <span className={item.change >= 0 ? 'text-green-600' : 'text-red-600'}>\n                          {item.change >= 0 ? '+' : ''}\n                          {item.change}%\n                        </span>\n                      )}\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          )}\n        </div>\n      </CardContent>\n      <CardFooter className=\"text-sm text-muted-foreground\">\n        This report was generated automatically. For any questions, please contact the admin team.\n      </CardFooter>\n    </Card>\n  );\n}\n\nEND_CODE\n\n--- FILE: shared/AdminDashboardHeader.tsx ---\nLANGUAGE: tsx\nBEGIN_CODE\n'use client';\n\nimport { NotificationCenter } from '@/components/NotificationCenter';\nimport { ReportGenerator } from '@/components/ReportGenerator';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu';\nimport { Settings } from 'lucide-react';\nimport { signOut } from 'next-auth/react';\nimport { useState } from 'react';\n\nexport default function AdminDashboardHeader() {\n  const [lastSyncTime, setLastSyncTime] = useState('No sync data');\n\n  const handleLastNotificationDate = (date: string | null) => {\n    if (date) {\n      const formattedDate = new Date(date).toLocaleString('en-US', {\n        month: 'short',\n        day: 'numeric',\n        hour: 'numeric',\n        minute: 'numeric',\n        hour12: true,\n      });\n      setLastSyncTime(`Last synced: ${formattedDate}`);\n    }\n  };\n\n  const handleLogout = () => {\n    signOut({ callbackUrl: '/' });\n  };\n\n  return (\n    <header className=\"bg-white border-b\">\n      <div className=\"h-16 max-w-7xl mx-auto px-4 flex items-center justify-between\">\n        <div className=\"flex items-center space-x-4\">\n          <h1 className=\"text-xl font-bold text-gray-800\">Admin Dashboard</h1>\n          <Badge variant=\"secondary\">{lastSyncTime}</Badge>\n        </div>\n        <div className=\"flex items-center space-x-4\">\n          <ReportGenerator />\n          <NotificationCenter onLastNotificationDateChange={handleLastNotificationDate} />\n          <Button variant=\"ghost\" size=\"icon\">\n            <Settings className=\"h-5 w-5\" />\n          </Button>\n          <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n              <Button variant=\"secondary\" className=\"relative h-8 w-8 rounded-full\">\n                <div className=\"w-8 h-8 rounded-full flex items-center justify-center\">{`AD`}</div>\n              </Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent align=\"end\">\n              <DropdownMenuLabel>Admin User</DropdownMenuLabel>\n              <DropdownMenuItem>Settings</DropdownMenuItem>\n              <DropdownMenuSeparator />\n              <DropdownMenuItem onClick={handleLogout}>Logout</DropdownMenuItem>\n            </DropdownMenuContent>\n          </DropdownMenu>\n        </div>\n      </div>\n    </header>\n  );\n}\n\nEND_CODE\n\n--- FILE: shared/Navigation.tsx ---\nLANGUAGE: tsx\nBEGIN_CODE\n'use client';\n\nimport Link from 'next/link';\nimport { useSession, signOut } from 'next-auth/react';\n\nexport function Navigation() {\n  const { data: session } = useSession();\n\n  return (\n    <nav className=\"bg-gray-800 text-white p-4\">\n      <ul className=\"flex space-x-4\">\n        <li>\n          <Link href=\"/\">Home</Link>\n        </li>\n        {session?.user.role === 'staff' && (\n          <li>\n            <Link href=\"/dashboard/staff\">Staff Dashboard</Link>\n          </li>\n        )}\n        {session?.user.role === 'manager' && (\n          <li>\n            <Link href=\"/dashboard/manager\">Manager Dashboard</Link>\n          </li>\n        )}\n        {session?.user.role === 'admin' && (\n          <li>\n            <Link href=\"/dashboard/admin\">Admin Dashboard</Link>\n          </li>\n        )}\n        {session ? (\n          <li>\n            <button onClick={() => signOut()}>Sign out</button>\n          </li>\n        ) : (\n          <li>\n            <Link href=\"/auth/login\">Sign in</Link>\n          </li>\n        )}\n      </ul>\n    </nav>\n  );\n}\n\nEND_CODE\n\n--- FILE: shared/ManagerDashboardHeader.tsx ---\nLANGUAGE: tsx\nBEGIN_CODE\n'use client';\n\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { LogOut } from 'lucide-react';\nimport { signOut, useSession } from 'next-auth/react';\nimport { useEffect, useState } from 'react';\n\ninterface UserProfile {\n  firstName: string;\n  lastName: string;\n  designation: string;\n  businessUnit: string;\n  grade: string;\n  picture?: string;\n}\n\nexport default function ManagerHeader() {\n  const { data: session } = useSession();\n  const [userProfile, setUserProfile] = useState<UserProfile | null>(null);\n\n  const getInitials = (name: string = '') => {\n    return name\n      .split(' ')\n      .map(n => n[0])\n      .join('')\n      .toUpperCase();\n  };\n\n  useEffect(() => {\n    const fetchUserProfile = async () => {\n      if (session?.user?.email) {\n        try {\n          const response = await fetch('/api/users/profile');\n          if (response.ok) {\n            const data = await response.json();\n            setUserProfile(data);\n          } else {\n            console.error('Failed to fetch user profile');\n          }\n        } catch (error) {\n          console.error('Error fetching user profile:', error);\n        }\n      }\n    };\n\n    fetchUserProfile();\n  }, [session?.user?.email]);\n\n  const handleLogout = () => {\n    signOut({ callbackUrl: '/' });\n  };\n\n  const fullName = userProfile ? `${userProfile.firstName} ${userProfile.lastName}` : 'Loading...';\n\n  return (\n    <div className=\"flex justify-between items-center mb-6\">\n      <div className=\"flex items-center space-x-4\">\n        <Avatar className=\"h-20 w-20\">\n          {userProfile?.picture ? (\n            <AvatarImage\n              src={userProfile.picture}\n              alt={fullName}\n              width={120}\n              height={120}\n              onError={e => {\n                const imgElement = e.target as HTMLImageElement;\n                imgElement.style.display = 'none';\n              }}\n            />\n          ) : null}\n          <AvatarFallback className=\"text-lg\">{getInitials(fullName)}</AvatarFallback>\n        </Avatar>\n        <div>\n          <h1 className=\"text-3xl font-bold\">{fullName}</h1>\n          <p className=\"text-muted-foreground\">\n            {userProfile\n              ? `${userProfile.designation} - ${userProfile.businessUnit}`\n              : 'Loading...'}\n          </p>\n          <Badge className=\"mt-1\">{userProfile ? userProfile.grade : 'Loading...'}</Badge>\n        </div>\n      </div>\n      <div className=\"flex items-center space-x-4\">\n        <Button>Team Settings</Button>\n        <Button onClick={handleLogout}>\n          <LogOut className=\"mr-2 h-4 w-4\" />\n          Logout\n        </Button>\n      </div>\n    </div>\n  );\n}\n\nEND_CODE\n\n--- FILE: shared/StaffDashboardHeader.tsx ---\nLANGUAGE: tsx\nBEGIN_CODE\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { LogOut } from 'lucide-react';\nimport { signOut, useSession } from 'next-auth/react';\nimport { useEffect, useState } from 'react';\n\ninterface UserProfile {\n  firstName: string;\n  lastName: string;\n  designation: string;\n  businessUnit: string;\n  grade: string;\n  picture?: string;\n}\n\nexport default function StaffDashboardHeader() {\n  const { data: session } = useSession();\n  const [userProfile, setUserProfile] = useState<UserProfile | null>(null);\n\n  const getInitials = (name: string = '') => {\n    return name\n      .split(' ')\n      .map(n => n[0])\n      .join('')\n      .toUpperCase();\n  };\n\n  useEffect(() => {\n    const fetchUserProfile = async () => {\n      if (session?.user?.email) {\n        try {\n          // Fetch user profile\n          const response = await fetch('/api/users/profile');\n          if (response.ok) {\n            const data = await response.json();\n            setUserProfile(data);\n          } else {\n            console.error('Failed to fetch user profile');\n          }\n        } catch (error) {\n          console.error('Error fetching user profile:', error);\n        }\n      }\n    };\n\n    fetchUserProfile();\n  }, [session?.user?.email]);\n\n  const handleLogout = () => {\n    signOut({ callbackUrl: '/' });\n  };\n\n  const fullName = userProfile ? `${userProfile.firstName} ${userProfile.lastName}` : 'Loading...';\n\n  return (\n    <div className=\"flex justify-between items-center mb-6\">\n      <div className=\"flex items-center space-x-4\">\n        <Avatar className=\"h-20 w-20\">\n          {userProfile?.picture ? (\n            <AvatarImage\n              src={userProfile?.picture}\n              alt={fullName}\n              width={120}\n              height={120}\n              onError={e => {\n                const imgElement = e.target as HTMLImageElement;\n                imgElement.style.display = 'none';\n              }}\n            />\n          ) : null}\n          <AvatarFallback className=\"text-lg\">{getInitials(fullName)}</AvatarFallback>\n        </Avatar>\n\n        <div>\n          <h1 className=\"text-3xl font-bold\">{fullName}</h1>\n          <p className=\"text-muted-foreground\">\n            {userProfile\n              ? `${userProfile.designation} - ${userProfile.businessUnit}`\n              : 'Loading...'}\n          </p>\n          <Badge className=\"mt-1\">{userProfile ? userProfile.grade : 'Loading...'}</Badge>\n        </div>\n      </div>\n      <div className=\"flex items-center space-x-4\">\n        <Button>Update Profile</Button>\n        <Button onClick={handleLogout}>\n          <LogOut className=\"mr-2 h-4 w-4\" />\n          Logout\n        </Button>\n      </div>\n    </div>\n  );\n}\n\nEND_CODE\n\n--- FILE: TSC/TSCManager.tsx ---\nLANGUAGE: tsx\nBEGIN_CODE\n'use client';\n\nimport DeletePopup from '@/components/TSC/components/DeletePopup';\nimport ProficiencyTable from '@/components/TSC/components/ProficiencyTable';\nimport TSCForm from '@/components/TSC/components/TSCForm';\nimport TSCManagerHeader from '@/components/TSC/components/TSCManagerHeader';\nimport { BUSINESS_UNITS } from '@/components/TSC/constants';\nimport { useTSCFormValidation } from '@/components/TSC/hooks/useTSCFormValidation';\nimport { useTSCOperations } from '@/components/TSC/hooks/useTSCOperations';\nimport { TSC } from '@/components/TSC/types';\nimport { buildProficiency, getKeyFromValue, validateTaxonomyData } from '@/components/TSC/utils';\nimport {\n  Accordion,\n  AccordionContent,\n  AccordionItem,\n  AccordionTrigger,\n} from '@/components/ui/accordion';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { IBaseTaxonomy } from '@/lib/skills/types';\nimport { Pencil, Trash2 } from 'lucide-react';\nimport { useFilteredTSCs } from './hooks/useFilteredTSCs';\n\ninterface TSCManagerProps {\n  selectedBusinessUnit?: string;\n  data?: IBaseTaxonomy[];\n  searchQuery?: string;\n}\n\nexport default function TSCManager({\n  selectedBusinessUnit = BUSINESS_UNITS.ALL,\n  data,\n  searchQuery = '',\n}: TSCManagerProps) {\n  const newTSCs = data?.map(tsc => ({\n    id: tsc.docId,\n    businessUnit: 'QA',\n    category: tsc.category,\n    title: tsc.title,\n    description: tsc.description,\n    proficiencies: buildProficiency(tsc),\n    rangeOfApplication: tsc.rangeOfApplication,\n  })) as TSC[];\n\n  const buKey = getKeyFromValue(selectedBusinessUnit);\n  const { formErrors, setFormErrors, validateForm } = useTSCFormValidation();\n  const {\n    tscs,\n    isDialogOpen,\n    editingTSC,\n    deleteConfirmOpen,\n    setEditingTSC,\n    setIsDialogOpen,\n    setDeleteConfirmOpen,\n    handleCreate,\n    handleEdit,\n    handleDelete,\n    handleSave,\n    confirmDelete,\n  } = useTSCOperations(selectedBusinessUnit, newTSCs || ([] as TSC[]), setFormErrors, validateForm);\n\n  // Memoized filtering of TSCs based on business unit and search query\n  // const filteredTSCs = useMemo(() => {\n  //   let result = tscs;\n\n  //   // Filter by business unit\n  //   if (selectedBusinessUnit !== BUSINESS_UNITS.ALL) {\n  //     result = result.filter(tsc => tsc.businessUnit === selectedBusinessUnit.replace(' ', ''));\n  //   }\n\n  //   // Filter by search query\n  //   if (searchQuery) {\n  //     const normalizedQuery = searchQuery.toLowerCase().trim();\n  //     result = result.filter(tsc => tsc.title.toLowerCase().includes(normalizedQuery));\n  //   }\n\n  //   return result;\n  // }, [tscs, selectedBusinessUnit, searchQuery]);\n\n  const filteredTSCs = useFilteredTSCs(tscs, selectedBusinessUnit, searchQuery);\n\n  return (\n    <Card className=\"w-full\">\n      <TSCManagerHeader\n        buCode={buKey}\n        selectedBusinessUnit={selectedBusinessUnit}\n        handleCreate={handleCreate}\n      />\n      <CardContent>\n        <div className=\"space-y-4\">\n          {filteredTSCs.length === 0 ? (\n            <div className=\"text-center py-8 text-muted-foreground\">\n              {searchQuery\n                ? `No TSCs found matching \"${searchQuery}\"`\n                : 'No TSCs found for this business unit'}\n            </div>\n          ) : (\n            filteredTSCs.map(tsc => (\n              <Accordion type=\"single\" collapsible key={tsc.id}>\n                <AccordionItem value={tsc.id}>\n                  <AccordionTrigger>\n                    <div className=\"flex justify-between items-center w-full\">\n                      <div className=\"flex items-center space-x-4\">\n                        <span>{tsc.title || 'Untitled TSC'}</span>\n                        <span className=\"text-sm text-muted-foreground\">\n                          {BUSINESS_UNITS[tsc.businessUnit]}\n                        </span>\n                      </div>\n                      <div className=\"flex space-x-2\">\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={e => {\n                            e.stopPropagation();\n                            handleEdit(tsc);\n                          }}\n                          aria-label=\"Edit TSC\"\n                        >\n                          <Pencil className=\"h-4 w-4\" />\n                        </Button>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={e => {\n                            e.stopPropagation();\n                            handleDelete(tsc.id);\n                          }}\n                          aria-label=\"Delete TSC\"\n                        >\n                          <Trash2 className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                  </AccordionTrigger>\n                  <AccordionContent>\n                    <div className=\"space-y-6\">\n                      <div>\n                        <h3 className=\"text-lg font-semibold mb-2\">TSC Category</h3>\n                        <p>{tsc.category}</p>\n                      </div>\n                      <div>\n                        <h3 className=\"text-lg font-semibold mb-2\">TSC Description</h3>\n                        <p>{tsc.description}</p>\n                      </div>\n                      <div>\n                        <h3 className=\"text-lg font-semibold mb-2\">TSC Proficiency Description</h3>\n                        <ProficiencyTable proficiencies={tsc.proficiencies} />\n                      </div>\n                      <div>\n                        <h3 className=\"text-lg font-semibold mb-2\">Range of Application</h3>\n                        {tsc.rangeOfApplication.length > 0 &&\n                        !validateTaxonomyData(tsc.rangeOfApplication[0]) ? (\n                          <ul className=\"list-disc pl-5 space-y-1\">\n                            {tsc.rangeOfApplication.map((item, index) => (\n                              <li key={index}>{item}</li>\n                            ))}\n                          </ul>\n                        ) : (\n                          <p>No range of application specified</p>\n                        )}\n                      </div>\n                    </div>\n                  </AccordionContent>\n                </AccordionItem>\n              </Accordion>\n            ))\n          )}\n        </div>\n      </CardContent>\n\n      <TSCForm\n        isOpen={isDialogOpen}\n        setIsOpen={setIsDialogOpen}\n        targetTSC={editingTSC}\n        setTargetTSC={setEditingTSC}\n        formErrors={formErrors}\n        handleSave={handleSave}\n      />\n      <DeletePopup\n        open={deleteConfirmOpen}\n        setOpen={setDeleteConfirmOpen}\n        onConfirm={confirmDelete}\n      />\n    </Card>\n  );\n}\n\nEND_CODE\n\n--- FILE: TSC/types.ts ---\nLANGUAGE: ts\nBEGIN_CODE\nimport { BUSINESS_UNITS } from '@/components/TSC/constants';\n\nexport interface TSCProficiency {\n  level: string;\n  code: string;\n  description: string;\n  knowledge: string[];\n  abilities: string[];\n}\n\nexport interface TSC {\n  id: string;\n  businessUnit: BusinessUnit;\n  category: string;\n  title: string;\n  description: string;\n  proficiencies: TSCProficiency[];\n  rangeOfApplication: string[];\n}\n\nexport const emptyTSC: Omit<TSC, 'id' | 'businessUnit'> = {\n  category: '',\n  title: '',\n  description: '',\n  proficiencies: [],\n  rangeOfApplication: [],\n};\n\nexport const emptyProficiency: TSCProficiency = {\n  level: '',\n  code: '',\n  description: '',\n  knowledge: [],\n  abilities: [],\n};\n\nexport type BusinessUnit = keyof typeof BUSINESS_UNITS;\n\nEND_CODE\n\n--- FILE: TSC/constants.ts ---\nLANGUAGE: ts\nBEGIN_CODE\nexport const BUSINESS_UNITS = {\n  ALL: 'All Business Units',\n  ADM: 'Administrative Services',\n  AI: 'AI Labs',\n  CLD: 'Cloud',\n  DATA: 'Big Data',\n  FIN: 'Finance & Accounting',\n  HR: 'Human Resources',\n  IT: 'IT Service Management',\n  MKT: 'Marketing',\n  PMO: 'Project Management Office',\n  QA: 'Software QA Services',\n  SLS: 'Sales',\n  SW: 'Software Services',\n  VS: 'Venture Studio',\n};\n\nexport const PROFICIENCY_LEVELS = ['1', '2', '3', '4', '5', '6'];\n\nEND_CODE\n\n--- FILE: TSC/hooks/useTSCManager.ts ---\nLANGUAGE: ts\nBEGIN_CODE\nimport type { BusinessUnit, TSC } from '@/components/TSC/types';\nimport { skillsApi } from '@/lib/api/client';\nimport { useMutation, useQuery } from '@/lib/api/hooks';\nimport { IBaseTaxonomy, IBulkUpsertDTO } from '@/lib/skills/types';\n\nexport function useTSCManager(businessUnit: BusinessUnit) {\n  const TAXONOMY_BASE_URL = '/taxonomy';\n\n  const { data, error, isLoading, refetch } = useQuery<IBaseTaxonomy[]>(\n    skillsApi,\n    `${TAXONOMY_BASE_URL}?businessUnit=${businessUnit}`,\n    {\n      requiresAuth: true,\n      revalidate: 3600,\n    },\n  );\n\n  // WIP\n  const { mutate: createTSC, isLoading: isCreating } = useMutation<TSC, IBulkUpsertDTO>(\n    skillsApi,\n    '/tscs',\n    'POST',\n  );\n\n  // WIP\n  const { mutate: updateTSC, isLoading: isUpdating } = useMutation<TSC, Partial<TSC>>(\n    skillsApi,\n    '/tscs',\n    'PUT',\n  );\n\n  // WIP\n  const { mutate: deleteTSC, isLoading: isDeleting } = useMutation<void, string>(\n    skillsApi,\n    '/tscs',\n    'DELETE',\n  );\n\n  // data?.filter(tsc => (businessUnit === 'ALL' ? true : tsc.businessUnit === businessUnit)),\n  return {\n    data,\n    error,\n    isLoading,\n    isCreating,\n    isUpdating,\n    isDeleting,\n    createTSC,\n    updateTSC,\n    deleteTSC,\n    refetch,\n  };\n}\n\nEND_CODE\n\n--- FILE: TSC/hooks/useFilteredTSCs.ts ---\nLANGUAGE: ts\nBEGIN_CODE\nimport { TSC } from '@/components/TSC/types';\nimport { useMemo } from 'react';\nimport { getKeyFromValue, getValueFromKey } from '../utils';\n\nexport const useFilteredTSCs = (\n  tscs: TSC[],\n  selectedBusinessUnit: string,\n  searchQuery?: string,\n) => {\n  return useMemo(\n    () =>\n      selectedBusinessUnit === getValueFromKey('ALL')\n        ? tscs.filter(tsc =>\n            tsc.title.toLowerCase().includes(searchQuery ? searchQuery.trim().toLowerCase() : ''),\n          )\n        : searchQuery\n          ? filterBU(tscs, selectedBusinessUnit).filter(tsc =>\n              tsc.title.toLowerCase().includes(searchQuery.trim().toLowerCase()),\n            )\n          : filterBU(tscs, selectedBusinessUnit),\n    [tscs, selectedBusinessUnit, searchQuery],\n  );\n};\n\nfunction filterBU(tscs: TSC[], selectedBusinessUnit: string): TSC[] {\n  return tscs.filter(tsc => tsc.businessUnit === getKeyFromValue(selectedBusinessUnit));\n}\n\nEND_CODE\n\n--- FILE: TSC/hooks/useTSCFormValidation.ts ---\nLANGUAGE: ts\nBEGIN_CODE\nimport { TSC, TSCProficiency } from '@/components/TSC/types';\nimport { useCallback, useState } from 'react';\n\nexport const useTSCFormValidation = () => {\n  const [formErrors, setFormErrors] = useState<{ [key: string]: string }>({});\n\n  const validateForm = useCallback((tsc: TSC): boolean => {\n    const errors: { [key: string]: string } = {};\n    if (!tsc.title.trim()) errors.title = 'Title is required';\n    if (!tsc.category.trim()) errors.category = 'Category is required';\n    if (!tsc.description.trim()) errors.description = 'Description is required';\n    if (tsc.proficiencies.length === 0)\n      errors.proficiencies = 'At least one proficiency level is required';\n\n    tsc.proficiencies.forEach((prof: TSCProficiency, index: number) => {\n      if (!prof.code.trim()) errors[`proficiency_${index}_code`] = 'Code is required';\n      if (!prof.description.trim())\n        errors[`proficiency_${index}_description`] = 'Description is required';\n    });\n\n    setFormErrors(errors);\n    return Object.keys(errors).length === 0;\n  }, []);\n\n  return { formErrors, validateForm, setFormErrors };\n};\n\nEND_CODE\n\n--- FILE: TSC/hooks/useTSCOperations.ts ---\nLANGUAGE: ts\nBEGIN_CODE\nimport { TSC, emptyTSC } from '@/components/TSC/types';\nimport { getKeyFromValue } from '@/components/TSC/utils';\nimport { Dispatch, SetStateAction, useCallback, useState } from 'react';\n\nexport const useTSCOperations = (\n  selectedBusinessUnit: string,\n  initialTSCs: TSC[],\n  setFormErrors: Dispatch<SetStateAction<{ [key: string]: string }>>,\n  validateForm: (tsc: TSC) => boolean,\n) => {\n  const [tscs, setTSCs] = useState<TSC[]>(initialTSCs);\n  const [editingTSC, setEditingTSC] = useState<TSC | null>(null);\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [deleteConfirmOpen, setDeleteConfirmOpen] = useState(false);\n  const [tscToDelete, setTscToDelete] = useState<string | null>(null);\n\n  const handleCreate = useCallback(() => {\n    setFormErrors({});\n    setEditingTSC({ ...emptyTSC, id: '', businessUnit: getKeyFromValue(selectedBusinessUnit) });\n    setIsDialogOpen(true);\n  }, [selectedBusinessUnit]);\n\n  const handleEdit = useCallback((tsc: TSC) => {\n    setFormErrors({});\n    setEditingTSC(tsc);\n    setIsDialogOpen(true);\n  }, []);\n\n  const handleDelete = useCallback((id: string) => {\n    setTscToDelete(id);\n    setDeleteConfirmOpen(true);\n  }, []);\n\n  const confirmDelete = useCallback(() => {\n    if (tscToDelete !== null) {\n      setTSCs(prev => prev.filter(tsc => tsc.id !== tscToDelete));\n      setDeleteConfirmOpen(false);\n      setTscToDelete(null);\n    }\n  }, [tscToDelete]);\n\n  const handleSave = useCallback(() => {\n    if (editingTSC && validateForm(editingTSC)) {\n      const maxId = Math.max(...tscs.map(tsc => parseInt(tsc.id)), 0);\n      const updatedTSCs = editingTSC.id\n        ? tscs.map(tsc => (tsc.id === editingTSC.id ? editingTSC : tsc))\n        : [...tscs, { ...editingTSC, id: (maxId + 1).toString() }];\n      setTSCs(updatedTSCs);\n      setEditingTSC(null);\n      setIsDialogOpen(false);\n      setFormErrors({});\n    }\n  }, [editingTSC, tscs]);\n\n  return {\n    tscs,\n    setTSCs,\n    editingTSC,\n    isDialogOpen,\n    deleteConfirmOpen,\n    handleCreate,\n    handleEdit,\n    handleDelete,\n    confirmDelete,\n    handleSave,\n    setEditingTSC,\n    setIsDialogOpen,\n    setDeleteConfirmOpen,\n  };\n};\n\nEND_CODE\n\n--- FILE: TSC/utils.ts ---\nLANGUAGE: ts\nBEGIN_CODE\nimport { BUSINESS_UNITS } from '@/components/TSC/constants';\nimport { BusinessUnit, TSCProficiency } from '@/components/TSC/types';\nimport { IBaseTaxonomy } from '@/lib/skills/types';\n\nexport function validateTaxonomyData(text: string): boolean {\n  const regex = /^(n\\/a|)$/i; // This regex matches \"N/A\" (case-insensitive) or an empty string\n\n  return regex.test(text) || text.trim().length === 0;\n}\n\nexport function getKeyFromValue(value: string): BusinessUnit {\n  return Object.keys(BUSINESS_UNITS).find(key => BUSINESS_UNITS[key as BusinessUnit] === value) as\n    | BusinessUnit\n    | 'ALL';\n}\n\nexport function getValueFromKey(key: BusinessUnit): string {\n  return BUSINESS_UNITS[key];\n}\n\nexport function buildRecord(tscData: Record<string, string[]>, index: string): string[] {\n  const knowledges: string[] = [];\n\n  tscData[index].forEach(data => {\n    if (validateTaxonomyData(data)) {\n      return;\n    }\n    knowledges.push(data);\n  });\n\n  return knowledges;\n}\n\nexport function buildProficiency(tsc: IBaseTaxonomy): TSCProficiency[] {\n  const proficiencies: TSCProficiency[] = [];\n\n  Object.entries(tsc.proficiencyDescription).forEach(([key, value]) => {\n    proficiencies.push({\n      level: key.toString().at(-1),\n      code: validateTaxonomyData(value[0]) ? '' : value[0],\n      description: validateTaxonomyData(value[1]) ? '' : value[1],\n      knowledge: buildRecord(tsc.knowledge, key),\n      abilities: buildRecord(tsc.abilities, key),\n    } as TSCProficiency);\n  });\n\n  return proficiencies;\n}\n\nEND_CODE\n\n--- FILE: TSC/components/ProficiencyTable.tsx ---\nLANGUAGE: tsx\nBEGIN_CODE\n'use client';\n\nimport { PROFICIENCY_LEVELS } from '@/components/TSC/constants';\nimport { TSCProficiency } from '@/components/TSC/types';\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from '@/components/ui/table';\n\nexport default function ProficiencyTable({ proficiencies }: { proficiencies: TSCProficiency[] }) {\n  return (\n    <div className=\"space-y-8\">\n      <Table>\n        <TableHeader>\n          <TableRow>\n            {PROFICIENCY_LEVELS.map(level => (\n              <TableHead key={level} className=\"text-center\">\n                Level {level}\n              </TableHead>\n            ))}\n          </TableRow>\n        </TableHeader>\n        <TableBody>\n          <TableRow>\n            {PROFICIENCY_LEVELS.map(level => {\n              const prof = proficiencies.find(p => p.level === level);\n              return (\n                <TableCell key={level} className=\"align-top\">\n                  {prof && (\n                    <div className=\"space-y-2\">\n                      <div className=\"font-medium\">{prof.code}</div>\n                      <div>{prof.description}</div>\n                    </div>\n                  )}\n                </TableCell>\n              );\n            })}\n          </TableRow>\n        </TableBody>\n      </Table>\n\n      <div>\n        <h4 className=\"font-semibold mb-2\">Knowledge</h4>\n        <Table>\n          <TableHeader>\n            <TableRow>\n              {PROFICIENCY_LEVELS.map(level => (\n                <TableHead key={level} className=\"text-center\">\n                  Level {level}\n                </TableHead>\n              ))}\n            </TableRow>\n          </TableHeader>\n          <TableBody>\n            <TableRow>\n              {PROFICIENCY_LEVELS.map(level => {\n                const prof = proficiencies.find(p => p.level === level);\n                return (\n                  <TableCell key={level} className=\"align-top\">\n                    {prof?.knowledge && (\n                      <ul className=\"list-disc pl-5 space-y-1\">\n                        {prof.knowledge.map((item, index) => (\n                          <li key={index}>{item}</li>\n                        ))}\n                      </ul>\n                    )}\n                  </TableCell>\n                );\n              })}\n            </TableRow>\n          </TableBody>\n        </Table>\n      </div>\n\n      <div>\n        <h4 className=\"font-semibold mb-2\">Abilities</h4>\n        <Table>\n          <TableHeader>\n            <TableRow>\n              {PROFICIENCY_LEVELS.map(level => (\n                <TableHead key={level} className=\"text-center\">\n                  Level {level}\n                </TableHead>\n              ))}\n            </TableRow>\n          </TableHeader>\n          <TableBody>\n            <TableRow>\n              {PROFICIENCY_LEVELS.map(level => {\n                const prof = proficiencies.find(p => p.level === level);\n                return (\n                  <TableCell key={level} className=\"align-top\">\n                    {prof?.abilities && (\n                      <ul className=\"list-disc pl-5 space-y-1\">\n                        {prof.abilities.map((item, index) => (\n                          <li key={index}>{item}</li>\n                        ))}\n                      </ul>\n                    )}\n                  </TableCell>\n                );\n              })}\n            </TableRow>\n          </TableBody>\n        </Table>\n      </div>\n    </div>\n  );\n}\n\nEND_CODE\n\n--- FILE: TSC/components/TSCManagerHeader.tsx ---\nLANGUAGE: tsx\nBEGIN_CODE\n'use client';\n\nimport { BusinessUnit } from '@/components/TSC/types';\nimport { Button } from '@/components/ui/button';\nimport { CardHeader, CardTitle } from '@/components/ui/card';\nimport { PlusCircle } from 'lucide-react';\n\ninterface TSCManagerHeaderProps {\n  buCode: BusinessUnit;\n  selectedBusinessUnit: string;\n  handleCreate: () => void;\n}\n\nexport default function TSCManagerHeader({\n  buCode,\n  selectedBusinessUnit,\n  handleCreate,\n}: TSCManagerHeaderProps) {\n  return (\n    <CardHeader className=\"flex flex-row items-center justify-between\">\n      <CardTitle>\n        TSC Manager\n        {buCode !== 'ALL' && ` - ${selectedBusinessUnit}`}\n      </CardTitle>\n      <Button onClick={handleCreate} disabled={buCode === 'ALL'}>\n        <PlusCircle className=\"mr-2 h-4 w-4\" />\n        Create New TSC\n      </Button>\n    </CardHeader>\n  );\n}\n\nEND_CODE\n\n--- FILE: TSC/components/DeletePopup.tsx ---\nLANGUAGE: tsx\nBEGIN_CODE\n'use client';\n\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from '@/components/ui/alert-dialog';\nimport { AlertTriangle } from 'lucide-react';\nimport { Dispatch, SetStateAction } from 'react';\n\ninterface DeletePopupProps {\n  open: boolean;\n  setOpen: Dispatch<SetStateAction<boolean>>;\n  onConfirm: () => void;\n}\n\nexport default function DeletePopup({ open, setOpen, onConfirm }: DeletePopupProps) {\n  return (\n    <AlertDialog open={open} onOpenChange={setOpen}>\n      <AlertDialogContent>\n        <AlertDialogHeader>\n          <AlertDialogTitle>Delete TSC</AlertDialogTitle>\n          <AlertDialogDescription>\n            Are you sure you want to delete this TSC? This action cannot be undone.\n          </AlertDialogDescription>\n        </AlertDialogHeader>\n        <AlertDialogFooter>\n          <AlertDialogCancel>Cancel</AlertDialogCancel>\n          <AlertDialogAction onClick={onConfirm}>\n            <AlertTriangle className=\"mr-2 h-4 w-4\" />\n            Delete\n          </AlertDialogAction>\n        </AlertDialogFooter>\n      </AlertDialogContent>\n    </AlertDialog>\n  );\n}\n\nEND_CODE\n\n--- FILE: TSC/components/TSCForm.tsx ---\nLANGUAGE: tsx\nBEGIN_CODE\n'use client';\nimport { PROFICIENCY_LEVELS } from '@/components/TSC/constants';\nimport { emptyProficiency, TSC } from '@/components/TSC/types';\nimport { Button } from '@/components/ui/button';\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from '@/components/ui/dialog';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Save, Trash2 } from 'lucide-react';\nimport { Dispatch, SetStateAction } from 'react';\n\ninterface TSCFormProps {\n  isOpen: boolean;\n  setIsOpen: Dispatch<SetStateAction<boolean>>;\n  targetTSC: TSC | null; // null equates to new tsc\n  setTargetTSC: Dispatch<SetStateAction<TSC | null>>;\n  formErrors: { [key: string]: string };\n  handleSave: () => void;\n}\n\nexport default function TSCForm({\n  isOpen,\n  setIsOpen,\n  targetTSC,\n  setTargetTSC,\n  formErrors,\n  handleSave,\n}: TSCFormProps) {\n  return (\n    <Dialog open={isOpen} onOpenChange={setIsOpen}>\n      <DialogContent className=\"max-w-[90vw] max-h-[80vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle>{targetTSC?.id ? 'Edit TSC' : 'Create New TSC'}</DialogTitle>\n          <DialogDescription>\n            {targetTSC?.id ? 'Edit the TSC details below.' : 'Enter the details for the new TSC.'}\n          </DialogDescription>\n        </DialogHeader>\n        {targetTSC && (\n          <div className=\"space-y-6\">\n            <div>\n              <Label htmlFor=\"title\">Title</Label>\n              <Input\n                id=\"title\"\n                value={targetTSC.title}\n                onChange={e => setTargetTSC({ ...targetTSC, title: e.target.value })}\n                className={formErrors.title ? 'border-red-500' : ''}\n              />\n              {formErrors.title && <p className=\"text-sm text-red-500 mt-1\">{formErrors.title}</p>}\n            </div>\n            <div>\n              <Label htmlFor=\"category\">Category</Label>\n              <Input\n                id=\"category\"\n                value={targetTSC.category}\n                onChange={e => setTargetTSC({ ...targetTSC, category: e.target.value })}\n                className={formErrors.category ? 'border-red-500' : ''}\n              />\n              {formErrors.category && (\n                <p className=\"text-sm text-red-500 mt-1\">{formErrors.category}</p>\n              )}\n            </div>\n            <div>\n              <Label htmlFor=\"description\">Description</Label>\n              <Textarea\n                id=\"description\"\n                value={targetTSC.description}\n                onChange={e => setTargetTSC({ ...targetTSC, description: e.target.value })}\n                className={formErrors.description ? 'border-red-500' : ''}\n              />\n              {formErrors.description && (\n                <p className=\"text-sm text-red-500 mt-1\">{formErrors.description}</p>\n              )}\n            </div>\n            <div>\n              <Label>Proficiencies</Label>\n              {formErrors.proficiencies && (\n                <p className=\"text-sm text-red-500 mt-1\">{formErrors.proficiencies}</p>\n              )}\n              <div className=\"grid grid-cols-6 gap-4 mt-2\">\n                {PROFICIENCY_LEVELS.map(level => {\n                  const prof = targetTSC.proficiencies.find(p => p.level === level) || {\n                    ...emptyProficiency,\n                    level,\n                  };\n                  return (\n                    <div key={level} className=\"space-y-4\">\n                      <div className=\"font-medium text-center\">Level {level}</div>\n                      <div className=\"space-y-2\">\n                        <Input\n                          placeholder=\"Code\"\n                          value={prof.code}\n                          onChange={e => {\n                            const newProficiencies = [...targetTSC.proficiencies];\n                            const index = newProficiencies.findIndex(p => p.level === level);\n                            if (index >= 0) {\n                              newProficiencies[index] = {\n                                ...newProficiencies[index],\n                                code: e.target.value,\n                              };\n                            } else {\n                              newProficiencies.push({\n                                ...emptyProficiency,\n                                level,\n                                code: e.target.value,\n                              });\n                            }\n                            setTargetTSC({ ...targetTSC, proficiencies: newProficiencies });\n                          }}\n                          className={\n                            formErrors[`proficiency_${level}_code`] ? 'border-red-500' : ''\n                          }\n                        />\n                        {formErrors[`proficiency_${level}_code`] && (\n                          <p className=\"text-sm text-red-500\">\n                            {formErrors[`proficiency_${level}_code`]}\n                          </p>\n                        )}\n                        <Textarea\n                          placeholder=\"Description\"\n                          value={prof.description}\n                          onChange={e => {\n                            const newProficiencies = [...targetTSC.proficiencies];\n                            const index = newProficiencies.findIndex(p => p.level === level);\n                            if (index >= 0) {\n                              newProficiencies[index] = {\n                                ...newProficiencies[index],\n                                description: e.target.value,\n                              };\n                            } else {\n                              newProficiencies.push({\n                                ...emptyProficiency,\n                                level,\n                                description: e.target.value,\n                              });\n                            }\n                            setTargetTSC({ ...targetTSC, proficiencies: newProficiencies });\n                          }}\n                          className={\n                            formErrors[`proficiency_${level}_description`] ? 'border-red-500' : ''\n                          }\n                        />\n                        {formErrors[`proficiency_${level}_description`] && (\n                          <p className=\"text-sm text-red-500\">\n                            {formErrors[`proficiency_${level}_description`]}\n                          </p>\n                        )}\n                        <div>\n                          <Label className=\"text-sm\">Knowledge</Label>\n                          {prof.knowledge?.map((item, index) => (\n                            <div key={index} className=\"flex space-x-2 mb-2\">\n                              <Input\n                                value={item}\n                                onChange={e => {\n                                  const newProficiencies = [...targetTSC.proficiencies];\n                                  const profIndex = newProficiencies.findIndex(\n                                    p => p.level === level,\n                                  );\n                                  if (profIndex >= 0) {\n                                    const newKnowledge = [...newProficiencies[profIndex].knowledge];\n                                    newKnowledge[index] = e.target.value;\n                                    newProficiencies[profIndex] = {\n                                      ...newProficiencies[profIndex],\n                                      knowledge: newKnowledge,\n                                    };\n                                  } else {\n                                    const newKnowledge = [e.target.value];\n                                    newProficiencies.push({\n                                      ...emptyProficiency,\n                                      level,\n                                      knowledge: newKnowledge,\n                                    });\n                                  }\n                                  setTargetTSC({\n                                    ...targetTSC,\n                                    proficiencies: newProficiencies,\n                                  });\n                                }}\n                              />\n                              <Button\n                                type=\"button\"\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                onClick={() => {\n                                  const newProficiencies = [...targetTSC.proficiencies];\n                                  const profIndex = newProficiencies.findIndex(\n                                    p => p.level === level,\n                                  );\n                                  if (profIndex >= 0) {\n                                    const newKnowledge = newProficiencies[\n                                      profIndex\n                                    ].knowledge.filter((_, i) => i !== index);\n                                    newProficiencies[profIndex] = {\n                                      ...newProficiencies[profIndex],\n                                      knowledge: newKnowledge,\n                                    };\n                                    setTargetTSC({\n                                      ...targetTSC,\n                                      proficiencies: newProficiencies,\n                                    });\n                                  }\n                                }}\n                                aria-label=\"Remove knowledge item\"\n                              >\n                                <Trash2 className=\"h-4 w-4\" />\n                              </Button>\n                            </div>\n                          ))}\n                          <Button\n                            type=\"button\"\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => {\n                              const newProficiencies = [...targetTSC.proficiencies];\n                              const index = newProficiencies.findIndex(p => p.level === level);\n                              if (index >= 0) {\n                                newProficiencies[index] = {\n                                  ...newProficiencies[index],\n                                  knowledge: [...(newProficiencies[index].knowledge || []), ''],\n                                };\n                              } else {\n                                newProficiencies.push({\n                                  ...emptyProficiency,\n                                  level,\n                                  knowledge: [''],\n                                });\n                              }\n                              setTargetTSC({ ...targetTSC, proficiencies: newProficiencies });\n                            }}\n                          >\n                            Add Knowledge\n                          </Button>\n                        </div>\n                        <div>\n                          <Label className=\"text-sm\">Abilities</Label>\n                          {prof.abilities?.map((item, index) => (\n                            <div key={index} className=\"flex space-x-2 mb-2\">\n                              <Input\n                                value={item}\n                                onChange={e => {\n                                  const newProficiencies = [...targetTSC.proficiencies];\n                                  const profIndex = newProficiencies.findIndex(\n                                    p => p.level === level,\n                                  );\n                                  if (profIndex >= 0) {\n                                    const newAbilities = [...newProficiencies[profIndex].abilities];\n                                    newAbilities[index] = e.target.value;\n                                    newProficiencies[profIndex] = {\n                                      ...newProficiencies[profIndex],\n                                      abilities: newAbilities,\n                                    };\n                                  } else {\n                                    const newAbilities = [e.target.value];\n                                    newProficiencies.push({\n                                      ...emptyProficiency,\n                                      level,\n                                      abilities: newAbilities,\n                                    });\n                                  }\n                                  setTargetTSC({\n                                    ...targetTSC,\n                                    proficiencies: newProficiencies,\n                                  });\n                                }}\n                              />\n                              <Button\n                                type=\"button\"\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                onClick={() => {\n                                  const newProficiencies = [...targetTSC.proficiencies];\n                                  const profIndex = newProficiencies.findIndex(\n                                    p => p.level === level,\n                                  );\n                                  if (profIndex >= 0) {\n                                    const newAbilities = newProficiencies[\n                                      profIndex\n                                    ].abilities.filter((_, i) => i !== index);\n                                    newProficiencies[profIndex] = {\n                                      ...newProficiencies[profIndex],\n                                      abilities: newAbilities,\n                                    };\n                                    setTargetTSC({\n                                      ...targetTSC,\n                                      proficiencies: newProficiencies,\n                                    });\n                                  }\n                                }}\n                                aria-label=\"Remove ability item\"\n                              >\n                                <Trash2 className=\"h-4 w-4\" />\n                              </Button>\n                            </div>\n                          ))}\n                          <Button\n                            type=\"button\"\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => {\n                              const newProficiencies = [...targetTSC.proficiencies];\n                              const index = newProficiencies.findIndex(p => p.level === level);\n                              if (index >= 0) {\n                                newProficiencies[index] = {\n                                  ...newProficiencies[index],\n                                  abilities: [...(newProficiencies[index].abilities || []), ''],\n                                };\n                              } else {\n                                newProficiencies.push({\n                                  ...emptyProficiency,\n                                  level,\n                                  abilities: [''],\n                                });\n                              }\n                              setTargetTSC({ ...targetTSC, proficiencies: newProficiencies });\n                            }}\n                          >\n                            Add Ability\n                          </Button>\n                        </div>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            </div>\n            <div>\n              <Label>Range of Application</Label>\n              {targetTSC.rangeOfApplication.map((item, index) => (\n                <div key={index} className=\"flex space-x-2 mb-2\">\n                  <Input\n                    value={item}\n                    onChange={e => {\n                      const newRange = [...targetTSC.rangeOfApplication];\n                      newRange[index] = e.target.value;\n                      setTargetTSC({ ...targetTSC, rangeOfApplication: newRange });\n                    }}\n                  />\n                  <Button\n                    type=\"button\"\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => {\n                      const newRange = targetTSC.rangeOfApplication.filter((_, i) => i !== index);\n                      setTargetTSC({ ...targetTSC, rangeOfApplication: newRange });\n                    }}\n                    aria-label=\"Remove range of application item\"\n                  >\n                    <Trash2 className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              ))}\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() =>\n                  setTargetTSC({\n                    ...targetTSC,\n                    rangeOfApplication: [...targetTSC.rangeOfApplication, ''],\n                  })\n                }\n              >\n                Add Range of Application Item\n              </Button>\n            </div>\n            <DialogFooter>\n              <Button variant=\"outline\" onClick={() => setIsOpen(false)}>\n                Cancel\n              </Button>\n              <Button onClick={handleSave}>\n                <Save className=\"mr-2 h-4 w-4\" />\n                Save TSC\n              </Button>\n            </DialogFooter>\n          </div>\n        )}\n      </DialogContent>\n    </Dialog>\n  );\n}\n\nEND_CODE\n\n--- FILE: NotificationCenter.tsx ---\nLANGUAGE: tsx\nBEGIN_CODE\n'use client';\n\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu';\nimport { Bell, Circle } from 'lucide-react';\nimport { useEffect, useState } from 'react';\nimport io from 'socket.io-client';\n\nconst SOCKET_URL = process.env.NEXT_PUBLIC_INTEGRATION_SERVICE_URL || 'http://localhost:3004';\n\ninterface Notification {\n  _id: string;\n  workflow: {\n    id: string;\n    name: string;\n  };\n  execution: {\n    status: 'success' | 'error' | 'running';\n    startedAt: string;\n    finishedAt?: string;\n  };\n  read: boolean;\n  readAt?: string;\n}\n\ninterface NotificationCenterProps {\n  onLastNotificationDateChange?: (date: string | null) => void;\n}\n\nexport function NotificationCenter({ onLastNotificationDateChange }: NotificationCenterProps) {\n  const [notifications, setNotifications] = useState<Notification[]>([]);\n  const [connectionStatus, setConnectionStatus] = useState<'connected' | 'disconnected'>(\n    'disconnected',\n  );\n\n  const unreadCount = notifications.filter(n => !n.read).length;\n\n  // Update parent component whenever notifications change\n  useEffect(() => {\n    const mostRecentDate = notifications.length > 0 ? notifications[0].execution.startedAt : null;\n\n    onLastNotificationDateChange?.(mostRecentDate);\n  }, [notifications, onLastNotificationDateChange]);\n\n  useEffect(() => {\n    const socket = io(`${SOCKET_URL}/notifications`, {\n      withCredentials: true,\n      transports: ['websocket', 'polling'],\n    });\n\n    socket.on('connect', () => {\n      console.log('Connected to notification service');\n      setConnectionStatus('connected');\n    });\n\n    socket.on('disconnect', () => {\n      console.log('Disconnected from notification service');\n      setConnectionStatus('disconnected');\n    });\n\n    socket.on('notifications:init', (data: { notifications: Notification[] }) => {\n      console.log('Initial notifications:', data);\n      setNotifications(data.notifications);\n    });\n\n    socket.on('notification:new', (notification: Notification) => {\n      console.log('New notification:', notification);\n      setNotifications(prev => [notification, ...prev]);\n    });\n\n    socket.on('notification:updated', (updatedNotification: Notification) => {\n      console.log('Updated notification:', updatedNotification);\n      setNotifications(prev =>\n        prev.map(notification =>\n          notification._id === updatedNotification._id ? updatedNotification : notification,\n        ),\n      );\n    });\n\n    return () => {\n      socket.disconnect();\n    };\n  }, []);\n\n  const handleMarkAsRead = async (id: string, e: React.MouseEvent) => {\n    e.preventDefault();\n    try {\n      console.log('Marking notification as read:', id);\n      const response = await fetch(`${SOCKET_URL}/workflows/notifications/${id}/read`, {\n        method: 'POST',\n        credentials: 'include',\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to mark notification as read');\n      }\n\n      const updatedNotification = await response.json();\n      console.log('Successfully marked notification as read:', updatedNotification);\n\n      setNotifications(prev =>\n        prev.map(notification =>\n          notification._id === id ? { ...notification, read: true } : notification,\n        ),\n      );\n    } catch (error) {\n      console.error('Error marking notification as read:', error);\n    }\n  };\n\n  const formatTimestamp = (timestamp: string) => {\n    const date = new Date(timestamp);\n    return date.toLocaleString();\n  };\n\n  const getStatusVariant = (status: string) => {\n    switch (status) {\n      case 'success':\n        return 'text-green-500';\n      case 'error':\n        return 'text-red-500';\n      case 'running':\n        return 'text-blue-500';\n      default:\n        return 'text-gray-500';\n    }\n  };\n\n  const handleDelete = async (id: string, e: React.MouseEvent) => {\n    e.stopPropagation(); // Prevent triggering the mark as read action\n    try {\n      console.log('Deleting notification:', id);\n      const response = await fetch(`${SOCKET_URL}/workflows/notifications/${id}`, {\n        method: 'DELETE',\n        credentials: 'include',\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to delete notification');\n      }\n\n      console.log('Successfully deleted notification:', id);\n      setNotifications(prev => prev.filter(notification => notification._id !== id));\n    } catch (error) {\n      console.error('Error deleting notification:', error);\n    }\n  };\n\n  return (\n    <div className=\"relative\">\n      <DropdownMenu>\n        <DropdownMenuTrigger asChild>\n          <Button variant=\"outline\" size=\"icon\" className=\"relative\">\n            <Bell className=\"h-4 w-4\" />\n            {unreadCount > 0 && (\n              <Badge\n                variant=\"destructive\"\n                className=\"absolute -top-2 -right-2 h-5 w-5 flex items-center justify-center p-0 text-xs\"\n              >\n                {unreadCount}\n              </Badge>\n            )}\n          </Button>\n        </DropdownMenuTrigger>\n        <DropdownMenuContent align=\"end\" className=\"w-80\">\n          <div className=\"px-2 py-1.5 text-sm font-semibold text-muted-foreground border-b\">\n            Notifications{' '}\n            {connectionStatus === 'connected' ? (\n              <span className=\"text-xs text-green-500\">•</span>\n            ) : (\n              <span className=\"text-xs text-red-500\">•</span>\n            )}\n          </div>\n          <div className=\"max-h-[calc(100vh-200px)] overflow-y-auto\">\n            {notifications.length === 0 ? (\n              <DropdownMenuItem disabled>No new notifications</DropdownMenuItem>\n            ) : (\n              notifications.map(notification => (\n                <DropdownMenuItem\n                  key={notification._id}\n                  className={`flex flex-col items-start p-4 cursor-pointer relative border-b last:border-b-0 ${\n                    !notification.read ? 'bg-slate-50' : ''\n                  }`}\n                  onClick={e => handleMarkAsRead(notification._id, e)}\n                >\n                  <div className=\"flex items-center gap-2\">\n                    {!notification.read && (\n                      <Circle className=\"h-2 w-2 flex-shrink-0 fill-red-500 text-red-500\" />\n                    )}\n                    <div className=\"font-semibold\">{notification.workflow.name}</div>\n                  </div>\n                  <div className=\"text-sm text-gray-500\">\n                    Status:{' '}\n                    <span className={getStatusVariant(notification.execution.status)}>\n                      {notification.execution.status}\n                    </span>\n                  </div>\n                  <div className=\"flex items-center justify-between w-full\">\n                    <div className=\"text-xs text-gray-400 mt-2\">\n                      {formatTimestamp(notification.execution.startedAt)}\n                    </div>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={e => handleDelete(notification._id, e)}\n                      className=\"h-6 px-2 text-sm hover:bg-red-500 hover:text-white\"\n                    >\n                      Clear\n                    </Button>\n                  </div>\n                </DropdownMenuItem>\n              ))\n            )}\n          </div>\n        </DropdownMenuContent>\n      </DropdownMenu>\n    </div>\n  );\n}\n\nEND_CODE\n\n--- FILE: skills/TaxonomyTable.tsx ---\nLANGUAGE: tsx\nBEGIN_CODE\n'use client';\n\nimport { Button } from '@/components/ui/button';\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from '@/components/ui/dialog';\nimport { Input } from '@/components/ui/input';\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from '@/components/ui/table';\nimport { bulkUpsert, getTechnicalTaxonomy } from '@/lib/skills/api';\nimport { IBaseTaxonomy, IBulkUpsertDTO, ITaxonomyDTO } from '@/lib/skills/types';\nimport { useState } from 'react';\n\nexport default function TaxonomyTable({ data }: IBulkUpsertDTO) {\n  const [tableData, setTableData] = useState(data); // Local state to manage table edits\n  const [selectedRow, setSelectedRow] = useState<ITaxonomyDTO | null>(null); // State for selected row (for dialog)\n  const [dialogOpen] = useState(false); // State for dialog visibility\n\n  console.log(`[INFO] Fetched taxonomy data for ${data[0].businessUnit}:`, data);\n  const handleEdit = (docId: string, field: keyof IBaseTaxonomy, value: string) => {\n    setTableData(prevData =>\n      prevData.map(row => (row.docId === docId ? { ...row, [field]: value } : row)),\n    );\n  };\n\n  const handleRowClick = (row: ITaxonomyDTO) => {\n    setSelectedRow(row); // Set the selected row for the dialog\n  };\n\n  const validateData = (data: ITaxonomyDTO[]) => {\n    return data.every(\n      item =>\n        item.docId &&\n        item.docRevisionId &&\n        item.docTitle &&\n        item.title &&\n        item.category &&\n        item.description &&\n        typeof item.proficiencyDescription === 'object' &&\n        typeof item.abilities === 'object' &&\n        typeof item.knowledge === 'object' &&\n        item.businessUnit,\n    );\n  };\n\n  // const handleDialogClose = () => {\n  //   if (selectedRow) {\n  //     // Update tableData with changes from selectedRow\n  //     setTableData(prevData =>\n  //       prevData.map(row => (row.docId === selectedRow.docId ? { ...selectedRow } : row)),\n  //     );\n  //   }\n  //   setDialogOpen(false); // Close the dialog\n  //   setSelectedRow(null); // Reset the selected row when the dialog is closed\n  // };\n\n  const triggerRevalidate = async () => {\n    const businessUnit = 'taxonomy';\n    const res = await fetch('/skills/taxonomy/revalidate', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ businessUnit }),\n    });\n\n    if (res.ok) {\n      console.log(await res.text()); // \"Revalidated taxonomy!\"\n\n      // Refetch the updated data after revalidation\n      const response = await getTechnicalTaxonomy(businessUnit, {\n        tags: ['taxonomy'],\n        revalidate: 100, // Force revalidation on client side too\n      });\n\n      // Assuming you update the state here\n      setTableData(response.data as ITaxonomyDTO[]);\n      console.log('Updated data:', response);\n    } else {\n      console.error('Failed to revalidate:', res.statusText);\n    }\n  };\n\n  const saveChanges = async () => {\n    console.log('Updated Data:', { data: tableData });\n\n    if (!validateData(tableData)) {\n      alert('Validation failed: Ensure all required fields are filled correctly.');\n      return;\n    }\n\n    try {\n      const payload: IBulkUpsertDTO = { data: tableData };\n\n      // Send the payload to the backend\n      const response = await bulkUpsert(payload);\n\n      console.log('Response:', response);\n\n      if (response.error) {\n        alert(`${response.error.status} | ${response.error.message}`);\n      } else {\n        alert(`Successfully updated ${response.data?.updatedCount} records.`);\n      }\n    } catch (err) {\n      console.error('Save changes failed:', err);\n      alert('An unexpected error occurred while saving changes.');\n    }\n  };\n\n  // Get dynamic column names (from proficiencyDescription or knowledge or abilities)\n  const getDynamicColumns = (key: keyof ITaxonomyDTO) => {\n    return Object.keys(selectedRow?.[key] || {}).map(level => level);\n  };\n\n  return (\n    <div className=\"p-4\">\n      <div className=\"flex justify-between items-center mb-4\">\n        <Input\n          type=\"text\"\n          placeholder=\"Filter by category...\"\n          className=\"w-1/2\"\n          onChange={e => {\n            const query = e.target.value.toLowerCase();\n            setTableData(\n              data.filter(\n                row =>\n                  row.category.toLowerCase().includes(query) ||\n                  row.title.toLowerCase().includes(query),\n              ),\n            );\n          }}\n        />\n        <Button onClick={saveChanges} className=\"ml-4\">\n          Save Changes\n        </Button>\n        <Button onClick={triggerRevalidate} className='\"ml-4'>\n          Revalidate\n        </Button>\n      </div>\n\n      <Table className=\"border border-gray-200\">\n        <TableHeader>\n          <TableRow>\n            <TableHead className=\"text-left\">Category</TableHead>\n            <TableHead className=\"text-left\">Title</TableHead>\n            <TableHead className=\"text-left\">Description</TableHead>\n          </TableRow>\n        </TableHeader>\n        <TableBody>\n          {tableData.map(row => (\n            <TableRow\n              key={row.docId}\n              onClick={() => handleRowClick(row)}\n              className={selectedRow?.docId === row.docId ? 'bg-gray-200' : ''} // Highlight selected row\n            >\n              <TableCell>{row.category}</TableCell>\n              <TableCell>{row.title}</TableCell>\n              <TableCell\n                contentEditable\n                suppressContentEditableWarning\n                onBlur={e =>\n                  handleEdit(row.docId, 'description', e.currentTarget.textContent || '')\n                }\n                className=\"border border-gray-300 p-2\"\n              >\n                {row.description}\n              </TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n\n      {/* Dialog for Expanded Row */}\n      <Dialog>\n        <DialogTrigger>\n          <Button disabled={!selectedRow} className=\"m-5\">\n            Open Details\n          </Button>\n        </DialogTrigger>\n        <div\n          className={`${\n            dialogOpen ? 'block' : 'hidden'\n          } fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center`}\n        ></div>\n        <DialogContent>\n          {selectedRow && (\n            <>\n              <DialogHeader>\n                <DialogTitle>Expanded Information for {selectedRow.title}</DialogTitle>\n              </DialogHeader>\n\n              <Table className=\"border border-gray-200\">\n                <TableHeader>\n                  <TableRow>\n                    <TableHead className=\"text-left\">Type</TableHead>\n                    {getDynamicColumns('proficiencyDescription').map(level => (\n                      <TableHead key={level} className=\"text-left\">\n                        {level}\n                      </TableHead>\n                    ))}\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {['proficiencyDescription', 'knowledge', 'abilities'].map(key => (\n                    <TableRow key={key}>\n                      <TableCell>{key}</TableCell>\n                      {getDynamicColumns(key as keyof ITaxonomyDTO).map(level => {\n                        const rowData = selectedRow?.[key as keyof ITaxonomyDTO]; // Safe access\n\n                        // Check if rowData is an object and has the key 'level'\n                        if (rowData && typeof rowData === 'object' && !Array.isArray(rowData)) {\n                          const typedRowData = rowData as Record<string, string[]>;\n\n                          // If it's an object (e.g., { \"Level 1\": [\"item1\", \"item2\"] })\n                          return (\n                            <TableCell\n                              key={level}\n                              contentEditable\n                              suppressContentEditableWarning\n                              onBlur={e => {\n                                const updatedValue = e.currentTarget.textContent || '';\n                                const updatedArray = updatedValue\n                                  .split(',')\n                                  .map(item => item.trim());\n\n                                setSelectedRow(prev => {\n                                  if (!prev) return null;\n\n                                  const currentValue = prev[key as keyof ITaxonomyDTO];\n\n                                  // Check if the current value is an object\n                                  if (\n                                    typeof currentValue === 'object' &&\n                                    !Array.isArray(currentValue)\n                                  ) {\n                                    return {\n                                      ...prev,\n                                      [key]: {\n                                        ...currentValue, // Safely spread the current object\n                                        [level]: updatedArray,\n                                      },\n                                    };\n                                  }\n\n                                  // Handle cases where the current value is not an object\n                                  return {\n                                    ...prev,\n                                    [key]: updatedArray,\n                                  };\n                                });\n                              }}\n                              className=\"border border-gray-300 p-2\"\n                            >\n                              <ul>\n                                {(typedRowData[level] || []).map((item, idx) => (\n                                  <li key={idx}>{item}</li>\n                                ))}\n                              </ul>\n                            </TableCell>\n                          );\n                        }\n\n                        if (Array.isArray(rowData)) {\n                          // If it's an array (e.g., [\"item1\", \"item2\"])\n                          return (\n                            <TableCell\n                              key={level}\n                              contentEditable\n                              suppressContentEditableWarning\n                              onBlur={e => {\n                                const updatedValue = e.currentTarget.textContent || '';\n                                const updatedArray = updatedValue\n                                  .split(',')\n                                  .map(item => item.trim());\n\n                                setSelectedRow(prev =>\n                                  prev\n                                    ? {\n                                        ...prev,\n                                        [key]: updatedArray,\n                                      }\n                                    : null,\n                                );\n                              }}\n                              className=\"border border-gray-300 p-2\"\n                            >\n                              <ul>\n                                {rowData.map((item, idx) => (\n                                  <li key={idx}>{item}</li>\n                                ))}\n                              </ul>\n                            </TableCell>\n                          );\n                        }\n\n                        return <TableCell key={level}>N/A</TableCell>; // Fallback if it's neither object nor array\n                      })}\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n\n              {/* Close Button for Dialog */}\n              {/* <DialogExit>\n                <Button onClick={handleDialogClose} className=\"mt-4\">\n                  Close\n                </Button>\n              </DialogExit> */}\n            </>\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n\nEND_CODE\n\n--- FILE: ReportGenerator.tsx ---\nLANGUAGE: tsx\nBEGIN_CODE\nimport { EmployeeSkillsReport, EmployeeSkillsReportData } from '@/components/EmployeeSkillsReport';\nimport { ReportTemplate } from '@/components/ReportTemplate';\nimport { Button } from '@/components/ui/button';\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from '@/components/ui/dialog';\nimport { Label } from '@/components/ui/label';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport { Loader2 } from 'lucide-react';\nimport { useState } from 'react';\n\nexport interface Skill {\n  name: string;\n  currentLevel: number;\n  requiredLevel: number;\n  gap: number;\n}\n\nexport interface Employee {\n  name: string;\n  department: string;\n  skills: Skill[];\n}\n\nexport interface ReportData {\n  title: string;\n  description: string;\n  date: string;\n  summary?: {\n    label: string;\n    value: string | number;\n  }[];\n  details?: {\n    label: string;\n    value: string | number;\n    change?: number;\n  }[];\n  employees?: Employee[];\n}\n\nexport function ReportGenerator() {\n  const [isOpen, setIsOpen] = useState(false);\n  const [isGenerating, setIsGenerating] = useState(false);\n  const [isReportReady, setIsReportReady] = useState(false);\n  const [reportData, setReportData] = useState<ReportData | null>(null);\n  const [reportType, setReportType] = useState<string>('');\n\n  const handleGenerateReport = () => {\n    setIsGenerating(true);\n    // Simulate report generation process\n    setTimeout(() => {\n      setIsGenerating(false);\n      setIsReportReady(true);\n\n      if (reportType === 'employee-skills') {\n        setReportData({\n          title: 'Employee Skills Report',\n          description: 'Comprehensive analysis of employee skills and gaps',\n          date: 'June 1, 2023',\n          employees: [\n            {\n              name: 'John Doe',\n              department: 'Engineering',\n              skills: [\n                { name: 'JavaScript', currentLevel: 4, requiredLevel: 5, gap: 1 },\n                { name: 'React', currentLevel: 3, requiredLevel: 4, gap: 1 },\n              ],\n            },\n            {\n              name: 'Jane Smith',\n              department: 'Data Science',\n              skills: [\n                { name: 'Python', currentLevel: 5, requiredLevel: 4, gap: -1 },\n                { name: 'Machine Learning', currentLevel: 4, requiredLevel: 5, gap: 1 },\n              ],\n            },\n          ],\n        });\n      } else {\n        setReportData({\n          title: 'Skills Overview Report',\n          description: 'A comprehensive overview of skills across all departments',\n          date: 'June 1, 2023',\n          summary: [\n            { label: 'Total Skills', value: 50 },\n            { label: 'Average Skill Level', value: 3.7 },\n            { label: 'Skills Gap', value: '12%' },\n          ],\n          details: [\n            { label: 'JavaScript', value: 4.2, change: 5 },\n            { label: 'Python', value: 3.8, change: 2 },\n            { label: 'React', value: 4.0, change: 8 },\n            { label: 'Data Science', value: 3.5, change: -2 },\n            { label: 'Machine Learning', value: 3.2, change: 10 },\n          ],\n        });\n      }\n    }, 3000);\n  };\n\n  const handleDownloadReport = () => {\n    // In a real application, you would generate a PDF or other format here\n    // For this example, we'll just alert that the report is downloaded\n    alert('Report downloaded successfully!');\n  };\n\n  const resetState = () => {\n    setIsGenerating(false);\n    setIsReportReady(false);\n    setReportData(null);\n    setReportType('');\n  };\n\n  return (\n    <Dialog\n      open={isOpen}\n      onOpenChange={open => {\n        setIsOpen(open);\n        if (!open) resetState();\n      }}\n    >\n      <DialogTrigger asChild>\n        <Button variant=\"outline\" onClick={() => setIsOpen(true)}>\n          Generate Report\n        </Button>\n      </DialogTrigger>\n      <DialogContent className=\"sm:max-w-[425px]\">\n        <DialogHeader>\n          <DialogTitle>Generate Report</DialogTitle>\n          <DialogDescription>\n            Select the parameters for your report. Click generate when you&apos;re ready.\n          </DialogDescription>\n        </DialogHeader>\n        {!isReportReady ? (\n          <div className=\"grid gap-4 py-4\">\n            <div className=\"grid grid-cols-4 items-center gap-4\">\n              <Label htmlFor=\"report-type\" className=\"text-right\">\n                Type\n              </Label>\n              <Select onValueChange={value => setReportType(value)}>\n                <SelectTrigger className=\"col-span-3\">\n                  <SelectValue placeholder=\"Select report type\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"skills\">Skills Overview</SelectItem>\n                  <SelectItem value=\"employee-skills\">Employee Skills and Gaps</SelectItem>\n                  <SelectItem value=\"departments\">Department Analysis</SelectItem>\n                  <SelectItem value=\"employees\">Employee Performance</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div className=\"grid grid-cols-4 items-center gap-4\">\n              <Label htmlFor=\"date-range\" className=\"text-right\">\n                Date Range\n              </Label>\n              <Select>\n                <SelectTrigger className=\"col-span-3\">\n                  <SelectValue placeholder=\"Select date range\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"last-week\">Last Week</SelectItem>\n                  <SelectItem value=\"last-month\">Last Month</SelectItem>\n                  <SelectItem value=\"last-quarter\">Last Quarter</SelectItem>\n                  <SelectItem value=\"last-year\">Last Year</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div className=\"grid grid-cols-4 items-center gap-4\">\n              <Label htmlFor=\"format\" className=\"text-right\">\n                Format\n              </Label>\n              <Select defaultValue=\"pdf\">\n                <SelectTrigger className=\"col-span-3\">\n                  <SelectValue placeholder=\"Select format\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"pdf\">PDF</SelectItem>\n                  <SelectItem value=\"csv\">CSV</SelectItem>\n                  <SelectItem value=\"xlsx\">Excel</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        ) : (\n          <div className=\"py-4\">\n            <p>Your report is ready. You can now download it.</p>\n          </div>\n        )}\n        <DialogFooter>\n          {!isReportReady ? (\n            <Button onClick={handleGenerateReport} disabled={isGenerating}>\n              {isGenerating ? (\n                <>\n                  <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                  Generating...\n                </>\n              ) : (\n                'Generate Report'\n              )}\n            </Button>\n          ) : (\n            <Button onClick={handleDownloadReport}>Download Report</Button>\n          )}\n        </DialogFooter>\n      </DialogContent>\n      {isReportReady && reportData && (\n        <DialogContent className=\"sm:max-w-[800px]\">\n          {reportType === 'employee-skills' ? (\n            <EmployeeSkillsReport data={reportData as EmployeeSkillsReportData} />\n          ) : (\n            <ReportTemplate data={reportData} />\n          )}\n        </DialogContent>\n      )}\n    </Dialog>\n  );\n}\n\nEND_CODE\n\n--- FILE: EmployeeSkillsReport.tsx ---\nLANGUAGE: tsx\nBEGIN_CODE\nimport { ReportData } from '@/components/ReportGenerator';\nimport { Badge } from '@/components/ui/badge';\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from '@/components/ui/card';\nimport { Progress } from '@/components/ui/progress';\nimport { ScrollArea } from '@/components/ui/scroll-area';\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from '@/components/ui/table';\n\nexport interface EmployeeSkillsReportData extends ReportData {\n  employees: Employee[];\n}\n\ninterface Employee {\n  name: string;\n  department: string;\n  skills: Skill[];\n}\n\ninterface Skill {\n  name: string;\n  currentLevel: number;\n  requiredLevel: number;\n  gap: number;\n}\n\ninterface EmployeeSkillsReportProps {\n  data: EmployeeSkillsReportData;\n}\n\nexport function EmployeeSkillsReport({ data }: EmployeeSkillsReportProps) {\n  return (\n    <Card className=\"w-full max-w-4xl mx-auto\">\n      <CardHeader>\n        <div className=\"flex justify-between items-start\">\n          <div>\n            <CardTitle className=\"text-2xl font-bold\">{data.title}</CardTitle>\n            <CardDescription>{data.description}</CardDescription>\n          </div>\n          <Badge variant=\"outline\">{data.date}</Badge>\n        </div>\n      </CardHeader>\n      <CardContent>\n        <ScrollArea className=\"h-[600px] pr-4\">\n          <div className=\"space-y-6\">\n            {data.employees.map((employee, index) => (\n              <Card key={index}>\n                <CardHeader>\n                  <CardTitle>{employee.name}</CardTitle>\n                  <CardDescription>{employee.department}</CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <Table>\n                    <TableHeader>\n                      <TableRow>\n                        <TableHead>Skill</TableHead>\n                        <TableHead>Current Level</TableHead>\n                        <TableHead>Required Level</TableHead>\n                        <TableHead>Gap</TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {employee.skills.map((skill, skillIndex) => (\n                        <TableRow key={skillIndex}>\n                          <TableCell>{skill.name}</TableCell>\n                          <TableCell>\n                            <div className=\"flex items-center space-x-2\">\n                              <Progress\n                                value={(skill.currentLevel / 5) * 100}\n                                className=\"w-[60px]\"\n                              />\n                              <span>{skill.currentLevel}</span>\n                            </div>\n                          </TableCell>\n                          <TableCell>{skill.requiredLevel}</TableCell>\n                          <TableCell>\n                            <Badge\n                              variant={\n                                skill.gap > 0\n                                  ? 'destructive'\n                                  : skill.gap < 0\n                                    ? 'success'\n                                    : 'secondary'\n                              }\n                            >\n                              {skill.gap > 0 ? `+${skill.gap}` : skill.gap}\n                            </Badge>\n                          </TableCell>\n                        </TableRow>\n                      ))}\n                    </TableBody>\n                  </Table>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </ScrollArea>\n      </CardContent>\n      <CardFooter className=\"text-sm text-muted-foreground\">\n        This report was generated automatically. For any questions, please contact the HR team.\n      </CardFooter>\n    </Card>\n  );\n}\n\nEND_CODE\n\n--- FILE: auth/LoginForm.tsx ---\nLANGUAGE: tsx\nBEGIN_CODE\n'use client';\n\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { userApi } from '@/lib/api/client';\nimport { authConfig, errorMessages } from '@/lib/api/config';\nimport { useMutation } from '@/lib/api/hooks';\nimport { ApiResponse } from '@/lib/api/types';\nimport { AuthResponse } from '@/lib/users/types';\nimport { logger } from '@/lib/utils';\nimport { signIn } from 'next-auth/react';\nimport { useRouter, useSearchParams } from 'next/navigation';\nimport { useState } from 'react';\n\nexport default function LoginForm() {\n  // Changed from AdminLoginPage to LoginForm\n  const router = useRouter();\n  const searchParams = useSearchParams();\n  const [formState, setFormState] = useState({\n    email: searchParams.get('email') || '',\n    password: '',\n  });\n\n  const { mutate, error, isLoading } = useMutation<\n    AuthResponse,\n    { email: string; password: string }\n  >(userApi, `${authConfig.endpoints.login}`, 'POST', {\n    requiresAuth: false,\n  });\n\n  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    setFormState(prev => ({ ...prev, isLoading: true, error: '' }));\n\n    try {\n      const result = await authenticateUser(mutate, formState.email, formState.password);\n      if (result.success) {\n        router.push('/dashboard/admin');\n      } else {\n        setFormState(prev => ({\n          ...prev,\n          error: result.error || 'Invalid email or password',\n        }));\n      }\n    } catch (err) {\n      logger.error('Login Error:', err);\n      setFormState(prev => ({\n        ...prev,\n        error: 'An unexpected error occurred. Please try again.',\n      }));\n    } finally {\n      setFormState(prev => ({ ...prev, isLoading: false }));\n    }\n  };\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = e.target;\n    setFormState(prev => ({ ...prev, [name]: value }));\n  };\n\n  return (\n    <div className=\"flex items-center justify-center min-h-screen bg-gray-100\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader>\n          <CardTitle>Admin Login</CardTitle>\n          <CardDescription>Enter your credentials to access the admin dashboard</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"email\">Email</Label>\n              <Input\n                id=\"email\"\n                name=\"email\"\n                type=\"email\"\n                placeholder=\"admin@example.com\"\n                value={formState.email}\n                onChange={handleInputChange}\n                required\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"password\">Password</Label>\n              <Input\n                id=\"password\"\n                name=\"password\"\n                type=\"password\"\n                value={formState.password}\n                onChange={handleInputChange}\n                required\n              />\n            </div>\n            {error && (\n              <Alert variant=\"destructive\">\n                <AlertDescription>{error.message}</AlertDescription>\n              </Alert>\n            )}\n            <Button type=\"submit\" className=\"w-full\" disabled={isLoading}>\n              {isLoading ? 'Logging in...' : 'Log in'}\n            </Button>\n          </form>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nasync function authenticateUser(\n  mutate: (\n    data?: { email: string; password: string } | undefined,\n  ) => Promise<ApiResponse<AuthResponse>>,\n  email: string,\n  password: string,\n): Promise<{ success: boolean; error?: string }> {\n  logger.log('Starting authentication process');\n\n  const userServiceUrl = process.env.NEXT_PUBLIC_USER_SERVICE_URL;\n  if (!userServiceUrl) {\n    logger.error('User service URL not configured');\n    return {\n      success: false,\n      error: 'Authentication service not properly configured',\n    };\n  }\n\n  try {\n    // First step: Get token from user service\n    const apiResponse = await mutate({ email, password });\n    console.log('Api response:', apiResponse);\n    if (!apiResponse.data?.access_token || apiResponse.error) {\n      logger.error('Authentication failed:', {\n        status: apiResponse.status,\n        message: apiResponse.error?.message,\n      });\n      return {\n        success: false,\n        error: apiResponse.error?.message || errorMessages.INVALID_CREDENTIALS,\n      };\n    }\n\n    // Second step: Sign in with NextAuth\n    const result = await signIn('credentials', {\n      redirect: false,\n      email,\n      password,\n      access_token: apiResponse.data.access_token,\n      callbackUrl: `${window.location.origin}/dashboard/admin`,\n    });\n\n    if (!result?.ok) {\n      logger.error('NextAuth signin failed:', result?.error);\n      return {\n        success: false,\n        error: 'Failed to establish session',\n      };\n    }\n\n    logger.log('Authentication successful');\n    return { success: true };\n  } catch (error) {\n    logger.error('Authentication error:', error);\n    return {\n      success: false,\n      error: 'Network error occurred. Please try again.',\n    };\n  }\n}\n\nEND_CODE\n\n--- FILE: ui/badge.tsx ---\nLANGUAGE: tsx\nBEGIN_CODE\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport * as React from 'react';\n\nimport { cn } from '@/lib/utils';\n\nconst badgeVariants = cva(\n  'inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2',\n  {\n    variants: {\n      variant: {\n        default: 'border-transparent bg-primary text-primary-foreground shadow hover:bg-primary/80',\n        secondary:\n          'border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80',\n        destructive:\n          'border-transparent bg-destructive text-destructive-foreground shadow hover:bg-destructive/80',\n        outline: 'text-foreground',\n        // Add this variant\n        success: 'border-transparent bg-green-500 text-white hover:bg-green-600',\n        warning: 'border-transparent bg-yellow-500 text-white hover:bg-yellow-500/80',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n    },\n  },\n);\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return <div className={cn(badgeVariants({ variant }), className)} {...props} />;\n}\n\nexport { Badge, badgeVariants };\n\nEND_CODE\n\n--- FILE: ui/button.tsx ---\nLANGUAGE: tsx\nBEGIN_CODE\nimport * as React from 'react';\nimport { Slot } from '@radix-ui/react-slot';\nimport { cva, type VariantProps } from 'class-variance-authority';\n\nimport { cn } from '@/lib/utils';\n\nconst buttonVariants = cva(\n  'inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50',\n  {\n    variants: {\n      variant: {\n        default: 'bg-primary text-primary-foreground hover:bg-primary/90',\n        destructive: 'bg-destructive text-destructive-foreground hover:bg-destructive/90',\n        outline: 'border border-input bg-background hover:bg-accent hover:text-accent-foreground',\n        secondary: 'bg-secondary text-secondary-foreground hover:bg-secondary/80',\n        ghost: 'hover:bg-accent hover:text-accent-foreground',\n        link: 'text-primary underline-offset-4 hover:underline',\n      },\n      size: {\n        default: 'h-10 px-4 py-2',\n        sm: 'h-9 rounded-md px-3',\n        lg: 'h-11 rounded-md px-8',\n        icon: 'h-10 w-10',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'default',\n    },\n  },\n);\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean;\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : 'button';\n    return (\n      <Comp className={cn(buttonVariants({ variant, size, className }))} ref={ref} {...props} />\n    );\n  },\n);\nButton.displayName = 'Button';\n\nexport { Button, buttonVariants };\n\nEND_CODE\n\n--- FILE: ui/tooltip.tsx ---\nLANGUAGE: tsx\nBEGIN_CODE\nimport { cn } from '@/lib/utils';\nimport * as TooltipPrimitive from '@radix-ui/react-tooltip';\nimport * as React from 'react';\nimport { TooltipProps } from 'recharts';\n\nconst TooltipProvider = TooltipPrimitive.Provider;\nconst Tooltip = TooltipPrimitive.Root;\nconst TooltipTrigger = TooltipPrimitive.Trigger;\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      'z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-50 data-[side=bottom]:slide-in-from-top-1 data-[side=left]:slide-in-from-right-1 data-[side=right]:slide-in-from-left-1 data-[side=top]:slide-in-from-bottom-1',\n      className,\n    )}\n    {...props}\n  />\n));\nTooltipContent.displayName = TooltipPrimitive.Content.displayName;\n\nexport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger };\n\nexport const CustomTooltip = React.forwardRef<HTMLDivElement, TooltipProps<number, string>>(\n  (props, ref) => {\n    const { active, payload } = props;\n\n    if (active && payload?.length) {\n      const data = payload[0].payload as {\n        skill: string;\n        average: number;\n        requiredRating: number;\n        gap: number;\n      };\n\n      return (\n        <div ref={ref} className=\"bg-white p-4 rounded-lg space-y-1 shadow-lg border\">\n          <p className=\"font-semibold mb-2\">{data.skill}</p>\n          <p className=\"text-blue-600\">Current Level: {data.average.toFixed(1)}</p>\n          <p className=\"text-gray-600\">Required Level: {data.requiredRating.toFixed(1)}</p>\n          <p className=\"text-red-500\">Gap: {data.gap.toFixed(1)}</p>\n        </div>\n      );\n    }\n    return null;\n  },\n);\n\nCustomTooltip.displayName = 'CustomTooltip';\n\nEND_CODE\n\n--- FILE: ui/select.tsx ---\nLANGUAGE: tsx\nBEGIN_CODE\n'use client';\n\nimport { CaretSortIcon, CheckIcon, ChevronDownIcon, ChevronUpIcon } from '@radix-ui/react-icons';\nimport * as SelectPrimitive from '@radix-ui/react-select';\nimport * as React from 'react';\n\nimport { cn } from '@/lib/utils';\n\nconst Select = SelectPrimitive.Root;\n\nconst SelectGroup = SelectPrimitive.Group;\n\nconst SelectValue = SelectPrimitive.Value;\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      'flex h-9 w-full items-center justify-between whitespace-nowrap rounded-md border border-input bg-transparent px-3 py-2 text-sm shadow-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-1 focus:ring-ring disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1',\n      className,\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <CaretSortIcon className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n));\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName;\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn('flex cursor-default items-center justify-center py-1', className)}\n    {...props}\n  >\n    <ChevronUpIcon />\n  </SelectPrimitive.ScrollUpButton>\n));\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName;\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn('flex cursor-default items-center justify-center py-1', className)}\n    {...props}\n  >\n    <ChevronDownIcon />\n  </SelectPrimitive.ScrollDownButton>\n));\nSelectScrollDownButton.displayName = SelectPrimitive.ScrollDownButton.displayName;\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = 'popper', ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        'relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',\n        position === 'popper' &&\n          'data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1',\n        className,\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          'p-1',\n          position === 'popper' &&\n            'h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]',\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n));\nSelectContent.displayName = SelectPrimitive.Content.displayName;\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn('px-2 py-1.5 text-sm font-semibold', className)}\n    {...props}\n  />\n));\nSelectLabel.displayName = SelectPrimitive.Label.displayName;\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      'relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-2 pr-8 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',\n      className,\n    )}\n    {...props}\n  >\n    <span className=\"absolute right-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <CheckIcon className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n));\nSelectItem.displayName = SelectPrimitive.Item.displayName;\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn('-mx-1 my-1 h-px bg-muted', className)}\n    {...props}\n  />\n));\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName;\n\nexport {\n  Select,\n  SelectContent,\n  SelectGroup,\n  SelectItem,\n  SelectLabel,\n  SelectScrollDownButton,\n  SelectScrollUpButton,\n  SelectSeparator,\n  SelectTrigger,\n  SelectValue,\n};\n\nEND_CODE\n\n--- FILE: ui/alert.tsx ---\nLANGUAGE: tsx\nBEGIN_CODE\nimport * as React from 'react';\nimport { cva, type VariantProps } from 'class-variance-authority';\n\nimport { cn } from '@/lib/utils';\n\nconst alertVariants = cva(\n  'relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground',\n  {\n    variants: {\n      variant: {\n        default: 'bg-background text-foreground',\n        destructive:\n          'border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n    },\n  },\n);\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div ref={ref} role=\"alert\" className={cn(alertVariants({ variant }), className)} {...props} />\n));\nAlert.displayName = 'Alert';\n\nconst AlertTitle = React.forwardRef<HTMLParagraphElement, React.HTMLAttributes<HTMLHeadingElement>>(\n  ({ className, ...props }, ref) => (\n    <h5\n      ref={ref}\n      className={cn('mb-1 font-medium leading-none tracking-tight', className)}\n      {...props}\n    />\n  ),\n);\nAlertTitle.displayName = 'AlertTitle';\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn('text-sm [&_p]:leading-relaxed', className)} {...props} />\n));\nAlertDescription.displayName = 'AlertDescription';\n\nexport { Alert, AlertTitle, AlertDescription };\n\nEND_CODE\n\n--- FILE: ui/barchart.tsx ---\nLANGUAGE: tsx\nBEGIN_CODE\n'use client';\n\nimport * as React from 'react';\nimport {\n  Bar,\n  BarChart,\n  CartesianGrid,\n  Legend,\n  ResponsiveContainer,\n  Tooltip,\n  XAxis,\n  YAxis,\n} from 'recharts';\n\ninterface DataPoint {\n  [key: string]: string | number;\n}\n\ninterface BarChartProps extends React.HTMLAttributes<HTMLDivElement> {\n  data: DataPoint[];\n  xAxisKey: string;\n  yAxisDomain?: [number, number];\n  yAxisTicks?: number[];\n  series: { name: string; key: string; color: string }[];\n  height?: number;\n  title?: string;\n}\nconst CustomXAxisTick = ({\n  x,\n  y,\n  payload,\n}: {\n  x: number;\n  y: number;\n  payload: { value: string };\n}) => (\n  <g transform={`translate(${x},${y})`}>\n    <text\n      x={0}\n      y={0}\n      dy={16}\n      textAnchor=\"end\"\n      fill=\"#666\"\n      transform=\"rotate(-45)\"\n      style={{ fontSize: '11px' }}\n    >\n      {payload.value}\n    </text>\n  </g>\n);\n\nexport function CustomBarChart({\n  data,\n  xAxisKey,\n  yAxisDomain = [0, 6],\n  yAxisTicks = [0, 1.5, 3, 4.5, 6],\n  series,\n  height = 500,\n  // title,\n  // className,\n  // ...props\n}: BarChartProps) {\n  return (\n    <div style={{ height: `${height}px`, width: '100%' }}>\n      <ResponsiveContainer width=\"100%\" height=\"100%\">\n        <BarChart data={data} margin={{ top: 40, right: 30, left: 20, bottom: 120 }}>\n          <CartesianGrid strokeDasharray=\"3 3\" vertical={false} />\n          <XAxis\n            dataKey={xAxisKey}\n            height={100}\n            interval={0}\n            tick={CustomXAxisTick}\n            tickLine={false}\n          />\n          <YAxis\n            domain={yAxisDomain}\n            ticks={yAxisTicks}\n            tick={{ fill: '#666', fontSize: '11px' }}\n            tickLine={false}\n          />\n          <Tooltip />\n          <Legend\n            verticalAlign=\"bottom\"\n            height={36}\n            wrapperStyle={{\n              paddingTop: '50px',\n              paddingBottom: '0px',\n            }}\n          />\n          {series.map(s => (\n            <Bar key={s.key} dataKey={s.key} name={s.name} fill={s.color} radius={[4, 4, 0, 0]} />\n          ))}\n        </BarChart>\n      </ResponsiveContainer>\n    </div>\n  );\n}\n\nEND_CODE\n\n--- FILE: ui/accordion.tsx ---\nLANGUAGE: tsx\nBEGIN_CODE\n'use client';\n\nimport * as React from 'react';\nimport * as AccordionPrimitive from '@radix-ui/react-accordion';\nimport { cn } from '@/lib/utils';\nimport { ChevronDownIcon } from '@radix-ui/react-icons';\n\nconst Accordion = AccordionPrimitive.Root;\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item ref={ref} className={cn('border-b', className)} {...props} />\n));\nAccordionItem.displayName = 'AccordionItem';\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        'flex flex-1 items-center justify-between py-4 text-sm font-medium transition-all hover:underline text-left [&[data-state=open]>svg]:rotate-180',\n        className,\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDownIcon className=\"h-4 w-4 shrink-0 text-muted-foreground transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n));\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName;\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn('pb-4 pt-0', className)}>{children}</div>\n  </AccordionPrimitive.Content>\n));\nAccordionContent.displayName = AccordionPrimitive.Content.displayName;\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent };\n\nEND_CODE\n\n--- FILE: ui/progress.tsx ---\nLANGUAGE: tsx\nBEGIN_CODE\n'use client';\n\nimport * as ProgressPrimitive from '@radix-ui/react-progress';\nimport * as React from 'react';\n\nimport { cn } from '@/lib/utils';\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn('relative h-2 w-full overflow-hidden rounded-full bg-primary/20', className)}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n));\nProgress.displayName = ProgressPrimitive.Root.displayName;\n\nexport { Progress };\n\nEND_CODE\n\n--- FILE: ui/dropdown-menu.tsx ---\nLANGUAGE: tsx\nBEGIN_CODE\n'use client';\n\nimport * as React from 'react';\nimport * as DropdownMenuPrimitive from '@radix-ui/react-dropdown-menu';\nimport { Check, ChevronRight, Circle } from 'lucide-react';\n\nimport { cn } from '@/lib/utils';\n\nconst DropdownMenu = DropdownMenuPrimitive.Root;\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger;\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group;\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal;\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub;\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup;\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean;\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      'flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent',\n      inset && 'pl-8',\n      className,\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </DropdownMenuPrimitive.SubTrigger>\n));\nDropdownMenuSubTrigger.displayName = DropdownMenuPrimitive.SubTrigger.displayName;\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      'z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',\n      className,\n    )}\n    {...props}\n  />\n));\nDropdownMenuSubContent.displayName = DropdownMenuPrimitive.SubContent.displayName;\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        'z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',\n        className,\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n));\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName;\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean;\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      'relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',\n      inset && 'pl-8',\n      className,\n    )}\n    {...props}\n  />\n));\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName;\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      'relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',\n      className,\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n));\nDropdownMenuCheckboxItem.displayName = DropdownMenuPrimitive.CheckboxItem.displayName;\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      'relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',\n      className,\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n));\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName;\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean;\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn('px-2 py-1.5 text-sm font-semibold', inset && 'pl-8', className)}\n    {...props}\n  />\n));\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName;\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn('-mx-1 my-1 h-px bg-muted', className)}\n    {...props}\n  />\n));\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName;\n\nconst DropdownMenuShortcut = ({ className, ...props }: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span className={cn('ml-auto text-xs tracking-widest opacity-60', className)} {...props} />\n  );\n};\nDropdownMenuShortcut.displayName = 'DropdownMenuShortcut';\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n};\n\nEND_CODE\n\n--- FILE: ui/input.tsx ---\nLANGUAGE: tsx\nBEGIN_CODE\nimport * as React from 'react';\n\nimport { cn } from '@/lib/utils';\n\nconst Input = React.forwardRef<HTMLInputElement, React.InputHTMLAttributes<HTMLInputElement>>(\n  ({ className, type = 'text', ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          'flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50',\n          className,\n        )}\n        ref={ref}\n        {...props}\n      />\n    );\n  },\n);\n\nInput.displayName = 'Input';\n\nexport { Input };\n\nEND_CODE\n\n--- FILE: ui/alert-dialog.tsx ---\nLANGUAGE: tsx\nBEGIN_CODE\nimport * as React from 'react';\nimport * as AlertDialogPrimitive from '@radix-ui/react-alert-dialog';\n\nimport { cn } from '@/lib/utils';\nimport { buttonVariants } from '@/components/ui/button';\n\nconst AlertDialog = AlertDialogPrimitive.Root;\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger;\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal;\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      'fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0',\n      className,\n    )}\n    {...props}\n    ref={ref}\n  />\n));\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName;\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        'fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg',\n        className,\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n));\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName;\n\nconst AlertDialogHeader = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (\n  <div className={cn('flex flex-col space-y-2 text-center sm:text-left', className)} {...props} />\n);\nAlertDialogHeader.displayName = 'AlertDialogHeader';\n\nconst AlertDialogFooter = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn('flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2', className)}\n    {...props}\n  />\n);\nAlertDialogFooter.displayName = 'AlertDialogFooter';\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn('text-lg font-semibold', className)}\n    {...props}\n  />\n));\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName;\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn('text-sm text-muted-foreground', className)}\n    {...props}\n  />\n));\nAlertDialogDescription.displayName = AlertDialogPrimitive.Description.displayName;\n\nconst AlertDialogAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ButtonHTMLAttributes<HTMLButtonElement>\n>(({ className, ...props }, ref) => (\n  <button ref={ref} className={cn(buttonVariants(), className)} {...props} />\n));\nAlertDialogAction.displayName = 'AlertDialogAction';\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(buttonVariants({ variant: 'outline' }), 'mt-2 sm:mt-0', className)}\n    {...props}\n  />\n));\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName;\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n};\n\nEND_CODE\n\n--- FILE: ui/tabs.tsx ---\nLANGUAGE: tsx\nBEGIN_CODE\n'use client';\n\nimport * as TabsPrimitive from '@radix-ui/react-tabs';\nimport * as React from 'react';\n\nimport { cn } from '@/lib/utils';\n\nconst Tabs = TabsPrimitive.Root;\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      'inline-flex h-9 items-center justify-center rounded-lg bg-muted p-1 text-muted-foreground',\n      className,\n    )}\n    {...props}\n  />\n));\nTabsList.displayName = TabsPrimitive.List.displayName;\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      'inline-flex items-center justify-center whitespace-nowrap rounded-md px-3 py-1 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow',\n      className,\n    )}\n    {...props}\n  />\n));\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName;\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      'mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2',\n      className,\n    )}\n    {...props}\n  />\n));\nTabsContent.displayName = TabsPrimitive.Content.displayName;\n\nexport { Tabs, TabsContent, TabsList, TabsTrigger };\n\nEND_CODE\n\n--- FILE: ui/textarea.tsx ---\nLANGUAGE: tsx\nBEGIN_CODE\nimport * as React from 'react';\n\nimport { cn } from '@/lib/utils';\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, React.ComponentProps<'textarea'>>(\n  ({ className, ...props }, ref) => {\n    return (\n      <textarea\n        className={cn(\n          'flex min-h-[60px] w-full rounded-md border border-input bg-transparent px-3 py-2 text-base shadow-sm placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm',\n          className,\n        )}\n        ref={ref}\n        {...props}\n      />\n    );\n  },\n);\nTextarea.displayName = 'Textarea';\n\nexport { Textarea };\n\nEND_CODE\n\n--- FILE: ui/avatar.tsx ---\nLANGUAGE: tsx\nBEGIN_CODE\n'use client';\n\nimport * as AvatarPrimitive from '@radix-ui/react-avatar';\nimport * as React from 'react';\n\nimport { cn } from '@/lib/utils';\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn('relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full', className)}\n    {...props}\n  />\n));\nAvatar.displayName = AvatarPrimitive.Root.displayName;\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn('aspect-square h-full w-full', className)}\n    {...props}\n  />\n));\nAvatarImage.displayName = AvatarPrimitive.Image.displayName;\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      'flex h-full w-full items-center justify-center rounded-full bg-muted',\n      className,\n    )}\n    {...props}\n  />\n));\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName;\n\nexport { Avatar, AvatarFallback, AvatarImage };\n\nEND_CODE\n\n--- FILE: ui/table.tsx ---\nLANGUAGE: tsx\nBEGIN_CODE\nimport * as React from 'react';\n\nimport { cn } from '@/lib/utils';\n\nconst Table = React.forwardRef<HTMLTableElement, React.HTMLAttributes<HTMLTableElement>>(\n  ({ className, ...props }, ref) => (\n    <div className=\"relative w-full overflow-auto\">\n      <table ref={ref} className={cn('w-full caption-bottom text-sm', className)} {...props} />\n    </div>\n  ),\n);\nTable.displayName = 'Table';\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn('[&_tr]:border-b', className)} {...props} />\n));\nTableHeader.displayName = 'TableHeader';\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody ref={ref} className={cn('[&_tr:last-child]:border-0', className)} {...props} />\n));\nTableBody.displayName = 'TableBody';\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn('border-t bg-muted/50 font-medium [&>tr]:last:border-b-0', className)}\n    {...props}\n  />\n));\nTableFooter.displayName = 'TableFooter';\n\nconst TableRow = React.forwardRef<HTMLTableRowElement, React.HTMLAttributes<HTMLTableRowElement>>(\n  ({ className, ...props }, ref) => (\n    <tr\n      ref={ref}\n      className={cn(\n        'border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted',\n        className,\n      )}\n      {...props}\n    />\n  ),\n);\nTableRow.displayName = 'TableRow';\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      'h-10 px-2 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]',\n      className,\n    )}\n    {...props}\n  />\n));\nTableHead.displayName = 'TableHead';\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\n      'p-2 align-middle [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]',\n      className,\n    )}\n    {...props}\n  />\n));\nTableCell.displayName = 'TableCell';\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption ref={ref} className={cn('mt-4 text-sm text-muted-foreground', className)} {...props} />\n));\nTableCaption.displayName = 'TableCaption';\n\nexport { Table, TableBody, TableCaption, TableCell, TableFooter, TableHead, TableHeader, TableRow };\n\nEND_CODE\n\n--- FILE: ui/label.tsx ---\nLANGUAGE: tsx\nBEGIN_CODE\n'use client';\n\nimport * as React from 'react';\nimport * as LabelPrimitive from '@radix-ui/react-label';\nimport { cva, type VariantProps } from 'class-variance-authority';\n\nimport { cn } from '@/lib/utils';\n\nconst labelVariants = cva(\n  'text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70',\n);\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> & VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root ref={ref} className={cn(labelVariants(), className)} {...props} />\n));\nLabel.displayName = LabelPrimitive.Root.displayName;\n\nexport { Label };\n\nEND_CODE\n\n--- FILE: ui/dialog.tsx ---\nLANGUAGE: tsx\nBEGIN_CODE\n'use client';\n\nimport * as DialogPrimitive from '@radix-ui/react-dialog';\nimport { Cross2Icon } from '@radix-ui/react-icons';\nimport * as React from 'react';\n\nimport { cn } from '@/lib/utils';\n\nconst Dialog = DialogPrimitive.Root;\n\nconst DialogTrigger = DialogPrimitive.Trigger;\n\nconst DialogPortal = DialogPrimitive.Portal;\n\nconst DialogClose = DialogPrimitive.Close;\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      'fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0',\n      className,\n    )}\n    {...props}\n  />\n));\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName;\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        'fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg',\n        className,\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <Cross2Icon className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n));\nDialogContent.displayName = DialogPrimitive.Content.displayName;\n\nconst DialogHeader = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (\n  <div className={cn('flex flex-col space-y-1.5 text-center sm:text-left', className)} {...props} />\n);\nDialogHeader.displayName = 'DialogHeader';\n\nconst DialogFooter = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn('flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2', className)}\n    {...props}\n  />\n);\nDialogFooter.displayName = 'DialogFooter';\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn('text-lg font-semibold leading-none tracking-tight', className)}\n    {...props}\n  />\n));\nDialogTitle.displayName = DialogPrimitive.Title.displayName;\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn('text-sm text-muted-foreground', className)}\n    {...props}\n  />\n));\nDialogDescription.displayName = DialogPrimitive.Description.displayName;\n\nexport {\n  Dialog,\n  DialogClose,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogOverlay,\n  DialogPortal,\n  DialogTitle,\n  DialogTrigger,\n};\n\nEND_CODE\n\n--- FILE: ui/scroll-area.tsx ---\nLANGUAGE: tsx\nBEGIN_CODE\n'use client';\n\nimport * as ScrollAreaPrimitive from '@radix-ui/react-scroll-area';\nimport * as React from 'react';\n\nimport { cn } from '@/lib/utils';\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn('relative overflow-hidden', className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n));\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName;\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = 'vertical', ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      'flex touch-none select-none transition-colors',\n      orientation === 'vertical' && 'h-full w-2.5 border-l border-l-transparent p-[1px]',\n      orientation === 'horizontal' && 'h-2.5 flex-col border-t border-t-transparent p-[1px]',\n      className,\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n));\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName;\n\nexport { ScrollArea, ScrollBar };\n\nEND_CODE\n\n--- FILE: ui/card.tsx ---\nLANGUAGE: tsx\nBEGIN_CODE\nimport * as React from 'react';\n\nimport { cn } from '@/lib/utils';\n\nconst Card = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(\n  ({ className, ...props }, ref) => (\n    <div\n      ref={ref}\n      className={cn('rounded-xl border bg-card text-card-foreground shadow', className)}\n      {...props}\n    />\n  ),\n);\nCard.displayName = 'Card';\n\nconst CardHeader = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(\n  ({ className, ...props }, ref) => (\n    <div ref={ref} className={cn('flex flex-col space-y-1.5 p-6', className)} {...props} />\n  ),\n);\nCardHeader.displayName = 'CardHeader';\n\nconst CardTitle = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(\n  ({ className, ...props }, ref) => (\n    <div\n      ref={ref}\n      className={cn('font-semibold leading-none tracking-tight', className)}\n      {...props}\n    />\n  ),\n);\nCardTitle.displayName = 'CardTitle';\n\nconst CardDescription = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(\n  ({ className, ...props }, ref) => (\n    <div ref={ref} className={cn('text-sm text-muted-foreground', className)} {...props} />\n  ),\n);\nCardDescription.displayName = 'CardDescription';\n\nconst CardContent = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(\n  ({ className, ...props }, ref) => (\n    <div ref={ref} className={cn('p-6 pt-0', className)} {...props} />\n  ),\n);\nCardContent.displayName = 'CardContent';\n\nconst CardFooter = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(\n  ({ className, ...props }, ref) => (\n    <div ref={ref} className={cn('flex items-center p-6 pt-0', className)} {...props} />\n  ),\n);\nCardFooter.displayName = 'CardFooter';\n\nexport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle };\n\nEND_CODE\n"
}